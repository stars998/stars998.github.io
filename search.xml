<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springMVC</title>
      <link href="/2022/10/08/springMVC/"/>
      <url>/2022/10/08/springMVC/</url>
      
        <content type="html"><![CDATA[<h1><center>springMVC</center></h1><hr><h2 id="springMVC简介"><a href="#springMVC简介" class="headerlink" title="springMVC简介"></a>springMVC简介</h2><h4 id="传统的servlet的不足"><a href="#传统的servlet的不足" class="headerlink" title="传统的servlet的不足"></a>传统的servlet的不足</h4><ul><li>每个请求，都需要定义一个Servlet。虽然可以在service方法中，根据业务标识进行业务分发，但是每个Servlet中的service方法的实现是重复。如果想要对service进行更高层次的封装，就可以解决service的重复代码问题。</li><li>每个请求的参数，都需要根据request对象，从Map逐一的获取，单调且含量低。将所有的参数，自动封装映射，简化开发。</li><li>每个Servlet，向客户端返回数据时，需要单独的处理。</li><li>针对于Servlet在实际使用中的不便，Spring中提供了组件，SpringMVC,更进一步的简化了Servlet的开发。</li></ul><h4 id="springMVC的架构"><a href="#springMVC的架构" class="headerlink" title="springMVC的架构"></a>springMVC的架构</h4><p><img src="/images/springMVC.png" alt="mvc架构"></p><ul><li><p><strong>DispatcherServlet</strong></p><ul><li>核心控制器，本质上就是一个Servlet，处理所有的客户端的请求。根据请求的资源路径，在处理器映射器中查找对应的处理器。</li></ul></li><li><p><strong>HandlerMapping</strong></p></li><li><p>处理器映射器，存储所有当前程序中的处理器，如果在处理器映射器中查找不到资源路径，直接返回404。</p></li><li><p><strong>HandlerAdapter</strong></p><ul><li>处理器适配器，用于适配各种处理器，调用具体的处理器程序。</li></ul></li><li><p><strong>Handler</strong></p><ul><li>具体处理器，开发者实现相应接口或者使用注解声明的程序。用于处理具体的请求。</li></ul></li><li><p><strong>ViewResolver</strong></p><ul><li><p>视图解析器，根据处理器返回的数据，进行数据处理，将数据处理成相应的格式。</p><p>JSP&#x2F;JSON等等。</p></li></ul></li><li><p>完善请求响应流程图</p><p><img src="/images/springMVC/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94.png" alt="请求响应"></p><ol><li>用户通过浏览器发送请求到前端控制器DispatcherServlet。</li><li>前端控制器直接将请求转给处理器映射器HandleMapping。</li><li>处理器映射器HandleMapping会根据请求，找到负责处理该请求的处理器，并将其封装为处理器执行链HandlerExecutionChina后返回给前端控制器DispatcherServlet。</li><li>前端控制器DispatcherServlet根据处理器执行链中的处理器，找到能够执行该处理器的处理器适配器HandlerAdaptor。</li><li>处理器适配器HandlerAdaptor调用执行处理器Controller。</li><li>处理器Controller将处理结果及要跳转的视图封装到一个对象 ModelAndView 中，并将其返回给处理器适配器HandlerAdaptor。</li><li>处理器适配器直接将结果返回给前端控制器DispatcherServlet。</li><li>前端控制器调用视图解析器，将 ModelAndView 中的视图名称封装为视图对象。</li><li>视图解析器ViewResolver将封装了的视图View对象返回给前端控制器DispatcherServlet。</li><li>前端控制器DispatcherServlet调用视图对象，让其自己进行渲染，即进行数据填充，形成响应对象。</li><li>前端控制器响应浏览器。</li></ol></li></ul><h2 id="springMVC使用"><a href="#springMVC使用" class="headerlink" title="springMVC使用"></a>springMVC使用</h2><h4 id="springMVC配置文件"><a href="#springMVC配置文件" class="headerlink" title="springMVC配置文件"></a>springMVC配置文件</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启springmvc 注解 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启组件扫描 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启springmvc 注解驱动 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 处理静态资源 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置视图解析器，完成模板的配置--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="web-xml中配置springMVC"><a href="#web-xml中配置springMVC" class="headerlink" title="web.xml中配置springMVC"></a>web.xml中配置springMVC</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="springMVC的数据绑定"><a href="#springMVC的数据绑定" class="headerlink" title="springMVC的数据绑定"></a>springMVC的数据绑定</h4><pre class="line-numbers language-Java"><code class="language-Java"> @Controllerpublic class Controller01 {    // 映射路径 它可以用在方法上 也可以用在类上  映射路径必须要在整个项目中唯一   // @RequestMapping("/register")    // 返回值是String类型，一般表示 返回值的内容是 页面的路径，通过请求转发跳转到该页面上    // 当使用了@ResponseBody这个注解 就变成了把返回值封装成json格式的对象直接响应到浏览器  //  @ResponseBody    /**     * @RequestParam  处理 浏览器提交过来的参数的名称 和接受参数的名称不一致的情况     */    public String register(String name,Integer password,int sex, String hobby,@RequestParam("City") String city){        System.out.println("name = " + name);        System.out.println("password = " + password);        System.out.println("sex = " + sex);        System.out.println("hobby = " + hobby);        System.out.println("city = " + city);        return "/WEB-INF/register.jsp";    }    /**     * 如果表单上的name属性的值和类中的属性的值一致，类型也一致，则，springMVC框架会自动将接收的表单的数据     * 封装到对象中     * @param user     * @return     */    //@RequestMapping("/register")    public String register2(User user){        System.out.println("user = " + user);        return "/WEB-INF/register.jsp";    }    /**     * springMVC 框架也支持 数据封装到map中，但是必须使用@ReqeustParam注解 搭配使用     * @param map     * @return     */   // @RequestMapping("/register")    public String register3(@RequestParam Map<String,Object> map ){        map.forEach((x,y)->System.out.printf(x+":" + y));        return "/WEB-INF/register.jsp";    }    /**     * 针对表单提交的数据为一个name 对应多个value的情况，则单独接收可以使用数组接收     * @param hobby     * @return     */   // @RequestMapping("/register")    public String register4(String[] hobby){        System.out.println(Arrays.toString(hobby));        return "/WEB-INF/register.jsp";    }    /**     * 针对表单提交的数据为一个name 对应多个value的情况，则单独接收可以使用集合接收，但是     * 必须搭配@RequestParam注解一起使用     * @param hobby     * @return     */    //@RequestMapping("/register")    public String register5(@RequestParam("hobby") List<String> hobby){        for (String s : hobby) {            System.out.println(s);        }        return "/WEB-INF/register.jsp";    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="springMVC的跳转"><a href="#springMVC的跳转" class="headerlink" title="springMVC的跳转"></a>springMVC的跳转</h4><ul><li><p>在SpringMVC中，默认的跳转方式内部转发,，每个URL前面默认有forward:</p></li><li><p>默认会将方法的返回值当做视图的路径处理。并且，在SpringMVC中，&#x2F;表示当前项目根目录。如果想要使用重定向，则使用关键字：redirect:&#x2F;路径。</p><pre class="line-numbers language-Java"><code class="language-Java">import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class JumpController {    @RequestMapping("register")    public String forward(){               return  "forward:/success.jsp"; // 背后是直接去项目的根目录下面找success.jsp文件    }    @RequestMapping("register")    public String forward1(){            return  "success";   // 背后会使用模板 拼接跳转的路径 /WEB-INFO/success.jsp    }/** *  如果想使用重定向的方式跳转到其它页面，那么则使用redirect关键字 *  使用方式： *       redirect:绝对路径 * * */@RequestMapping("/register")public String register7(@RequestParam("hobby") List<String> hobby){    for (String s : hobby) {        System.out.println(s);    }    return "redirect:/other.jsp";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="springMVC支持内置对象"><a href="#springMVC支持内置对象" class="headerlink" title="springMVC支持内置对象"></a>springMVC支持内置对象</h4><ul><li><p>在SpringMVC中，支持为处理器中的方法注入内置的对象，如：HttpServletRequest、HttpServletResponse、HttpSession、Model等。</p><pre class="line-numbers language-Java"><code class="language-Java">/** * * @param request * @param resp * @param session * @param model  是springmvc中 推荐使用参数传递的容器 当参数发生覆盖 优先使用model中的参数 * @throws IOException */@RequestMapping("servletParam.do")public void servletParam(HttpServletRequest request, HttpServletResponse resp, HttpSession session, Model model) throws IOException {    String name = request.getParameter("name");    System.out.println(name);    System.out.println(request);    System.out.println(resp);    System.out.println(session);    System.out.println(model);    resp.sendRedirect("success.jsp");    //return "/success.jsp";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="springMVC参数传递"><a href="#springMVC参数传递" class="headerlink" title="springMVC参数传递"></a>springMVC参数传递</h4><ul><li><p>在SpringMVC中，可以获取内置HttpServletRequest对象，并且SpringMVC默认使用内部转发，所以可以使用HttpServletRequest进行数据传递，但是SpringMVC推荐使用Model进行数据传递，SpringMVC最终是将URL路径和Model进行结合产生ModelAndView对象。</p><pre class="line-numbers language-Java"><code class="language-Java">/** * 演示参数传递问题 *  在springmvc中  默认的跳转是内部转发 *  所以可以使用HttpServletRequest 传递参数 *  但是  springmvc 推荐使用 model 传递参数  并且 model 参数的优先级最高 * * @param request * @param model * @return */@RequestMapping("param2.do")public  String  param(HttpServletRequest request,Model model){    model.addAttribute("age",25);    model.addAttribute("sex","女");    request.setAttribute("name","韩梅梅");    request.setAttribute("age",18);    return "/success.jsp";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="SpringMVC获取Servlet作用域"><a href="#SpringMVC获取Servlet作用域" class="headerlink" title="SpringMVC获取Servlet作用域"></a>SpringMVC获取Servlet作用域</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">import org.springframework.web.context.ContextLoader;import org.springframework.web.context.request.RequestAttributes;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.ServletContext;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;/** * @Description: 获取Servlet 作用域对象工具类 *      HttpServletRequest *      HttpSession *      ServletContext */public class WebScopeUtil {    /**     *  获取当前  HttpServletRequest 对象     * @return     */    public static HttpServletRequest getRequest(){        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();        return  requestAttributes.getRequest();    }    /**     * 获取当前请求绑定的session     * @return     */    public static HttpSession getSession(){        return  getRequest().getSession();    }    /**     *  获取全局容器对象     * @return     */    public static ServletContext getContext(){        //getRequest().getServletContext(); // ServletContext 的生命周期 是早于 HttpServletRequest        //所以不能通过 HttpServletRequest 获取ServletContext  可能发生 NullpointException        return  ContextLoader.getCurrentWebApplicationContext().getServletContext();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="springMVC内置的编码过滤器"><a href="#springMVC内置的编码过滤器" class="headerlink" title="springMVC内置的编码过滤器"></a>springMVC内置的编码过滤器</h4><ul><li><p>代码</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 编码过滤器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>charsetFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置内置的编码过滤器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 为编码过滤器指定编码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>charsetFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 只对springmvc处理的请求进行编码过滤 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="springMVC响应JSON"><a href="#springMVC响应JSON" class="headerlink" title="springMVC响应JSON"></a>springMVC响应JSON</h2><h4 id="xml配置的形式"><a href="#xml配置的形式" class="headerlink" title="xml配置的形式"></a>xml配置的形式</h4><ul><li><p>XML配置形式，是修改了默认结果处理，全局生效的。使用注解@ResponseBody，标识该方法返回的内容不是URL地址，而是一个消息，使用输出对象输出给客户端。</p><p>@RequestMapping</p><ol><li><p>name : 方法映射名称</p></li><li><p>value&#x2F;path : 方法访问路径</p></li><li><p>method : 支持的请求的方法类型： </p></li><li><p>GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE</p></li><li><p>params ： 请求必须有的参数</p></li><li><p>headers ： 请求必须有的头信息</p></li><li><p>consumes ： 指定请求的数据格式类型 ： 普通文本、表单格式、JSON</p></li><li><p>produces ： 指定返回数据的格式类型 ：JSON 、HTML</p></li></ol></li></ul><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul><li><p>SpringMVC中，有内置的转换器，但是SpringMVC内置的转换器需要相关jar包，需要jackson的jar包。只需要导入jar包后，使用**@ResponseBody<strong>标识返回的数据是消息即可。SpringMVC自动将返回数据当做JSON字符串处理，并且消息按照UTF-8进行编码。如果</strong>@ResponseBody放在类上，类中所有的方法都返回的是消息，不是视图资源。**</p><p><strong>注意：</strong> <strong>@RestController</strong></p><p>是 @ResponseBody， @Controller 结合，标识该类是一个处理器，并且处理器中所有的方法都返回的是消息。</p></li></ul><h2 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h2><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li><p>导包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 文件上传相关依赖jar  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件上传的解析器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 文件上传的解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>处理器</p><pre class="line-numbers language-Java"><code class="language-Java"> @Controller@RequestMapping("/fileUpload")public class FileUploadController {       @RequestMapping("")       @ResponseBody       // MultipartFile 从servlet 3.0 以后支持文件上传 参数的名称 必须和 表单中的上传控件的名称 保持一致       public String  upload(MultipartFile file){           /**            * 文件上传考虑的问题：            *   文件上传的路径的问题            *   上传文件的大小问题            *   上传文件的类型            *   上传文件的名称设置            *            * 问题解决方案：            *    文件上传的路径的问题  （1.项目的根目录下面（使用少），2.使用第三方的图片服务器（阿里，七牛云...））            *    上传文件的大小问题   通过上传的文件可以获取到文件的真实大小，可以达到限制的目的            *    上传文件的类型问题   通过上传的文件可以获取到文件的类型。进而进行判断            *    上传文件的名称问题   通过时间戳 或者 UUID 来随机生成文件的新的名称达到唯一的目的            *            */           String originalFilename = file.getOriginalFilename();           System.out.println("文件的原始名称 = " + originalFilename);           System.out.println("文件的大小 (字节）= " + file.getSize());           System.out.println("文件的类型 = " + file.getContentType());           try {               File newFile = new File("D://" + file.getOriginalFilename());               Font font = new Font("微软雅黑", Font.BOLD, 15); // 字体的属性设置               // 文件上传的方法               ImgUtil.pressText(file.getInputStream(), new FileOutputStream(newFile), "我是水印", Color.RED, font, 1, 1, 0.5f);           }catch (Exception e){                e.printStackTrace();           }           return "文件上传成功";       }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><ul><li><p>方法一</p></li><li><p>文件下载的本质，就是获取服务器的文件数据信息，使用字节流将数据传递给客户端。</p><ol><li><p>使用输入流，将磁盘文件读到内存中。</p></li><li><p>使用网络输出流，将数据输出给客户端。</p></li></ol><pre class="line-numbers language-Java"><code class="language-Java">@Controller@RequestMapping("/download")public class DownloadController {     @RequestMapping("")    public void download(String fileName, HttpServletResponse response) throws Exception {         // 准备要下载的文件         File file = new File("d://" + fileName);         //设置响应类型 通知浏览器 不要打开         response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);         // 通过设置头信息 不让浏览器把图片的名称 后缀名进行修改         String name = URLEncoder.encode(fileName, "UTF-8");         System.out.println("编码后的名字:"+name);         response.setHeader("Content-Disposition", "attachment; filename="+name);         // 把下载的文件转成流对象         FileInputStream fileInputStream = new FileInputStream(file);         // 获取输出流         ServletOutputStream outputStream = response.getOutputStream();         int len = 0;         byte[] buffer = new byte[1024];         while ((len=fileInputStream.read(buffer))!=-1){              outputStream.write(buffer,0,len);              outputStream.flush();         }         outputStream.close();         fileInputStream.close();     }    /**     *  现实开发中，注意点：     *  1. 下载需要限制     *  2. 下载的源头是服务器地址 （文件上传的操作     *   （把文件上传到云服务器以后，然后云服务器会返回一个url地址（图片在云服务器上的真实地址），     *    后 台程序拿到图片的真实地址和图片的源文件名称 一同 存入到数据库中）     *     */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法二</p></li><li><p>springMVC中为了简化文件的下载，封装了实体类：<strong>ResponseEntity</strong>，可以将文件数据封装在<strong>ResponseEntity</strong>中。</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.controller;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;  import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.net.URLEncoder;/** * @Description: 文件下载示例 */@Controller@RequestMapping("download")public class DownLoadController {    @RequestMapping("download2.do")    public ResponseEntity<Byte[]> download() throws Exception {        File file = new File("E:\\猪图片.jpg");//本地磁盘文件        //使用输入流  将文件读入内存中        FileInputStream fis = new FileInputStream(file); // 找参照物   将程序运行的内存当做参照物        //文件的大小        long length = file.length();        //创建一个和文件一样大小的字节数组  一次性将数据读入到内存中  如果文件量过大，请求比较频繁 存在 崩溃的风险        byte[] fileByte = new byte[(int) length];//一个G 的   byte 数组  64 G    65个人下载   1分钟        //一次性将文件数据读入到数组中        fis.read(fileByte);        // springmvc 中封装的 响应实体 ：        //设置响应码        //设置响应的数据头信息        //设置响应数据        HttpHeaders headers = new HttpHeaders(); //响应头信息        //设置响应的数据为流数据  告诉浏览器 不要解析        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);        //设置下载的文件的名称  中文字符串要进行编码        headers.setContentDispositionFormData("filename","猪图片.jpg");        ResponseEntity responseEntity = new ResponseEntity(fileByte,headers, HttpStatus.OK);        return responseEntity;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="springMVC拦截器"><a href="#springMVC拦截器" class="headerlink" title="springMVC拦截器"></a>springMVC拦截器</h2><h4 id="使用拦截器"><a href="#使用拦截器" class="headerlink" title="使用拦截器"></a>使用拦截器</h4><ul><li><p>创建类实现HandlerInteceptor接口</p><pre class="line-numbers language-Java"><code class="language-Java">import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * @Description: 自定义拦截器 */public class MyInterceptor implements HandlerInterceptor {    /**     * 在执行具体的Handler中的方法前执行     * @param request  当前的请求对象     * @param response  当前的响应对象     * @param handler   具体的处理器中将要执行的方法     * @return   boolean  如果 返回 true 则执行Handler中的方法   false 则 不执行handler中的方法     * @throws Exception     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        System.out.println("我是拦截器中preHandle 方法");        return true;    }    /**     *  在具体的Handler中的方法执行完成 但是没有做具体的视图解析操作     * @param request  当前 请求对象     * @param response  当前响应对象     * @param handler 具体的处理器中将要执行的方法     * @param modelAndView 具体的处理器中将要执行的方法 返回的结果     * @throws Exception     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {        System.out.println("我是拦截器中postHandle 方法");        //在具体的解析之前  修改视图模型中数据        modelAndView.addObject("name","韩梅梅");    }    /**     *  完成了视图解析后 整个方法执行完成调用的方法 在finally中调用 或者出现异常也会调用     * @param request   当前请求对象     * @param response  当前响应对象     * @param handler   具体的处理器中将要执行的方法     * @param ex         具体的处理器中抛出的异常     * @throws Exception     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {        System.out.println("我是拦截器中afterCompletion 方法");        System.out.println(ex.getMessage());        request.setAttribute("msg","网管去火星了!");        request.getRequestDispatcher("/500.jsp").forward(request,response);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置拦截器</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启组件扫描 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描所有处理器 放入到处理器映射器中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启 mvc注解 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 文件上传的解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;property name="maxUploadSize" value="1">&lt;/property>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置springmvc的拦截器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 拦截器的资源路径  /** 拦截所有  ** 表示多层目录 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 不拦截的资源路径 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/page.do<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 自定义的拦截器 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.interceptor.MyInterceptor<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Interceptor和Filter的区别"><a href="#Interceptor和Filter的区别" class="headerlink" title="Interceptor和Filter的区别"></a>Interceptor和Filter的区别</h4><ul><li>Filter是Java Web的规范，拦截的是请求，任何JavaWeb项目都可以有Filter,但是Interceptor是SpringMVC提供的一套规范HandlerInterceptor，只适用SpringMVC自身，并且只能对DispatherServlet处理器的请求生效，拦截的方法。从范围上说，任何JavaWeb项目都有Filter,但是未必有Interceptor。</li></ul><h4 id="同一异常处理器"><a href="#同一异常处理器" class="headerlink" title="同一异常处理器"></a>同一异常处理器</h4><ul><li><p>在spring中，相对完善的异常处理器机制，spring可以自己定义处理异常的规则，这种处理异常规则的程序，就被称之为异常处理器。其实，异常处理器就是对controller的增强，因为异常是向上抛，controller调用service，service调用mapper，controller属于最上层，所以最终异常都会汇集到controller。因此，spring提供了@ControllerAdvice注解,表示对controller增强类。并且还提供了@ExceptionHandler这个注解，当发生异常时，该注解修饰的方法就会执行</p></li><li><p>在实际开发中，异常主要分为两类：</p><ol><li>系统异常，JDK中定义的异常</li><li>业务异常，开发者自己定义的异常</li></ol></li><li><p>一般是将系统异常转化为业务异常，开发者只处理业务异常。使用try…catch…将代码包裹起来，在catch中抛出自定义的异常,这种方案就是将系统异常转化为业务异常。因为很多数据操作，事务需要异常进行数据回滚。</p></li><li><p>例子</p><pre class="line-numbers language-Java"><code class="language-Java"> // 当密码出现问题的时候 ，使用public class MyPasswordException extends  RuntimeException{    public MyPasswordException(String msg){        super(msg);    }}@Repositorypublic class UserMapper {    public boolean select(String name, String pwd) {        int i = 1/0;        if (name.equals("root")&&pwd.equals("123")) {             return true;        }        return false;    }}@Servicepublic class UserServiceImpl  implements UserService {    @Autowired    private UserMapper userMapper;//    @Override//    public boolean login(String name, String pwd) {////        if (name==null || name.equals("")) {//              throw  new RuntimeException("账号不能为空");//        }////        if (pwd==null || pwd.equals("")) {//            throw  new RuntimeException("密码不能为空");//        }////       try {//          return userMapper.select(name,pwd);//       }catch (Exception e){//           e.printStackTrace();//           return false;//       }////    }    @Override    public void login(String name, String pwd) {        if (name==null || name.equals("")) {            throw new MyAccountException("账号不能为空");        }        if (pwd==null || pwd.equals("")) {            throw  new MyPasswordException("密码不能为空");        }        boolean result =  userMapper.select(name,pwd);        if (!result){            throw  new MyLogicException("账号或者密码错误");        }    }}public interface UserService {    void login(String name, String pwd);}// 统一异常的处理类@ControllerAdvicepublic class MyControllerAdvice {       @ExceptionHandler(MyAccountException.class)       @ResponseBody      public String accountException(MyAccountException exception){            return  exception.getMessage();       }    @ExceptionHandler(MyPasswordException.class)    public String pwdException(MyPasswordException exception){        return  "500";    }    @ExceptionHandler(MyLogicException.class)    public String logicException(MyLogicException exception){        return  "redirect:/login.html";    }    @ExceptionHandler(RuntimeException.class)    @ResponseBody    public String runtimeException(RuntimeException exception){        return  "程序崩溃";    }}@Controller@RequestMapping("/loginUser")public class LoginController {    @Autowired    private UserService userService;     @RequestMapping("")     @ResponseBody    public String login(String name,String pwd) {         userService.login(name,pwd);         return "登录失败";     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h2><h3 id="Http协议设计的初衷"><a href="#Http协议设计的初衷" class="headerlink" title="Http协议设计的初衷"></a>Http协议设计的初衷</h3><ul><li><p>HTTP协议在设计时，期望使用一个URL表示一个资源。然后，根据不同的动作：GET、POST、PUT、DELETE等等表示对一个资源的各种操作。</p><p>如：</p><ol><li><p>获取这个资源就使用GET,</p></li><li><p>修改这个资源PUT,</p></li><li><p>删除这个资源用DELETE，</p></li><li><p>创建这个资源使用POST。</p></li></ol></li><li><p>但是在实际使用中，多个URL表示一个资源，例如：新增用户： addUser.do,修改用户:updateUser.do,删除用户：deleteUser.do,查询一个用户：getUser.do。这时候，出现一个资源存在多个URL。在一定程度声，违背了HTTP协议的设计初衷，并且命名也是个问题。</p></li></ul><h3 id="Restful设计思想"><a href="#Restful设计思想" class="headerlink" title="Restful设计思想"></a>Restful设计思想</h3><ol><li><p>使用一个URL表示一种资源</p></li><li><p>客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源</p></li><li><p>通过操作资源的表现形式来操作资源</p></li></ol><h3 id="在SpringMVC中使用Restful"><a href="#在SpringMVC中使用Restful" class="headerlink" title="在SpringMVC中使用Restful"></a>在SpringMVC中使用Restful</h3><ul><li>SpringMVC也支持Restful风格，但是目前存在一些问题。主要不是很好支持PUT请求，没有办法获取到PUT请求的数据。</li></ul><h4 id="将DispatherServlet的映射地址改为"><a href="#将DispatherServlet的映射地址改为" class="headerlink" title="将DispatherServlet的映射地址改为"></a>将DispatherServlet的映射地址改为</h4><ul><li><p>由于将DispatherServlet的映射路径，改为了&#x2F;，则所有的请求都由DispatherServlet处理，静态的资源文件不在处理器映射器中，会出现404。并拦截器拦截DispatherServlet中调用Handler中的方法，改为&#x2F;，则所有的请求都会被拦截。</p><p>则需要在SpringMVC的核心配置文件中，新增启用默认的Servlet的处理器。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 启用默认Servlet --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并且注意，配置拦截器时，将静态资源不进行拦截，要排除：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/resouces/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="配置处理PUT请求的拦截器"><a href="#配置处理PUT请求的拦截器" class="headerlink" title="配置处理PUT请求的拦截器"></a>配置处理PUT请求的拦截器</h4><ul><li><p>代码</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 处理put请求的拦截器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>restful<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HttpPutFormContentFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>restful<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="处理器代码"><a href="#处理器代码" class="headerlink" title="处理器代码"></a>处理器代码</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.util.HashMap;import java.util.Map;@Controller@RequestMapping("user")@ResponseBodypublic class UserController {//    @RequestMapping(method = RequestMethod.GET)//    //@GetMapping//    public Object get(Integer id){//        System.out.println("get请求");//        Map<String,Object> data = new HashMap<>();//        data.put("code",200);//        data.put("msg","get请求");//        return  data;//    }    @GetMapping("{id}/{name}") //后台的获取方式 使用 {} 进行包裹  并且 在方法参数中 使用@PathVariable    // 这种将参数拼接在URL上的方式 只支持 GET 请求和 DELETE请求    public Object get1(@PathVariable("id") Integer id,@PathVariable("name") String name){        System.out.println("get请求");        System.out.println(id);        System.out.println(name);        Map<String,Object> data = new HashMap<>();        data.put("code",200);        data.put("msg","get请求");        return  data;    }    //@RequestMapping(method = RequestMethod.PUT)    @PutMapping    public Object put(Integer id){        System.out.println("PUT请求");        Map<String,Object> data = new HashMap<>();        data.put("code",200);        data.put("msg","PUT请求");        return  data;    }    @RequestMapping(method = RequestMethod.POST)    //@PostMapping    public Object post(Integer id){        System.out.println("post请求");        Map<String,Object> data = new HashMap<>();        data.put("code",200);        data.put("msg","post请求");        return  data;    }    @RequestMapping(method = RequestMethod.DELETE)    @DeleteMapping    public Object delete(Integer id){        System.out.println("delete请求");        Map<String,Object> data = new HashMap<>();        data.put("code",200);        data.put("msg","delete请求");        return  data;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="页面代码"><a href="#页面代码" class="headerlink" title="页面代码"></a>页面代码</h4><ul><li><p>代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>put<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>get-1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resources/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1001</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"user"</span><span class="token punctuation">,</span>               type<span class="token punctuation">:</span><span class="token string">"PUT"</span><span class="token punctuation">,</span>               param<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1001</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span><span class="token string">"user"</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span><span class="token string">"DELETE"</span><span class="token punctuation">,</span>                param<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1001</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1001</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn5"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将参数 拼接在URL上面</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"user/11111/lucy"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> springMVC学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2022/10/07/spring/"/>
      <url>/2022/10/07/spring/</url>
      
        <content type="html"><![CDATA[<h1><center>spring</center></h1><hr><h2 id="spring框架介绍"><a href="#spring框架介绍" class="headerlink" title="spring框架介绍"></a>spring框架介绍</h2><h4 id="传统项目的架构"><a href="#传统项目的架构" class="headerlink" title="传统项目的架构"></a>传统项目的架构</h4><ul><li><p>在传统的项目中，一般遵循MVC开发模型。</p><ol><li>view层与用户进行交互，显示数据或者将数据传输给view层。</li><li>在controller层创建service层对象，调用service层中业务方法。</li><li>在service层创建dao层对象，调用dao层中操作数据的方法。</li><li>dao层进行具体的数据库操作</li></ol></li><li><p>架构图</p><p><img src="/images/spring/%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="架构图"></p></li></ul><h4 id="spring的核心组件"><a href="#spring的核心组件" class="headerlink" title="spring的核心组件"></a>spring的核心组件</h4><ul><li></li></ul><p>  <img src="/images/spring/%E7%BB%84%E4%BB%B6.png" alt="组件"></p><h4 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h4><ul><li><p>核心容器由 spring-core，spring-beans，spring-context，spring-context-support和spring-expression（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成，它们的细节如下：</p><ol><li>spring-core 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li>spring-beans 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li>context 模块建立在由 core和 beans 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。ApplicationContext 接口是 Context 模块的焦点。spring-context-support 提供了对第三方库集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li>spring-expression 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li></ol></li><li><p>依赖关系图</p><p><img src="/images/spring/%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.png" alt="依赖关系"></p></li></ul><h4 id="数据访问-x2F-集成"><a href="#数据访问-x2F-集成" class="headerlink" title="数据访问&#x2F;集成"></a>数据访问&#x2F;集成</h4><ul><li><p>数据访问&#x2F;集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：</p><p>（<strong>注</strong>：JDBC&#x3D;Java Data Base Connectivity，ORM&#x3D;Object Relational Mapping，OXM&#x3D;Object XML Mapping，JMS&#x3D;Java Message Service）</p><ol><li>JDBC 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li><li>ORM 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring的其它功能整合，比如前面提及的事务管理。</li><li>OXM 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li><li>JMS 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li><li>事务模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写 beginTransaction()、commit()、rollback() 等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细）</li></ol></li></ul><h4 id="web层"><a href="#web层" class="headerlink" title="web层"></a>web层</h4><ul><li>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：<ol><li>Web 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、<strong>使用</strong> <strong>Servlet</strong> <strong>监听器初始化 IoC</strong> <strong>容器</strong>等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li><li>Web-MVC 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li><li>Web-Socket 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li><li>Web-Portlet 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li></ol></li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>还有其他一些重要的模块，像 AOP，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：<ol><li>AOP 模块提供了面向方面（切面）的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。</li><li>Aspects 模块提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li>Instrumentation 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li><li>Messaging 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</li><li>测试模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</li></ol></li></ul><h2 id="Bean标签的属性介绍"><a href="#Bean标签的属性介绍" class="headerlink" title="Bean标签的属性介绍"></a>Bean标签的属性介绍</h2><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><ul><li>是 bean的唯一标识 一个bean，其id 值只能有一个 。整个IOC 容器id 值不允许重复，使用名称作为key</li></ul><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><ul><li>一个bean的名称，可以存在多个，多个之间使用逗号分隔。不论bean有没有定义name属性，默认id都会当做name。</li></ul><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><ul><li>bean的具体的类型，包名和类名组成。</li></ul><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><ul><li>bean的作用域<ol><li>prototype ：非单例，每次获取都会创建一个新的bean对象。</li><li>singleton : 单例，多次获取永远同一个bean， 默认值。</li><li>request ： 一次请求，基于web项目的bean的作用域。</li><li>session : 一次会话，基于web项目的bean的作用域。</li></ol></li></ul><h4 id="lazy-init"><a href="#lazy-init" class="headerlink" title="lazy-init"></a>lazy-init</h4><ul><li>延迟初始化，默认只要加载了配置文件。bean对象就会被初始化，lazy-init则是获取时才会初始化。只针对单例模式有效，非单例每次获取都会创建，没有延迟初始化的意义</li></ul><h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends-on"></a>depends-on</h4><ul><li>初始化时依赖的对象，当前对象初始化前需先初始化depends-on指定的对象</li></ul><h4 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h4><ul><li>对象初始化后，调用的方法</li></ul><h4 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a>destroy-method</h4><ul><li>对象销毁时，调用的方法</li></ul><h4 id="autowire"><a href="#autowire" class="headerlink" title="autowire"></a>autowire</h4><ul><li><p>属性自动装配 </p><ol><li><p>byName 根据属性名称装配 </p></li><li><p>byType 根据类型装配</p></li></ol></li></ul><h4 id="autowire-candidate"><a href="#autowire-candidate" class="headerlink" title="autowire-candidate"></a>autowire-candidate</h4><ul><li><p>是否允许作为自动装配的候选项</p><ol><li><p>true 作为自动装配的候选项 </p></li><li><p>false 不作为自动装配的候选项</p></li></ol></li></ul><h4 id="primary"><a href="#primary" class="headerlink" title="primary"></a>primary</h4><ul><li>优先使用该bean，因为Spring需要支持使用类型查找对象，在一个大类型下，可能存在多个小类型。如果根据大类型装配属性时，不知道使用哪个具体的对象，则可以根据primary设置优先级。</li></ul><h2 id="Bean对象创建的方法"><a href="#Bean对象创建的方法" class="headerlink" title="Bean对象创建的方法"></a>Bean对象创建的方法</h2><h4 id="构造方法创建"><a href="#构造方法创建" class="headerlink" title="构造方法创建"></a>构造方法创建</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domian.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="静态工厂创建"><a href="#静态工厂创建" class="headerlink" title="静态工厂创建"></a>静态工厂创建</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    id : bean 的唯一标识    class : 工厂类    factory-method : 工厂方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.factory.UserStaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getObj<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="非静态工厂创建"><a href="#非静态工厂创建" class="headerlink" title="非静态工厂创建"></a>非静态工厂创建</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    非静态工厂创建对象        在非静态工厂中，创建对象的方法是非静态方法。非静态方法的执行，首先需要该类对象        注意： 使用非静态工厂创建对象，首先需要创建工厂类对象--></span><span class="token comment" spellcheck="true">&lt;!-- 工厂类对象 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.factory.UserFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用非静态工厂创建对象 --></span><span class="token comment" spellcheck="true">&lt;!--    factory-bean : 非静态工厂对象    factory-method : 创建对象的非静态方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user3<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getObj<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解创建"><a href="#注解创建" class="headerlink" title="注解创建"></a>注解创建</h4><ul><li><p>组件注解</p><ul><li><p>@Component</p><p>表示该类为一个被Spring管理的组件。但是，由于在开发中为了让代码的可读性更高。</p><p>Spring基于分层思想，将需要创建的组件分为以下几类：</p><ol><li><p>@Controller</p><p>@Controller注解，标识该类是controller层的类。并且，注意在使用SpringMVC时，所有的Constroller，必须使用@Controller注解。</p></li><li><p>@Service</p></li></ol><p>   @Service注解，标识该类是业务层的类。</p><ol start="3"><li><p>@Respository</p><p>@Respository注解，标识该类是操作数据层的类。</p></li></ol></li></ul></li><li><p>注解使用步骤</p><ul><li><p>在spring的核心配置文件中，开启注解扫描，让Spring将被注解修饰的类，创建对相关。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    开启组件扫描 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将需要交给spring管理的类上面标上对应的注解</p><pre class="line-numbers language-Java"><code class="language-Java">import org.springframework.stereotype.Component;@Componentpublic class Person {    public Person(){        System.out.println("Person的构造方法.........");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="ioc属性注入"><a href="#ioc属性注入" class="headerlink" title="ioc属性注入"></a>ioc属性注入</h2><h4 id="构造方法属性注入"><a href="#构造方法属性注入" class="headerlink" title="构造方法属性注入"></a>构造方法属性注入</h4><ul><li></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 无参构造方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain.User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--           有参数的构造方法                此时是2个参数的构造方法                index : 参数下标  从 0开始                value : 属性的值         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain.User<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>韩梅梅<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 有参数的构造方法                使用index下标查找 属性 存在问题 都只有一个参数 则默认使用后面的构造方法                可以使用 type 指定参数的类型                更推荐 使用name属性 ： name表示构造器中参数的名称         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>韩梅梅<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="set方法属性注入"><a href="#set方法属性注入" class="headerlink" title="set方法属性注入"></a>set方法属性注入</h4><ul><li></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--           使用set方法进行属性注入            property 表示属性                name : 表示属性对应的set方法名,去掉set前缀,首字母小写。并不是真正的属性名         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1001<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解属性注入"><a href="#注解属性注入" class="headerlink" title="注解属性注入"></a>注解属性注入</h4><ul><li><p>在spring中，为了简化属性的注入，Spring提供注解：**@Autowired**,Spring会自动从IOC容器中，为这个属性查找相应类型的值，进行注入。</p><pre class="line-numbers language-Java"><code class="language-Java">public class Student {    public Integer id;    public String name;    @Autowired  //使用注解自动注入    //User 对象    public User user;    public void setStudentId(Integer id) {        System.out.println("set方法被调用了............");        this.id = id;    } /*   public void setUser(User user) {        this.user = user;    }*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在使用自动注入时，可以在bean标签上，配置<strong>autowire</strong>，但是此时必须有该属性的set方法，**@Autowired**注解，是不需要set方法的。</p><p>如果是在xml中注入对象，值使用ref属性。value属性，只支持boolean,数字，字符串等。</p></li></ul><h2 id="AOP代理"><a href="#AOP代理" class="headerlink" title="AOP代理"></a>AOP代理</h2><h4 id="aop简介"><a href="#aop简介" class="headerlink" title="aop简介"></a>aop简介</h4><ul><li>代理：静态代理<ul><li>静态代理，每个被代理类都需要创建对应的代理类。随着程序的扩展，代理类也会增多，臃肿,维护量变多,为了解决这个问题，Java中，提供了动态代理技术，开发者不需要自己定义代理类，代理类由JDK动态的创建，开发只需要指定被代理的类即可。</li></ul></li></ul><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ul><li><p><strong>JDK动态代理</strong></p><ul><li><p>proxy</p></li><li><p>该类提供了方法创建代理类和代理类的对象的方法</p><p>创建一个代理类并返回代理类对象</p><pre class="line-numbers language-Java"><code class="language-Java">static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)  loader ：// 类加载器，指定类加载器，是为了精确的定位类interfaces ： // 接口Class类，使用JDK的反射，必须要有接口h ：InvocationHandler ，//代理的处理器，每个代理类都有一个关联的处理器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>InvocationHandler</p></li><li><p>是每个代理类对应的处理器</p><pre class="line-numbers language-java"><code class="language-java">Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span>Method method<span class="token punctuation">,</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>Object  <span class="token comment" spellcheck="true">//方法调用的返回值，可以作为被代理的方法调用的返回值</span>proxy ： <span class="token comment" spellcheck="true">//代理类对象</span>method ： <span class="token comment" spellcheck="true">//目标类中被代理的方法</span>args <span class="token operator">:</span> <span class="token comment" spellcheck="true">//目标类中被代理的方法的运行参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例子如下</p><pre class="line-numbers language-Java"><code class="language-Java">//目标接口类public interface Agent {    void rent();    void rent2(int i);}//目标类public class FangDong implements Agent{    @Override    public void rent() {        System.out.println("租房1000元");    }    @Override    public void rent2(int i) {        System.out.println("第二套房");    }}//代理增强类public class MyRent implements MethodBeforeAdvice {    @Override    public void before(Method method, Object[] objects, Object o) throws Throwable {        System.out.println("增加500元");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>cglib动态代理</strong></p><ul><li><p>MethodInterceptor</p><ul><li><p>cglib中，提供的对方法执行拦截的接口。其中intercept是对具体方法进行拦截处理的方法。</p><pre class="line-numbers language-Java"><code class="language-Java">public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,                               MethodProxy proxy) Object  ：// 方法执行返回的结果obj ：//增强类的对象method ：//目标方法proxy ：//用于回调的方法的对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例子如下</p><pre class="line-numbers language-Java"><code class="language-Java">//代理增强类public class MyMethodInterceptor implements MethodInterceptor {    @Override    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {        System.out.println("多收5000元租金");        return methodProxy.invokeSuper(o,objects);    }}//目标类public class Fangdong {    public void sent() {        System.out.println("房子出租1000元");    }}//测试类public class App {    public static void main(String[] args) {        Enhancer enhancer = new Enhancer();        enhancer.setSuperclass(Fangdong.class);        enhancer.setCallback(new MyMethodInterceptor());        Fangdong fangdong = (Fangdong) enhancer.create();        fangdong.sent();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h4 id="spring的AOP配置"><a href="#spring的AOP配置" class="headerlink" title="spring的AOP配置"></a>spring的AOP配置</h4><ul><li><p>AOP的相关概念</p><ul><li>**连接点(JoinPoint)**：所谓连接点是指那些被拦截的点，而spring中这些点就是指方法，因为spring只支持方法类型的连接点。</li><li>**切入点(PointCut)**：所谓切入点就是指我们要对那些JoinPoint进行拦截的定义，指的是具体的拦截的位置</li><li><strong>增强&#x2F;通知(Advice)</strong> : 增强就是对具体的连接点进行扩展的功能。由于一般对方法进行增强，分为在方法前执行或者方法后，或者发生异常执行等等，所以增强被分为：前置增强(前置通知)、后置增强(后置通知)、环绕通知(环绕增强)、异常增强（异常通知）</li><li>**引介(Introduction)**：引介是一种特殊的Advice，在不修改代码的前提下，引介可以在运行期为类动态的添加一些方法或Field.</li><li><strong>目标(Target)</strong> :被代理的类(需要增强类)</li><li><strong>织入(Weaving)</strong> :把Advice应用到Target的过程</li><li><strong>代理(Proxy)</strong>:使用AOP配置后产生的代理类</li><li><strong>切面(Aspect)</strong>:切点和增强整合形成了切面</li></ul></li><li><p>AOP增强图</p><p><img src="/images/spring/aop%E5%A2%9E%E5%BC%BA.png" alt="aop增强"></p></li><li><p>前置增强-MethodBeforeAdvice</p></li><li><p>后置增强-AfterReturningAdvice</p></li><li><p>环绕增强-MethodInterceptor</p></li><li><p>异常增强-ThrowsAdvice</p></li><li><p>aop配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义目标类对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>targetClass<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.impl.TargetClassImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义增强类对象 前置增强类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeforeAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.advice.MyBeforeAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义增强类对象  后置增强 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfterAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.advice.MyAfterAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义增强类 环绕增强 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAroundAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.advice.MyAroundAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义增强类  异常增强类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myExceptionAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.advice.MyExceptionAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 进行织入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            id : 连接点的唯一标识            expression : 连接点的表达式                execution(* 包名.类名.方法名(..))                * 指任意字符                .. 表示参数可以是任意个        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforePoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.targetMethod(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后置增强的切点 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.afterTargetMethod(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 环绕增强的切点 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aroundPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.aroundTargetMethod(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 异常增强的切点 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.runException(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            织入            将增强和连接点 结合        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myBeforeAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforePoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 织入            后置增强的织入         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAfterAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterPoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            织入            环绕增强的织入        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAroundAdvice<span class="token punctuation">"</span></span>  <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aroundPoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--          织入          异常增强的织入      --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myExceptionAdvice<span class="token punctuation">"</span></span>  <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionPoint<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>AspectJ框架AOP配置</p><ul><li><p>编写增强类</p><pre class="line-numbers language-Java"><code class="language-Java">public class MyAdvice {    public void beforAdvice(){        System.out.println("前置增强的方法");    }    public void afterAdvice(String name,String rs){        System.out.println("后置增强的方法");    }    public void aroundAdvice(ProceedingJoinPoint joinPoint){        System.out.println("前置增强");        try {            joinPoint.proceed();        } catch (Throwable throwable) {            throwable.printStackTrace();        }        System.out.println("后置增强");    }    /**     * 异常增强     * @param exception     */    public  void exceptionAdvice(Exception exception){        System.out.println("异常增强!");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写目标类</p><pre class="line-numbers language-Java"><code class="language-Java">public interface ITargetClass {    /**     * 前置增强的方法     */    void  beforeMethod();    /**     * 后置增强的方法     */    String afterMethod(String name1);    /**     * 环绕增强的方法     */    void aroundMethod();    /**     * 异常增的方法     */    void runExceptionMethod();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现类</p><pre class="line-numbers language-Java"><code class="language-Java">public class TargetClassImpl  implements ITargetClass {    @Override    public void beforeMethod() {        System.out.println("待前置增强--------beforeMethod");    }    @Override    public String afterMethod(String name) {        System.out.println("待后置增强--------afterMethod");        return  "韩梅梅";    }    @Override    public void aroundMethod() {        System.out.println("待环绕增强--------aroundMethod");    }    @Override    public void runExceptionMethod() {        System.out.println("待异常增强--------runExceptionMethod");        int m = 0;        int n = 100/m;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置AspectJ的增强配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义增强的目标类对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>targetClass<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.impl.TargetClassImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义增强类的对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.advice.MyAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 进行AOP配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 前置切点 --></span>        <span class="token comment" spellcheck="true">&lt;!--              aop:before : aspectJ中 前置增强的配置               method : 当前增强类中前置增强的方法  方法名               pointcut-ref : 增强连接点           --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.beforeMethod(..)) <span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后置切点 --></span>        <span class="token comment" spellcheck="true">&lt;!-- args 配置被增强的方法的参数名称 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.afterMethod(..)) and args(name)<span class="token punctuation">"</span></span>   <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 环绕切点 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aroundPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.aroundMethod(..))<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 异常切点 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionPoint<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.impl.TargetClassImpl.runExceptionMethod(..))<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--  &lt;aop:before method="beforAdvice" pointcut-ref="beforPoint" />--></span>            <span class="token comment" spellcheck="true">&lt;!--                arg-names :后置增强中增强的方法的参数名称                    注意： name 也是被增强的方法的参数名称 参数名称要一致                returning ：返回结果的参数名称            --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterPoint<span class="token punctuation">"</span></span> <span class="token attr-name">arg-names</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name,rs<span class="token punctuation">"</span></span>   <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                        <span class="token comment" spellcheck="true">&lt;!--&lt;aop:around method="aroundAdvice" pointcut-ref="aroundPoint"  />--></span>             <span class="token comment" spellcheck="true">&lt;!--                 throwing : 接收异常参数的名称             --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exceptionPoint<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exception<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h4 id="xml版本事务"><a href="#xml版本事务" class="headerlink" title="xml版本事务"></a>xml版本事务</h4><ul><li><p>xml事务配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--关联数据库的配置信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--注入service--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.session.Configuration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定日志工具 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.logging.log4j.Log4jImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置缓存 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--懒加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入sqlSessionFactory工厂对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置属性 MyBatis 的主配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置类的别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置关联mapper的xml         要想省掉 它，必须要求，mapper的接口和xml文件编译之后在一个文件夹中--></span>     <span class="token comment" spellcheck="true">&lt;!--   &lt;property name="mapperLocations" value="classpath*:**/*Mapper.xml"/>--></span>        <span class="token comment" spellcheck="true">&lt;!--配置分页插件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                            helperDialect=mysql                            reasonable=true                            autoRuntimeDialect=true                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置Mapper接口的扫描器      这个扫描器 是专门 扫描 mapper 接口所在的包，给这些mapper接口 创建代理对象      里面的参数设置 包的设置必须是mapper的包     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- aop 机制 通过面向切面编程的思想，给程序添加事务处理--></span>     <span class="token comment" spellcheck="true">&lt;!--配置事务处理器 相当于 我们以前写的 增强类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置数据源--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--对什么方法 做什么增强--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--               name : 进行数据库操作方法的名称  add* 表示 add开头的方法  * 指代任意字符               propagation : 事务传播性  面试重点               read-only : 只读事务  默认 false               rollback-for : 指定回滚的异常  默认是 RunTimeException 下的异常会自动回滚               no-rollback-for : 不回滚的异常               timeout : 事务的超时时间               isolation : 事务隔离级别  面试重点                   | 1. 读未提交                   | 2. 读已提交                   | 3. 可重复读                   | 4. 串行化           --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token comment" spellcheck="true">&lt;!--isolation="DEFAULT" 隔离级别 默认隔离级别 不用写 propagation 传播行为 默认的--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--aop 的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--切入点--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.abc.service.impl.*Impl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--织入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>advice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注解版声明事务，配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--关联数据库的配置信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!--注入service--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${db.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.session.Configuration<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定日志工具 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.logging.log4j.Log4jImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置缓存 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--懒加载--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--注入sqlSessionFactory工厂对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置属性 MyBatis 的主配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configuration<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置数据源--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置类的别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置关联mapper的xml         要想省掉 它，必须要求，mapper的接口和xml文件编译之后在一个文件夹中--></span>     <span class="token comment" spellcheck="true">&lt;!--   &lt;property name="mapperLocations" value="classpath*:**/*Mapper.xml"/>--></span>        <span class="token comment" spellcheck="true">&lt;!--配置分页插件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                            helperDialect=mysql                            reasonable=true                            autoRuntimeDialect=true                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置Mapper接口的扫描器      这个扫描器 是专门 扫描 mapper 接口所在的包，给这些mapper接口 创建代理对象      里面的参数设置 包的设置必须是mapper的包     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.abc.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- aop 机制 通过面向切面编程的思想，给程序添加事务处理--></span>     <span class="token comment" spellcheck="true">&lt;!--配置事务处理器 相当于 我们以前写的 增强类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置数据源--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--事务注解驱动--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>service代码</p><pre class="line-numbers language-Java"><code class="language-Java">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT)public class AccountServiceImpl implements IAccountService {    @Autowired    private AccountMapper accountMapper;    @Transactional // 方法上添加事务 或者类上添加事务注解 都可以    // 添加在类上，表示类中的所有方法都有事务    // 添加在方法上，表示该方法有事务    public void transMoney(String sourceName, String targetName, BigDecimal money) {          // 开启事务        accountMapper.subMoney(sourceName,money);        int i = 1/0;        accountMapper.addMoney(targetName,money);        // 提交事务        // 回滚事务    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="事务的传播性"><a href="#事务的传播性" class="headerlink" title="事务的传播性"></a>事务的传播性</h4><table><thead><tr><th>传播级别</th><th>说明</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>必须的</td><td>默认值，表示当前若存在事务则使用当前事务，若不存在则创建一个新的事务</td></tr><tr><td>SUPPORTS</td><td>支持的</td><td>表示当前若存在事务则在当前事务中执行，若不存在则在非事务中执行</td></tr><tr><td>MANDATORY</td><td>强制性的</td><td>表示必须在事务中执行，若当前没有事务则抛出异常</td></tr><tr><td>NEVER</td><td>绝不</td><td>表示一定不在事务中的执行，若当前存在事务则报错</td></tr><tr><td>NESTED</td><td>嵌套的</td><td>若当前存在事务，则创建一个子事务，嵌套在当前事务中，注意，外层事务出现异常会回滚子事务，子事务出现异常，不影响外层事务</td></tr><tr><td>REQUIRES_NEW</td><td>必须新建</td><td>表示无论当前是否存在事务，都会创建一个新的事务，在新的事务中执行<br/>只支持JtaTransactionManager</td></tr><tr><td>NOT_SUPPORTED</td><td>不支持事务</td><td>表示不论当前是否存在事务，都不会在事务中执行。只支持JtaTransactionManager</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> spring学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/10/06/Mybatis/"/>
      <url>/2022/10/06/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1><center> Mybatis笔记</center></h1> <hr><h2 id="mybatis的概述"><a href="#mybatis的概述" class="headerlink" title="mybatis的概述"></a>mybatis的概述</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li><li>Mybtais是一个ORM框架，轻量级的ORM框架。相对于重量级的ORM框架Hibernate而言，mybatis是一个半自动框架，而Hibernate是一个全自动框架。并且，Hibernate提出跨”平台”，Hinernate的跨平台是指Hinernate可以在多种数据库下进行操作，同一套代码支持多种数据库，HQL语句，Hibernate方言，对数据库操作进行翻译，根据不同的数据，将API翻译成不同的SQL，对数据进行操作，依赖ORM思想。</li><li>Mybatis是一个半自动的框架，早期Hibernate在流行时，开发者发现Hibernate虽然功能强大，但是由于如果想使用全自动功能，将Hibernate和数据库关心进行配置，配置很繁琐，其二，Hibernate对功能进行全方面的封装，将用户的操作，转化为SQL语句，然后进行数据库操作，整个转换过程是Hibernate，开发无法控制，如果要进行SQL语句优化是没法实现的。所以，在数据库压力逐渐增大的情况下，Hibernate框架性能问题就出现了。基于这样的情况，Mybatis框架应运而生，mybatis将SQL语句的定义控制权，完全交给了开发者，并且暴露一套API，对JDBC中：事务，参数，查询结果等进行配置处理。Mybatis也是基于ORM思想.</li></ul><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><ul><li><p>ORM:Object relation mapping</p></li><li><p>对象关系映射</p></li><li><p>将数据库信息和Java中的实体类进行映射</p><p><img src="/images/mybatis/%E6%98%A0%E5%B0%84%E5%9B%BE.png" alt="映射图"></p></li></ul><hr><h2 id="mybatis入门"><a href="#mybatis入门" class="headerlink" title="mybatis入门"></a>mybatis入门</h2><h4 id="创建maven的Java项目"><a href="#创建maven的Java项目" class="headerlink" title="创建maven的Java项目"></a>创建maven的Java项目</h4><ul><li><p>如图：</p><p><img src="/images/mybatis/%E9%A1%B9%E7%9B%AE%E5%9B%BE1.png" alt="项目图1"></p><p><img src="/images/mybatis/%E9%A1%B9%E7%9B%AE%E5%9B%BE2.png" alt="项目图2"></p></li></ul><h4 id="引入mybatis相关的jar包依赖"><a href="#引入mybatis相关的jar包依赖" class="headerlink" title="引入mybatis相关的jar包依赖"></a>引入mybatis相关的jar包依赖</h4><p>- </p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--mybatis依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis关联spring依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--数据库驱动依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--连接池依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--分页插件依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建实体类user"><a href="#创建实体类user" class="headerlink" title="创建实体类user"></a>创建实体类user</h4><ul><li></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写映射文件usermapper接口"><a href="#编写映射文件usermapper接口" class="headerlink" title="编写映射文件usermapper接口"></a>编写映射文件usermapper接口</h4><ul><li></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span>  <span class="token function">queryById1</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    User <span class="token function">queryById2</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写映射文件usermapper-xml"><a href="#编写映射文件usermapper-xml" class="headerlink" title="编写映射文件usermapper.xml"></a>编写映射文件usermapper.xml</h4><ul><li></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mapper 是根标签 只有一对        namespace 是 这个标签的属性，必须要给        给的值为：mapper接口的全限定名  (必须)    --></span>    <span class="token comment" spellcheck="true">&lt;!--select  查询标签 ，( 同类标签 update , delete, insert )            resultType  返回值类型，（类的全限定名） , 告知给Mybatis             把sql语句的返回值封装成什么类型的对象             标签体中 存放的是 sql             #{变量}  占位符（图像对象导航语言） 相当于 ？            select * from USER where id = #{id} 等价于             select * from USER where id = ?             id 表示唯一性 范围 ：在当前xml文件中必须要唯一         --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from USER where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryById2<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from USER where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写mybatis-config-xml核心配置文件"><a href="#编写mybatis-config-xml核心配置文件" class="headerlink" title="编写mybatis-config.xml核心配置文件"></a>编写mybatis-config.xml核心配置文件</h4><ul><li></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 环境配置  default 属性  必须和其中一个子标签中的 id 属性 一致 表示       当前使用的是id 对应的环境        开发周期中 ，环境有 开发环境， 测试环境，生产环境        id 属性 表示唯一性，在当前xml文件中必须要唯一       --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--transactionManager  事务管理器 JDBC 是 MyBatis框架的默认事务管理器--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token comment" spellcheck="true">&lt;!--数据源(连接池) 目前使用的 是MyBatis默认的连接池 POOLed--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!--连接数据库的 四要素--></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql:///demo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 关联 mapper的 映射文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/bjpowernode/mapper/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h4><ul><li></li></ul><pre class="line-numbers language-Java"><code class="language-Java">public class MyBatisTest {    @Test    public void testFind() throws IOException {       //1. 加载 MyBatis 的 核心配置文件        InputStream inputStream = Resources.getResourceAsStream("mybatis-config.xml");                 //2.加载inputStream 流 ，获取SqlSessionFactory 工厂对象        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        // 3.获取 sqlSession对象        SqlSession sqlSession = sessionFactory.openSession();        // 4. 调用MyBatis接口层的API        /* 第一个参数   namespece 的值 +"." + sql的 id属性的值        *  第二个参数   sql语句中需要传入的参数*///        User user = sqlSession.selectOne("com.bjpowernode.mapper.UserMapper.queryById2", 1L);//        Map<Object, Object> map = sqlSession.selectOne("com.bjpowernode.mapper.UserMapper.queryById1",1L);         List<User> list =  sqlSession.selectList("com.bjpowernode.mapper.UserMapper.queryById2",1L);          list.forEach(System.out::println);        //map.forEach((x,y)->System.out.println(x+":" + y));//        System.out.println("user = " + user);        // 5. 提交事务 当操作是查询操作的时候，可以不需要事务        sqlSession.commit();        // 6. 释放资源        sqlSession.close();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果映射"><a href="#结果映射" class="headerlink" title="结果映射"></a>结果映射</h2><h4 id="和-语法的区别"><a href="#和-语法的区别" class="headerlink" title="#和$语法的区别"></a>#和$语法的区别</h4><ul><li><p>在mybatis中，会将开发者定义的sql进行解析，解析分为了2类sql：</p><ol><li><p>静态sql ，在解析时，直接将参数拼接到sql中，这种就是静态sql</p></li><li><p>动态sql，在解析时，会使用?这个占位符，替代参数</p></li></ol></li><li><p>这两种解析方式，mybatis是根据${}和#{}进行区分的</p><ol><li>${}的sql是静态sql</li><li>#{}的sql是动态sql</li></ol></li><li><p>不论是静态sql，还是动态sql都能获取传递参数，但是${}是使用的字符拼接，#{}使用PreparedStatement进行参数的预处理。</p></li><li><p>在一定程度上说，${}能实现的功能，#{}都能实现，并且由于#{}PreparedStatement进行SQL的预处理，一定程度上可以防止SQL注入攻击。所以在开发中，能使用#{}尽量使用#{}。PreparedStatement预处理的本质是将参数进行转换为字符串，当做参数字符串处理。所以，如果参数信息是一个特殊的关键字，例如： 数据库名，表名，函数名，内置关键字，使用预处理，则关键字转为了字符串，无效了，此时必须使用字符串拼接。</p></li></ul><h4 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h4><ul><li>在开发中，需要书写大量的SQL语句，并且这些SQL数据很大部分内容是重复内容，基于这样的情况，mybatis提供模板，可以在模板中定义需要使用sql语句的部分内容，然后在需要使用到这个部分内容的地方直接引入。</li><li>使用sql标签，定义SQL片段，使用include引入，sql片段</li></ul><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li><strong>like concat(‘%’,关键字,’%’)</strong> </li><li>like ‘%关键字%’</li><li>mybatis推荐的bind标签</li><li><strong>注意：建议只使用第一种方式</strong></li></ul><h4 id="多参数问题"><a href="#多参数问题" class="headerlink" title="多参数问题"></a>多参数问题</h4><ul><li><p>当mybatis传递参数存在多个时，mybatis支持三种方案:</p><ol><li><p>argx 形式：arg 表示参数，x表示参数索引</p></li><li><p>paramX形式： param表示参数，x表示第几个参数</p></li><li><p>使用注解为参数取别名 @Param</p></li></ol></li></ul><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li><p>MySql 中 是通过limit 关键字 进行分页 的Limit ? , ? </p></li><li><p>第一个参数：表示 开始索引 （从0开始）</p></li><li><p>第二个参数：表示每页显示的条数</p><ul><li>开始索引的值 &#x3D; (当前页-1)*每页显示的条数</li></ul></li><li><p>在mybatis中，分页查询解决方案最本质上回归原生SQL进行处理。</p></li><li><p>查询总页数，使用limit函数进行查询相应的数据</p></li><li><p>mybatis中，提供了一个RowBounds这个类，用于进行分页查询数据</p></li><li><p>使用分页插件:PageHelper(推荐）</p></li></ul><h4 id="新增自增长"><a href="#新增自增长" class="headerlink" title="新增自增长"></a>新增自增长</h4><ul><li><p>在mybatis中，支持数据库的自增长功能，因为在某些特殊的业务场景中，当前数据的ID，可能是另外某些数据的业务ID。</p></li><li><p>例如：</p><ol><li>订单：总订单和子订单，每个子订单会有总订单ID，先插入总订单，并且要获取总订单ID</li></ol></li><li><p>插入子订单</p><p>Mybatis在insert指令中，提供了2个属性：useGeneratedKeys、keyProperty、keyColumn</p><p>useGeneratedKeys：表示使用数据库自增长</p><p>keyProperty：自增长的列对应的类中的属性</p><p>keyColumn：自增长的列</p><p>Mybatis会自动将增长的值，封装到传入参数的属性中。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.domain.User<span class="token punctuation">"</span></span>  <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert  into user (name,pwd) value (#{name},#{pwd})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Java"><code class="language-Java">public static void main(String[] args) throws Exception {    SqlSession session = SqlSessionUtil.getSession();    //获取UserMapper接口的具体代理对象    UserMapper mapper = session.getMapper(UserMapper.class);    User user = new User();    user.setName("Lucy");    user.setPwd("123456");    System.out.println("新增后user对象：" + user.getId());    session.commit();    session.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h4><ul><li><p>动态SQL是指根据不同的参数，产生不同的SQL语句。这样的SQL就是动态SQL。</p><p>Mybatis提供了一下标签，用于动态SQL的生成:</p><ol><li><p>if</p></li><li><p>foreach</p></li><li><p>choose</p></li><li><p>where</p></li><li><p>set</p></li></ol></li><li><p>if标签</p><ul><li>在if标签中，test属性是必须有，test属性值是一个表达式，如果表达式值为true,则if标签包裹的内容会拼接在当前sql上。</li><li>and 并且</li><li>or 或者 </li><li>&#x3D;&#x3D; 等于</li><li>!&#x3D; 不等于</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByCondition<span class="token punctuation">"</span></span>  <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>columnId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    from user    where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keyword!<span class="token punctuation">=</span>null and keyword!<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          and   name like concat('%',#{keyword},'%')    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>foreach</p><ul><li><p>Select * from user where id in (1,2,3,4)</p><p>循环标签，循环标签多用于批量操作。</p><p>例如：批量新增，批量删除,批量查询等等</p><ol><li><p>collection 待循环的容器</p></li><li><p>item 指代 每次循环容器中的元素</p></li><li><p>open 开始循环是拼接字符串</p></li><li><p>close 循环结束拼接字符串</p></li><li><p>separator 每次循环之间拼接的字符串</p></li><li><p>index 循环索引</p></li></ol></li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- (   #{id},#{id},#{id},#{id}   )--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByIds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Select * from user where id in       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           #{id}       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    &lt;insert id="batchInsertUser">--></span><span class="token comment" spellcheck="true">&lt;!--        insert into user (name ,age,sex,birthday,address) values (#{name} ,#{age},#{sex},#{birthday},#{address}),(#{name} ,#{age},#{sex},#{birthday},#{address})--></span><span class="token comment" spellcheck="true">&lt;!--    &lt;/insert>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>batchInsertUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user (name ,age,sex,birthday,address) values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            (#{user.userName} ,#{user.age},#{user.sex},#{user.birthday},#{user.address})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteByIds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from user where id in        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             #{id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectByIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">batchInsertUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span>Long<span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.获取sqlSession对象</span>    SqlSession sqlSession <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 获取UserMapper的代理对象</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Long<span class="token punctuation">[</span><span class="token punctuation">]</span>  ids <span class="token operator">=</span> <span class="token punctuation">{</span>1L<span class="token punctuation">,</span>2L<span class="token punctuation">,</span>3L<span class="token punctuation">}</span><span class="token punctuation">;</span>    userMapper<span class="token punctuation">.</span><span class="token function">deleteByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBatchInsertUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.获取sqlSession对象</span>    SqlSession sqlSession <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 获取UserMapper的代理对象</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"武侯区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"结衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"双流区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user1<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>     userMapper<span class="token punctuation">.</span><span class="token function">batchInsertUser</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.获取sqlSession对象</span>    SqlSession sqlSession <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 获取UserMapper的代理对象</span>    UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Long<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span><span class="token punctuation">;</span>    ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>3L<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>choose标签</p><ul><li><p>多条件分支标签:choose.</p><p>在choose标签，自上而下执行when中表达式，如果表达式为true,则将相应的字符串拼接在sql后面，且终止判断。如果所有的表达式都为false,则将otherwise中字符串，拼接在sql后面</p></li></ul></li><li><p>where标签</p><ul><li><p>在mybatis中，存在sql条件，当有多个sql条件时，需要处理and关键字问题，因为where后面的第一个条件不需要and，解决方案：</p><ul><li><p>在where后面 拼接 1&#x3D;1 类似的条件，这样其他条件都不是第一个条件，都需要拼接and </p></li><li><p>mybatis 提供了where标签，取代where关键字，默认去掉第一个条件 and</p></li></ul></li><li><p>注意：</p><ul><li>建议，只在查询语句中使用where标签，因为当where标签中的条件都不成立时，会没有where关键字。</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectList2<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    select  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BASE_COLUMN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null and name !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             and name like concat('%',#{name},'%')        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex !<span class="token punctuation">=</span> null and sex !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             and sex = #{sex}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  反面例子  如果name 值是空字符串  会怎么样??  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteByName<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    delete from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null and name !<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name = #{name}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>set标签</p><ul><li>set标签是取代sql语句中的set关键字。set表示后面数据的更新。各个字段，需要使用逗号分隔。</li><li>set标签可以去掉最后一个逗号。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- where 标签 可以帮我们去掉 多余的and 连接符 set 标签 可以 帮我们去掉 多余的逗号 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByCondition<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name=#{userName},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            sex=#{sex},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            age=#{age},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            birthday=#{birthday},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            address=#{address},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h2><h4 id="关联查询方法"><a href="#关联查询方法" class="headerlink" title="关联查询方法"></a>关联查询方法</h4><ul><li>当属性中有需要赋值对象的属性时，该属性使用association关键字</li></ul><pre class="line-numbers language-xml"><code class="language-xml">// 需求：查询员工列表，以及对应的部门信息 (方案一： 关联查询)@Testpublic void testEmployeeList(){    SqlSession sqlSession = MyBatisUtil.openSession();    EmployeeMapper employeeMapper = sqlSession.getMapper(EmployeeMapper.class);    List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Employee</span><span class="token punctuation">></span></span> list = employeeMapper.list();    for (Employee employee : list) {        System.out.println("employee = " + employee);    }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--association  用来封装 对象属性 （单个对象）         property  属性  （对应的是类中对象属性的名称）            子标签  （id ，result）        javaType  （property属性的值）变量的类型， MyBatis 的底层 需要根据        javaType的值，通过反射创建对象，赋值给dept 变量         --></span><span class="token comment" spellcheck="true">&lt;!--       &lt;association property="dept" javaType="com.bjpowernode.domain.Department">--></span><span class="token comment" spellcheck="true">&lt;!--           &amp;lt;!&amp;ndash;id 标签 用在主键上面&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--           &lt;id column="d_id" property="id"/>--></span><span class="token comment" spellcheck="true">&lt;!--           &amp;lt;!&amp;ndash;result 标签 用在非主键上面&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--           &lt;result column="d_name" property="name"/>--></span><span class="token comment" spellcheck="true">&lt;!--       &lt;/association>--></span>        <span class="token comment" spellcheck="true">&lt;!--          columnPrefix  是对column 列的 前缀 进行抽取        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courses<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.edu.domain.Course<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courseName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>course_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          select emp.id,emp.username,emp.email,emp.age,emp.admin,d.id d_id,d.name d_name from employee empleft join department d  on emp.dept_id = d.id      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="额外sql方法"><a href="#额外sql方法" class="headerlink" title="额外sql方法"></a>额外sql方法</h4><ul><li><p>当属性中有需要赋值的是集合的属性时，使用<strong>collection</strong> 关键字</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.domain.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token comment" spellcheck="true">&lt;!--      collection 表示集合标签， 用来封装集合属性的（如果类中有集合（对象）属性,那么就选择是Collection）      property  属性  表示 类中的集合属性的名称      columnPrefix 属性 表示 列的前缀抽取      ofType  属性 表示集合中的对象的类型 （可以省略，当是发送额外sql 的时候可以省略）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lessonList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>courseLesson<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>                        <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.bjpowernode.edu.mapper.CourseLessonMapper.selectCourseLessonById<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id, username, email from employee  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架基本介绍</title>
      <link href="/2022/09/13/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E6%95%B4%E5%90%88/"/>
      <url>/2022/09/13/%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="框架部分的整体介绍"><a href="#框架部分的整体介绍" class="headerlink" title="框架部分的整体介绍"></a>框架部分的整体介绍</h1><pre><code>maven     --      只需要配置与操作mybatis   --      ORM框架spring    --      为整个java项目服务，降低项目的耦合性springmvc --      MVC框架：帮我们服务器简化接收前端请求的数据，以及简化服务器为前端响应数据在实际开发，目前中国市场基本都是使用SSM+mavengit       --  一个版本控制工具SSM的项目：3天</code></pre><h1 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h1><p>没有maven的时候，我们写项目会有很多问题：</p><p>1.jar包的问题</p><pre><code>导包的方式不方便：需要我们将jar包 复制粘贴到项目中的lib目录中每一个项目都单独的需要一份jar包： jar包会浪费很多空间</code></pre><p>2.项目管理的问题</p><pre><code>写一个项目的最终目的是需要将项目发布到服务器。一个项目需要发布到服务器，需要做的准备工作：1.编译  将所有的.java文件编译成.class文件2.测试  每一个功能都应该有相应的单元测试3.打包  将编译好的.class文件以及其他的比如前端页面/配置文件，进行打包4.发布  将打好的包 发布到服务器</code></pre><p>如何解决上面所说的两个问题：使用maven</p><h2 id="maven的介绍"><a href="#maven的介绍" class="headerlink" title="maven的介绍"></a>maven的介绍</h2><pre><code>Apache Maven是一个（特别是Java编程）项目管理及自动构建工具,使用java语言编写(所以依赖java_home)基于项目对象模型（缩写：POM）概念包含了一个POM 以及 项目生命周期 以及 项目生命周期中的插件</code></pre><p>根据上面的介绍，我们可以简单的认为maven是一个依赖管理与项目生命周期管理的框架</p><p>也就是说maven主要两个功能：</p><p>1.依赖管理</p><blockquote><p>依赖：比如jar包、自己写的项目之间互相依赖</p><p>管理：有Maven统一的管理所有的jar包</p></blockquote><p>2.生命周期管理</p><blockquote><p>由maven管理指定项目的整个生命周期</p><p>生命周期：编译、测试、打包、发布…..</p></blockquote><h2 id="maven的依赖管理"><a href="#maven的依赖管理" class="headerlink" title="maven的依赖管理"></a>maven的依赖管理</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p><img src="/images/ssm/image-20211215091018079.png" alt="image-20211215091018079"></p><p><img src="/images/ssm/image-20211215091949682.png" alt="image-20211215091949682"></p><p>小结：如果使用了maven则我们的项目依赖的所有jar包都不需要我们手动的下载、复制、粘贴了，让依赖管理变得非常的简单了</p><h3 id="定位jar包"><a href="#定位jar包" class="headerlink" title="定位jar包"></a>定位jar包</h3><p>我们使用maven的时候，我们的 项目需要向本地仓库请求jar包</p><p>那么如果指定某一个具体的jar包呢</p><p>答案：使用groupId+artifactId+version 就一定可以定位到某个具体的jar包</p><p>比如使用fastjson jar包 的指定方式：</p><p>在某个文件中就编写：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastJson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写的方式：我们简称为jar包的坐标</p><p>编写的文件是maven项目必须维护的一个文件:pom.xml</p><h3 id="如何知道Jar包的坐标"><a href="#如何知道Jar包的坐标" class="headerlink" title="如何知道Jar包的坐标"></a>如何知道Jar包的坐标</h3><p>不可能知道，所以需要到指定的网站进行查询</p><p>网站的网址:<a href="https://mvnrepository.com/">Attention Required! | Cloudflare (mvnrepository.com)</a></p><p>如果登录这个网站出现：表示访问失败</p><p><img src="/images/ssm/image-20211215095528937.png" alt="image-20211215095528937"></p><p>出现这个问题有两个可能的原因：</p><p>1.网速太慢</p><pre><code>解决方案：加钱</code></pre><p>2.DNS服务器没有配置</p><pre><code>解决方案：配置DNS服务器</code></pre><p>配置的方式：</p><p><img src="/images/ssm/image-20211215095801113.png" alt="image-20211215095801113"></p><p><img src="/images/ssm/image-20211215095827507.png" alt="image-20211215095827507"></p><p><img src="/images/ssm/image-20211215095920255.png" alt="image-20211215095920255"></p><p><img src="/images/ssm/image-20211215100004515.png" alt="image-20211215100004515"></p><p><img src="/images/ssm/image-20211215100046732.png" alt="image-20211215100046732"></p><p><img src="/images/ssm/image-20211215100258845.png" alt="image-20211215100258845"></p><p><img src="/images/ssm/image-20211215100339894.png" alt="image-20211215100339894"></p><p><img src="/images/ssm/image-20211215100613547.png" alt="image-20211215100613547"></p><p><img src="/images/ssm/image-20211215100728966.png" alt="image-20211215100728966"></p><h2 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h2><pre><code>maven是免安装的，所以只需要将maven下载下来，然后解压就行了现在建议使用3.5版本及以上</code></pre><p>注意：解压的路径的父目录尽量不要有中文与空格</p><h3 id="maven的目录结构"><a href="#maven的目录结构" class="headerlink" title="maven的目录结构"></a>maven的目录结构</h3><p><img src="/images/ssm/image-20211215102155293.png" alt="image-20211215102155293"></p><p>bin:表示执行mvn的相关命令</p><p>boot:启动相关</p><p><span style="color:red">conf</span>:存放了maven的配置文件</p><p>​其中有一个文件叫做：settings.xml,在这个文件中可以配置：1.本地仓库的路径   2.镜像的路径</p><p>lib:maven依赖的Jar包</p><p>我们建议安装好maven后都将本地仓库与镜像进行配置：</p><p>1.配置本地仓库：因为默认的本地仓库’C:&#x2F;Users&#x2F;当前用户&#x2F;.m2&#x2F;repository’ 这个目录的路径太深了，操作的时候不够方便，建议自定义本地仓库</p><p>2.配置镜像路径：要求所有人必须配置，因为如果不配置，则maven默认去远程仓库下载jar包，速度太慢</p><h3 id="配置maven的本地仓库与镜像"><a href="#配置maven的本地仓库与镜像" class="headerlink" title="配置maven的本地仓库与镜像"></a>配置maven的本地仓库与镜像</h3><p><img src="/images/ssm/image-20211215102944777.png" alt="image-20211215102944777"></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>E:\mvn_repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/ssm/image-20211215103123459.png" alt="image-20211215103123459"></p><pre class="line-numbers language-xml"><code class="language-xml">      <span class="token comment" spellcheck="true">&lt;!-- 配置阿里云镜像 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置maven的环境变量"><a href="#配置maven的环境变量" class="headerlink" title="配置maven的环境变量"></a>配置maven的环境变量</h3><p><img src="/images/ssm/image-20211215104022129.png" alt="image-20211215104022129"></p><p><img src="/images/ssm/image-20211215104110853.png" alt="image-20211215104110853"></p><p><img src="/images/ssm/image-20211215104216940.png" alt="image-20211215104216940"></p><p>注意：maven是使用java语言编写的，所以maven会默认通过JAVA_HOME去找到java的位置</p><p>那么如果JAVA_HOME没有配置，或者配置错了，则maven也启动不了</p><h2 id="IDEA配置maven"><a href="#IDEA配置maven" class="headerlink" title="IDEA配置maven"></a>IDEA配置maven</h2><p><img src="/images/ssm/image-20211215111107631.png" alt="image-20211215111107631"></p><p><img src="/images/ssm/image-20211215111422119.png" alt="image-20211215111422119"></p><h2 id="IDEA创建maven项目"><a href="#IDEA创建maven项目" class="headerlink" title="IDEA创建maven项目"></a>IDEA创建maven项目</h2><h3 id="创建普通的javaSE项目"><a href="#创建普通的javaSE项目" class="headerlink" title="创建普通的javaSE项目"></a>创建普通的javaSE项目</h3><p><img src="/images/ssm/image-20220616113032525.png" alt="image-20220616113032525"></p><p><img src="/images/ssm/image-20211215112145849.png" alt="image-20211215112145849"></p><p>创建好的maven项目可能项目：</p><p>就是很多插件爆红，可能的原因：</p><p>1.就是网络问题   不能正常下载</p><p>2.下载了一部分但是没有下载完成  后果：maven去本地仓库找这个插件能找到，所以maven就不下载了，但是这个插件不能用    </p><p>   方案：自己找到自己的本地仓库  将下载的那一部分删除  </p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="/images/ssm/image-20211215115630198.png" alt="image-20211215115630198"></p><p>java:存放源代码</p><p>resources:存放配置文件</p><p>test-java:存放单元测试的源代码的</p><p>pom.xml:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会声明本身的坐标：groupId+artifactId+version</p><p>此文件中还可以声明依赖(jar包)</p><p>比如引入fastjson的依赖：</p><h4 id="依赖测试"><a href="#依赖测试" class="headerlink" title="依赖测试"></a>依赖测试</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    所有的依赖都通过dependency标签就行引用    所有的dependency标签都应该属于dependencies标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  如果引用的依赖的坐标是红色  表示本地仓库没有这个依赖      则需要刷新maven  让maven去中央仓库下载这个jar包      下载成功后 就变成黑色了      --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.75<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/junit/junit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMavenJar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 创建了对象</span>          DataResult dataResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dataResult<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"注册成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dataResult<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 把对象转成json格式的字符串</span>          String s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>dataResult<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 把json格式的字符串，转成 对象</span>          DataResult dataResult1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> DataResult<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataResult1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataResult</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建web项目"><a href="#创建web项目" class="headerlink" title="创建web项目"></a>创建web项目</h3><p><img src="/images/ssm/image-20211215140842984.png" alt="image-20211215140842984"></p><p><img src="/images/ssm/image-20211215141003864.png" alt="image-20211215141003864"></p><p><img src="/images/ssm/image-20211215141151795.png" alt="image-20211215141151795"></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p><img src="/images/ssm/image-20211215144748009.png" alt="image-20211215144748009"></p><p>main&#x2F;java:  源码</p><p>main&#x2F;resources: 存放开发环境的配置文件</p><p>webapp:存放前端相关的资源</p><p>test&#x2F;java:存放测试的源码</p><p>test&#x2F;resources:存放测试的配置文件</p><h4 id="hello-maven小案例"><a href="#hello-maven小案例" class="headerlink" title="hello maven小案例"></a>hello maven小案例</h4><p>1.创建前端页面</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-1.11.1-min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#spanId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#spanId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把data 给 text方法，表示data一般是string</span>                      <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--</span>        <span class="token attr-name">需求：通过异步请求，发送给后台servlet</span> <span class="token attr-name">获取随意的字符串，并把该字符串显示到</span> <span class="token attr-name">span</span> <span class="token attr-name">标签上</span>     <span class="token attr-name">--%</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spanId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.导包</p><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.75<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.编写servlet</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span>  <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//         resp.setContentType("text/html;charset=utf-8");</span><span class="token comment" spellcheck="true">//         PrintWriter writer = resp.getWriter();</span><span class="token comment" spellcheck="true">//         writer.println("hello maven");</span><span class="token comment" spellcheck="true">//         writer.flush();</span><span class="token comment" spellcheck="true">//         writer.close();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============发送的数据格式必须和 设置的格式一致========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String str <span class="token operator">=</span> <span class="token string">"hello maven"</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖的细节问题"><a href="#依赖的细节问题" class="headerlink" title="依赖的细节问题"></a>依赖的细节问题</h2><p>使用dependency标签指定依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code> &lt;groupId&gt;&lt;artifactId&gt;&lt;version&gt;这三个标签是用它来指定jar包的坐标</code></pre><h3 id="scope标签"><a href="#scope标签" class="headerlink" title="scope标签"></a>scope标签</h3><p>这个标签用来控制jar包的作用域</p><p>可选的作用域：</p><pre><code>compile    是默认的作用域    作用域：在主程序  测试程序   编译文件    这是最常用的作用域test    作用域：测试程序     使用场景：所有的测试工具  比如：junit    provided    作用域：  主程序  测试程序     使用场景：如果某个jar包服务器自带了  则就不用部署到服务器也就不用在编译文件中生效        比如：servlet</code></pre><h3 id="依赖的传递性"><a href="#依赖的传递性" class="headerlink" title="依赖的传递性"></a>依赖的传递性</h3><p>我们应用了一个jar包a, 而jar包a本身应用了jar包b</p><p>则我们可以直接使用jar包b</p><p>因为依赖具有传递性</p><p>测试：</p><p>1.在mavena项目中引用mysql的驱动包</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.将mavena项目打成jar包存放到自己的本地仓库中(使用使用install命令)</p><p><img src="/images/ssm/image-20211215154832766.png" alt="image-20211215154832766"></p><p>3.使用mavenb项目引用mavena项目</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mavena<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.测试</p><p>在mavenb中进行测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//因为能成功的获取Connection对象，所以证明mavenb能够成功使用mysql的驱动包  而mysql驱动包是由mavena项目引用的  所以证明了jar包具有传递性</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/cms2104"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖的剔除-了解"><a href="#依赖的剔除-了解" class="headerlink" title="依赖的剔除(了解)"></a>依赖的剔除(了解)</h3><p>在上面案例中mavenb引用了mavena </p><p>mavena引用mysql驱动包</p><p>现在：如果mavenb也引用一个mysql驱动包并且版本与mavena的不一致</p><p>mavenb的依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mavena<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看mavenb的实际的依赖：</p><p><img src="/images/ssm/image-20211215162227916.png" alt="image-20211215162227916"></p><p>这样的情况有可能引发jar包的冲突问题</p><p>解决方案：mavenb在引用mavena时可以指定剔除mavena中的某一个jar包</p><p>开始剔除：</p><p>在mavenb项目中修改pom.xml文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>example<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mavena<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.0</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            指定排除掉引用的mavena项目中的指定jar包<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查是否排除成功:</p><p><img src="/images/ssm/image-20211215162642912.png" alt="image-20211215162642912"></p><h2 id="maven管理项目的生命周期"><a href="#maven管理项目的生命周期" class="headerlink" title="maven管理项目的生命周期"></a>maven管理项目的生命周期</h2><p>项目的生命周期：</p><p>表示项目从创建出来开始 一直到 项目发布到服务器 的整个过程</p><p><img src="/images/ssm/image-20211215162944057.png" alt="image-20211215162944057"></p><p>clean: 将打好的包删除</p><p>compile:编译  将所有的.java文件编译成.class文件</p><p>test: 测试  将所有的单元测试统一执行，如果某一个单元测试抛出异常则测试失败</p><p>package:打包  将所有需要发布到服务器的文件打成jar&#x2F;war 包</p><p>install:安装    将包安装到本地仓库中</p><p>deploy:发布   将项目发布到服务器中</p><p><img src="/images/ssm/image-20211215163702186.png" alt="image-20211215163702186"></p><h2 id="聚合项目"><a href="#聚合项目" class="headerlink" title="聚合项目"></a>聚合项目</h2><blockquote><p>一个项目由多个子项目组成</p><p>什么时候会使用聚合项目：如果一个项目特别的大，大到每一个模块都需要一台都需要单独作为一个项目管理</p><p>主要是引用在分布式的场景下：</p><p>比如有一个项目：动力商城</p><p>每一个模块：controller   service   dao 的逻辑与代码量都很大</p><p>建议将每一个模块作为一个单独的项目独立管理</p><p>然后将这些项目聚合在一起形成一个总的商城项目</p><p>后面会学(今天只做了解)</p></blockquote><p>今天主要是在Maven依赖的角度来学习聚合项目</p><p>案例：动力商城项目</p><blockquote><p>不写任何代码  做为这个项目每一个子项目添加依赖</p></blockquote><h3 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h3><blockquote><p>父工程中不需要任何的java代码 ，只需要将其他的项目聚合起来就行了</p><p>所以父工程可以将src目录删除</p></blockquote><h3 id="创建controller子工程"><a href="#创建controller子工程" class="headerlink" title="创建controller子工程"></a>创建controller子工程</h3><blockquote><p>创建webapp项目</p></blockquote><h3 id="创建service子工程"><a href="#创建service子工程" class="headerlink" title="创建service子工程"></a>创建service子工程</h3><blockquote><p>创建一个普通的Java项目</p></blockquote><h3 id="创建dao子工程"><a href="#创建dao子工程" class="headerlink" title="创建dao子工程"></a>创建dao子工程</h3><blockquote><p>创建一个普通的Java项目</p></blockquote><h3 id="父子工程的标识"><a href="#父子工程的标识" class="headerlink" title="父子工程的标识"></a>父子工程的标识</h3><p>1.在父工程中的pom.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>powershop-controller<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>powershop-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>powershop-dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在每一个子工程中的pom.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powershop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.powernode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="父子工程的jar包的特点"><a href="#父子工程的jar包的特点" class="headerlink" title="父子工程的jar包的特点"></a>父子工程的jar包的特点</h3><h4 id="父工程的jar包-子工程可以直接继承"><a href="#父工程的jar包-子工程可以直接继承" class="headerlink" title="父工程的jar包 子工程可以直接继承"></a>父工程的jar包 子工程可以直接继承</h4><pre><code>所以建议所有的jar包的引用，都放在父工程中 所有的子工程都可以直接继承</code></pre><p>例如：在父工程中引用Mysql的驱动包</p><p>效果：每一个子工程也都有了这个jar包</p><p><img src="/images/ssm/image-20211215172437687.png" alt="image-20211215172437687"></p><p><img src="/images/ssm/image-20211215172501634.png" alt="image-20211215172501634"></p><h4 id="对于不是公用的Jar包的处理"><a href="#对于不是公用的Jar包的处理" class="headerlink" title="对于不是公用的Jar包的处理"></a>对于不是公用的Jar包的处理</h4><p>处理方式：</p><p>1.这个jar包不放在父工程中，在需要使用的子工程中单独引用</p><p>弊端：如果某几个子工程都要使用同样的jar包  则需要重复的引用，并且不能统一的管理这几个子工程引用的Jar包的版本</p><p>2.还是让父工程管理所有的jar包，但是对某些不是全部子工程公用的jar包使用</p><p><img src="/images/ssm/image-20211215173146378.png" alt="image-20211215173146378"></p><p><img src="/images/ssm/image-20211215173205748.png" alt="image-20211215173205748"></p><h3 id="子工程之间的互相引用"><a href="#子工程之间的互相引用" class="headerlink" title="子工程之间的互相引用"></a>子工程之间的互相引用</h3><p>将每一个子工程都打包</p><p>在controoler子工程中使用dependency引用service工程</p><p>在controoler子工程中使用dependency引用dao工程</p><p><img src="/images/ssm/image-20211215173657100.png" alt="image-20211215173657100"></p><p><img src="/images/ssm/image-20211215173726388.png" alt="image-20211215173726388"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>所谓的聚合项目：</p><p>1.父工程统一的管理所有的Jar包</p><p>2.子工程直接互相引用</p><p>直接看源码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架部分笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX和servlet</title>
      <link href="/2022/09/12/AJAX%E5%92%8Cservlet/"/>
      <url>/2022/09/12/AJAX%E5%92%8Cservlet/</url>
      
        <content type="html"><![CDATA[<h1><center>AJAX和servlet</center></h1><hr><h2 id="AJAX的引入"><a href="#AJAX的引入" class="headerlink" title="AJAX的引入"></a>AJAX的引入</h2><ul><li><p>同步交互</p><ul><li><p>首先用户向HTTP服务器提交一个处理请求。接着服务器端接收到请求后，按照预先编写好的程序中的业务逻辑进行处理，比如和数据库服务器进行数据信息交换。最后，服务器对请求进行响应，将结果返回给客户端，返回一个HTML在浏览器中显示，通常会有CSS样式丰富页面的显示效果</p><p><img src="/images/AJAX/%E5%90%8C%E6%AD%A5%E4%BA%A4%E4%BA%92.png" alt="同步交互"></p></li></ul></li><li><p>异步交互</p><ul><li><p>指发送一个请求,不需要等待返回,随时可以再发送下一个请求，即不需要等待。在部分情况下，我们的项目开发中都会优先选择不需要等待的异步交互方式。将用户请求放入消息队列，并反馈给用户，系统迁移程序已经启动，你可以关闭浏览器了。然后程序再慢慢地去写入数据库去。这就是异步。异步不用等所有操作等做完，就响应用户请求。即先响应用户请求，然后慢慢去写数据库，用户体验较好</p><p><img src="/images/AJAX/%E5%BC%82%E6%AD%A5%E4%BA%A4%E4%BA%92.png" alt="异步交互"></p></li></ul></li></ul><h4 id="原生AJAX"><a href="#原生AJAX" class="headerlink" title="原生AJAX"></a>原生AJAX</h4><ul><li><p>进行异步数据交互,进行少量的数据交互.减少服务器和浏览器的压力.就需要跟服务器进行通信.JS作为一个脚本语言,是无法调用硬件(网卡).在早期时,浏览器的厂商就对JS暴露一套API.这套API就可以让JS与服务器进行通信.</p></li><li><p>核心方法</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>new  XMLHttpRequest()</td><td>创建新的 XMLHttpRequest 对象</td></tr><tr><td>abort()</td><td>取消当前请求</td></tr><tr><td>getAllResponseHeaders()</td><td>返回头部信息</td></tr><tr><td>getResponseHeader()</td><td>返回特定的头部信息</td></tr><tr><td>open(<em>method</em>, <em>url</em>, <em>async</em>, <em>user</em>, <em>psw</em>)</td><td>规定请求  ·      method：请求类型 GET 或  POST  ·      url：文件位置  ·      async：true（异步）或  false（同步）  ·      user：可选的用户名称  ·      psw：可选的密码</td></tr><tr><td>send()</td><td>将请求发送到服务器，用于 GET 请求</td></tr><tr><td>send(<em>string</em>)</td><td>将请求发送到服务器，用于 POST 请求</td></tr><tr><td>setRequestHeader()</td><td>向要发送的报头添加标签&#x2F;值对</td></tr></tbody></table></li><li><p>核心属性</p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>onreadystatechange</td><td>定义当 readyState 属性发生变化时被调用的<strong>函数(事件属性)</strong></td></tr><tr><td>readyState</td><td>保存 XMLHttpRequest 的状态。  ·      0：请求未初始化  ·      1：服务器连接已建立  ·      2：请求已收到  ·      3：正在处理请求  ·      4：请求已完成且响应已就绪</td></tr><tr><td>responseText</td><td>以字符串返回响应数据</td></tr><tr><td>responseXML</td><td>以 XML 数据返回响应数据</td></tr><tr><td>status</td><td>返回请求的状态号  ·      200: “OK”  ·      403: “Forbidden”  ·      404: “Not Found”  如需完整列表请访问 <a href="https://www.w3school.com.cn/tags/ref_httpmessages.asp">Http 消息参考手册</a></td></tr><tr><td>statusText</td><td>返回状态文本（比如 “OK” 或 “Not Found”）</td></tr></tbody></table></li></ul><h4 id="AJAX之验证用户是否被占用"><a href="#AJAX之验证用户是否被占用" class="headerlink" title="AJAX之验证用户是否被占用"></a>AJAX之验证用户是否被占用</h4><ul><li><p>JS表单验证只能校验格式是否正确,但是无法验证用户名是否已经存在,这个就需要后台程序接受到数据后通过查询才能够完成的,那么这里就非常适用于使用异步方式校验,保证用于数据提交后,业务完成的成功率.提升用户体验感</p><p><img src="/images/AJAX/%E6%B5%8B%E8%AF%95.png" alt="测试"></p></li><li><p>前端代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkUsername()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*  判断用户是否存在 */</span>    <span class="token comment" spellcheck="true">/**     *  1. 用户输入用户名     *  2. 获取用户的用户名  当input 不再被输入时  失去焦点  onblur     *  3. 发送给服务器  进行检查     *      1. 创建通信对象     *      2. 建立连接     *      3. 发送数据     *      4. 监听状态     *      5. 发送请求     *      6. 获取响应数据     */</span>    <span class="token comment" spellcheck="true">// 1. 创建通信对象</span>    <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span>  <span class="token function">checkUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取用户的用户名</span>      <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//2.建立连接</span>      request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"/server?username="</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>      request<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> stateChange<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//发送请求</span>      request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义一个函数     */</span>    <span class="token keyword">function</span> <span class="token function">stateChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我执行了"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//200 请求成功  4  表示请求完成</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">var</span>  msg <span class="token operator">=</span> request<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将不正常的消息 显示在页面</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> msg<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后端代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet("/server")public class ServerServlet extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println("我执行了!");        // 获取用户名        String username = req.getParameter("username");        // 在ajax请求时  必须使用 响应对象 返回数据        resp.setCharacterEncoding("UTF-8");        resp.setContentType("text/html;charset=utf-8");        PrintWriter writer = resp.getWriter();        String msg = "ok";        if (username.equals("admin")){            msg = "用户名已经存在";        }        writer.print(msg);        writer.flush();        writer.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="AJAX的本质"><a href="#AJAX的本质" class="headerlink" title="AJAX的本质"></a>AJAX的本质</h4><ul><li><p>ajax的本质是进行数据的交互.基于浏览器进行通信的请求,请求后返回的数据给程序自身,浏览器是不会解析和渲染这个数据的.需要程序自身处理数据.</p></li><li><p>原生Ajax技术存在以下问题:</p><ol><li><p>浏览器的兼容性问题.特别是IE浏览器.</p></li><li><p>整个API相对操作繁琐.主要以下步骤:</p><ol><li>创建请求对象</li><li>建立连接</li><li>监听状态</li><li>发送请求</li><li>处理请求的响应</li></ol></li></ol></li></ul><h4 id="AJAX数据格式处理"><a href="#AJAX数据格式处理" class="headerlink" title="AJAX数据格式处理"></a>AJAX数据格式处理</h4><ul><li><p>ajax只支持文本数据,不支持字节这样的数据的.如果响应的数据是简单的字符串,可以简单的处理,但是如果是复杂的数据.例如:将学生列表数据返回.所以在ajax中,一般返回数据不使用普通的文本,早期时使用XML格式.但是<strong>XML</strong>耗内存,XML为了保证可读性,保留特殊字符.例如:空格 换行.在传输时是会占用流量.基于这样的情况,后期使用新的字符串格式:JSON : Javascript Object Notation.JS对象简谱.是指使用JS对象的格式组织字符串.</p><ul><li><p>JS对象中只有两种格式: { }  和 [ ]</p><ul><li>使用{ } 代表对象</li><li>使用[ ] 代表数组</li><li>一般使用<strong>JSON</strong>格式返回<strong>ajax</strong>请求的数据格式.</li></ul></li></ul></li></ul><h2 id="AJAX结合jquery实现"><a href="#AJAX结合jquery实现" class="headerlink" title="AJAX结合jquery实现"></a>AJAX结合jquery实现</h2><h4 id="jQuery的ajax"><a href="#jQuery的ajax" class="headerlink" title="jQuery的ajax"></a>jQuery的ajax</h4><ul><li><p>每次书写AJAX代码比较繁琐 步骤都是一样的,数据回显使用原生js代码也比较繁琐,可以使用jQuery对上述问题进行优化,jQuery不仅仅对dom操作进行了封装 同时也对AJAX提交和回显已经进行了封装,可大大简化AJAX的操作步骤</p></li><li><p>jQuery的ajax使用</p><ul><li>在jquery中,jquery主要提供了三个方法进行ajax的请求:<ol><li><strong>$.ajax(url,option) :</strong> ajax方式是jquery 对原生的ajax进行了一个封装,简化了ajax开发,同时也是其他ajax请求方法的基本的方法</li><li><strong>$.get(url,data,callbackfunction)</strong> : 这个方法基于ajax方法的,但是只支持get请求</li><li><strong>$.post(url,data,callbackfunction)</strong> : 这个方法也是基于ajax方法的,但是支持post请求.</li></ol></li></ul></li><li><p>jQuery.ajax()属性详解</p><ul><li><p>URL：</p><ul><li>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</li></ul></li><li><p>type：</p><ul><li>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</li></ul></li><li><p>timeout:</p><ul><li>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</li></ul></li><li><p>async:</p><ul><li>是否异步</li><li>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</li></ul></li><li><p>data:</p><ul><li><p>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key&#x2F;value格式，</p><pre class="line-numbers language-javascript"><code class="language-javascript">例如<span class="token punctuation">{</span>foo1<span class="token punctuation">:</span><span class="token string">"bar1"</span><span class="token punctuation">,</span>foo2<span class="token punctuation">:</span><span class="token string">"bar2"</span><span class="token punctuation">}</span>转换为<span class="token operator">&amp;</span>foo1<span class="token operator">=</span>bar1<span class="token operator">&amp;</span>foo2<span class="token operator">=</span>bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如<span class="token punctuation">{</span>foo<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"bar1"</span><span class="token punctuation">,</span><span class="token string">"bar2"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>转换为<span class="token operator">&amp;</span>foo<span class="token operator">=</span>bar1<span class="token operator">&amp;</span>foo<span class="token operator">=</span>bar2。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>dataType:</p><ul><li><p>期望服务器返回的数据的格式,实际格式以服务器返回的数据格式为准.不同浏览器对该属性处理方式是不一样的.如:chrom会按照该类进行校验.如果不一致,没反应.Firefox浏览器,则会抛出转化失败的异常.</p></li><li><p>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。</p></li><li><p>可用的类型如下：</p><ul><li><p>xml：返回XML文档，可用JQuery处理。</p></li><li><p>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。</p></li><li><p>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。</p></li><li><p>json：返回JSON数据。</p></li><li><p>jsonp：JSONP格式。使用JSONP形式调用函数时，例如myurl?callback&#x3D;?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。</p></li><li><p>text：返回纯文本字符串。</p></li></ul></li></ul></li><li><p>beforeSend：</p><ul><li><p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。</p><pre class="line-numbers language-javascript"><code class="language-javascript">XMLHttpRequest对象是惟一的参数。<span class="token keyword">function</span><span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用本次ajax请求时传递的options参数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>complete：</p><ul><li><p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">,</span> textStatus<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用本次ajax请求时传递的options参数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>success:</p><ul><li><p>要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。</p></li><li><p>由服务器返回，并根据dataType参数进行处理后的数据。</p></li><li><p>描述状态的字符串。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> textStatus<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//data可能是xmlDoc、jsonObj、html、text等等</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用本次ajax请求时传递的options参数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>error:</p><ul><li><p>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">,</span> textStatus<span class="token punctuation">,</span> errorThrown<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//通常情况下textStatus和errorThrown只有其中一个包含信息</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用本次ajax请求时传递的options参数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>contentType:</p><ul><li>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application&#x2F;x-www-form-urlencoded”。该默认值适合大多数应用场合。</li></ul></li></ul></li></ul><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><p>前端代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>加载中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ajaxBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ajax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#ajaxBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//请求的方法</span>            data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//请求参数</span>            <span class="token comment" spellcheck="true">//contentType:"application/x-www-form-urlencoded",//表单的 url 编码的方式提交数据  key=value&amp;key2=value</span>            <span class="token comment" spellcheck="true">//contentType:"application/json",//使用JSON格式提交数据</span>            <span class="token comment" spellcheck="true">//timeout:  //请求超时时间  浏览器 默认是不会主动的停止请求 请求没有完成 一般会等待.</span>            <span class="token comment" spellcheck="true">//timeout:3000,//3秒 请求最多3秒  如果超过3秒就主动断开</span>            <span class="token keyword">async</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否异步的参数  默认是 true 一般如果 请求的数据会参与后面的运算 ,使用同步</span>            <span class="token comment" spellcheck="true">//同步  当整个ajax 都执行完 才能执行之后的代码</span>            beforeSend<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//发送请求前调用的函数</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeSend"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//展示</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            dataType<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//期望服务器返回的数据</span>            complete<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//请求完成调用  不论成功或者失败 都会调用</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxxcomplete"</span><span class="token punctuation">)</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#loading"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只有当请求完成 且数据正常时才会调用</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"success============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// rs 返回的数据</span>                m <span class="token operator">=</span> m  <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>msg<span class="token punctuation">,</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//当服务器发生异常时触发或者网络请求失败出现问题时触发</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求对象</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误信息</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异常对象</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>“<span class="token operator">/</span>server”<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"m:"</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;@WebServlet("/server")public class ServerServlet extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println("我执行了!");        //int m = 0;        //System.out.println(10/m);        try {            Thread.sleep(3000);        } catch (InterruptedException e) {            e.printStackTrace();        }        // 获取用户名        String username = req.getParameter("username");        // 在ajax请求时  必须使用 响应对象 返回数据        resp.setCharacterEncoding("UTF-8");        PrintWriter writer = resp.getWriter();        String msg = "ok";        if (username.equals("admin")){            msg = "username is exist";        }        msg = "{\"msg\":\"username is exist\"}"; //JSON格式的字符串        writer.print(msg);        writer.flush();        writer.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jQuery实现AJAX的其他写法"><a href="#jQuery实现AJAX的其他写法" class="headerlink" title="jQuery实现AJAX的其他写法"></a>jQuery实现AJAX的其他写法</h4><ul><li><p>$load()</p><ul><li><p>jQuery load() 方法是简单但强大的 AJAX 方法，load() <strong>方法从服务器加载数据，并把返回的数据放入被选元素中</strong>。默认使用 GET 方式 - 传递附加参数时自动转换为 POST 方式,</p></li><li><p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span>data<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数含义：</p><pre class="line-numbers language-Java"><code class="language-Java">url: URL地址data:待发送参数。callback:载入成功时回调函数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>测试：</p></li><li><p>前端代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-1.11.1-min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendAjax()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我发送ajax请求<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">sendAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* load(url,[data],[callback])        * url 是跳转的地址，必填        * data: 跳转到指定地址，并且携带参数,参数格式采用json格式        * callback ： 回调函数（发送请求结束后，等待响应的结果,在回调函数中，可以获取到响应结果）        *  这个参数是 函数形参数 成功时回调函数        * */</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"/server"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后端代码</p><pre class="line-numbers language-Java"><code class="language-Java"> @WebServlet("/server")public class ServerServlet extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println("我执行了!");        //int m = 0;        //System.out.println(10/m);        try {            Thread.sleep(3000);        } catch (InterruptedException e) {            e.printStackTrace();        }        // 获取用户名        String username = req.getParameter("username");        // 在ajax请求时  必须使用 响应对象 返回数据        resp.setCharacterEncoding("UTF-8");        PrintWriter writer = resp.getWriter();        String msg = "ok";        if (username.equals("admin")){            msg = "username is exist";        }        msg = "{\"msg\":\"username is exist\"}"; //JSON格式的字符串        writer.print(msg);        writer.flush();        writer.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>$.get()</p><ul><li><p>这是一个简单的 GET 请求功能以取代复杂 .$.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。只支持异步的请求.都是使用$.ajax的默认属性值.$.get就是type为get</p></li><li><p>语法为:</p><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数含义：</p><pre class="line-numbers language-javascript"><code class="language-javascript">url<span class="token punctuation">:</span> URL地址data<span class="token punctuation">:</span>待发送参数。callback<span class="token punctuation">:</span>载入成功时回调函数。type<span class="token punctuation">:</span>返回内容格式，xml<span class="token punctuation">,</span> html<span class="token punctuation">,</span> script<span class="token punctuation">,</span> json<span class="token punctuation">,</span> text<span class="token punctuation">,</span> _default等价于$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>  success<span class="token punctuation">:</span> success<span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> dataType<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>get<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#getBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 使用get方法 进行ajax请求         */</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">}</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/server"</span><span class="token punctuation">,</span>param<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//function 请求成功时调用的函数  rs 就是返回的数据</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>$.post()</p><ul><li><p>这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。</p></li><li><p>语法为:</p><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数含义：</p><pre class="line-numbers language-javascript"><code class="language-javascript">url<span class="token punctuation">:</span> URL地址data<span class="token punctuation">:</span>待发送参数。callback<span class="token punctuation">:</span>载入成功时回调函数。type<span class="token punctuation">:</span>返回内容格式，xml<span class="token punctuation">,</span> html<span class="token punctuation">,</span> script<span class="token punctuation">,</span> json<span class="token punctuation">,</span> text<span class="token punctuation">,</span> _default等价于$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>  success<span class="token punctuation">:</span> success<span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> dataType<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--</span> <span class="token attr-name">引入jquery</span> <span class="token attr-name">--%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resources/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#postBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 使用post方法 进行ajax请求         */</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">}</span>        $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span>param<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//function 请求成功时调用的函数  rs 就是返回的数据</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>$.getJSON()</p><ul><li><p>JSON是一种较为理想的数据传输格式，它能够很好的融合与JavaScript或其他宿主语言，并且可以被JS直接使用。使用JSON相比传统的通过 GET、POST直接发送“裸体”数据，在结构上更为合理，也更为安全。至于jQuery的getJSON()函数，只是设置了JSON参数的 ajax()函数的一个简化版本。就是将预期的返回的数据类型设置为:JSON.</p></li><li><p>语法为:</p><pre class="line-numbers language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span>      url<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">//请求URL</span>      <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//传参，可选参数</span>      <span class="token punctuation">[</span>callback<span class="token punctuation">]</span>       <span class="token comment" spellcheck="true">//回调函数，可选参数</span>   　<span class="token punctuation">)</span><span class="token punctuation">;</span>等价于$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>  data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>  success<span class="token punctuation">:</span> callback<span class="token punctuation">,</span>  dataType<span class="token punctuation">:</span> json<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>仅仅是等效于上述函数,但是除此之外这个函数也是可以跨域使用的，相比get()、post()有一定优势。另外这个函数可以通过把请求url写 成”myurl?callback&#x3D;X”这种格式，让程序执行回调函数X。</p></li><li><p>前端代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jsonBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>getJson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--</span> <span class="token attr-name">引入jquery</span> <span class="token attr-name">--%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#jsonBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 使用post方法 进行ajax请求         */</span>        <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">123</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">}</span>        $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/server"</span><span class="token punctuation">,</span>param<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rs<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//function 请求成功时调用的函数  rs 就是返回的数据</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><ul><li>由于ajax进行网络通信,js基于浏览器进行网络通信.浏览器出于安全的考虑,浏览器存在一个同源策略。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</li></ul><hr><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><h4 id="servlet的作用"><a href="#servlet的作用" class="headerlink" title="servlet的作用"></a>servlet的作用</h4><ul><li><p><strong>获取客户的请求信息</strong></p><ul><li><p>Servlet获取客户端的请求信息，基于ServletRequest对象，ServletRequest的子接口: HttpServletRequest。</p><p>HttpServletRequest这个接口包含：客户端的请求参数，客户端的请求头信息。</p></li></ul></li><li><p><strong>向客户端做出响应</strong></p><ul><li><p>Servlet向客户端做出响应，基于ServletResponse对象，ServletResponse的子接口：HttpServletResponse。</p><p>HttpServletResponse这个接口：获取输出流(字节流，字符流)，向客户端返回响应头信息。</p></li></ul></li></ul><h4 id="servlet的使用方法"><a href="#servlet的使用方法" class="headerlink" title="servlet的使用方法"></a>servlet的使用方法</h4><ul><li><p>创建servlet的三个步骤</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>导入servlet-api.jar</td><td>在tomcat的lib文件夹下也有此jar包，开发过程中为防止报错需要导入，实际运行时需要移除此jar包避免版本冲突。</td></tr><tr><td>自定义类继承HttpServlet</td><td>继承后，重写service方法。</td></tr><tr><td>配置虚拟路径</td><td>1)可以通过注解配置  2)通过xml形式配置</td></tr></tbody></table></li><li><p>使用注解形式</p><ul><li><p>JavaWeb开发中，Servlet开发配置相对繁琐。在web3.0之后，提供一些简化web配置的数据，@WebServlet就可以取代在web.xml中对servlet的配置</p><pre class="line-numbers language-Java"><code class="language-Java">@WebServlet("/hello")public class HelloServlet  extends HttpServlet {   /** *  该类中的service方法 被调用了，说明什么？ * *  这个类 它叫servlet  运行在tomcat服务器内部的小程序 *  证明小程序 运行了 * *  service 方法被调用，service 方法 是普通方法，应当由对象调用 *  因此，Servlet 对象被创建了。 * *  who  创建了Servlet 对象 ? * *  Tomcat 服务器 创建的 * *  什么时候创建的？ 创建了几个？ * * 只有当第一次通过浏览器访问该Servlet的时候，Servlet对象被创建 * * 一个 单例模式 * *  它怎么创建的 ？ * *   通过反射创建的 ,由于通过反射创建对象由两种方式： *   方式一： 通过字节码对象调用newInstance方法   (Class.forName(类的全限定名).newInstance() 前提是类中必须由无参构造) *   方式二：通过构造器对象调用newInstance方法   （Class.forName(类的全限定名).getConstructor(参数.class类型).newInstance(参数值)） * *   Servlet 是通过方式一 创建的对象 * *   理由： 第一，在web.xml中告知了servlet的全限定名,所以通过反射 能搞出字节码对象 *         第二：Servlet 类中，必须提供一个公共的无参构造器，说明采用的方式是第一种 * * * Servlet 的请求流程： * * 1. 当Tomcat服务器启动的时候，去加载web.xml文件 * 2. 读取web.xml ，就等同于读取了 servlet 的配置 * 3. 把配置信息获取到之后，存入了map 中，以 servlet 的 映射路径为key ， 以 servlet 的全限定名为value * 4. 当用通过浏览器发出对servlet 的请求时，就立刻去map中匹配映射路径的内容如果，匹配成功，则意味着，获取到了servlet 的全限定名 * 5. 通过反射创建servlet 的实例。调用init方法，接着调用service * */    public HelloServlet(){        System.out.println("servlet  create  ");    }    // 当请求方式是get 的时候，进入doGet方法处理    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println(“come in”)； }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用xml形式</p><ul><li><p>向服务器注册这个Servlet，servlet是要提供服务的</p><ol><li>声明&#x2F;定义servlet类</li><li>servlet提供服务访问方式</li></ol><pre class="line-numbers language-Java"><code class="language-Java">     public HelloServlet(){        System.out.println("servlet  create  ");    }    // 当请求方式是get 的时候，进入doGet方法处理    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        // 生成动态的web 内容 给浏览器客户端        resp.setContentType("text/html;charset=utf8");        PrintWriter writer = resp.getWriter();        writer.println("<html> <head> <title>这是后台生成的动态web 内容</title></head> <body> "+new Date() +"</body> </html>"); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>xml配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.bjpowernode.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用注解形式</p><ul><li><p>平时开发中能用注解形式则用注解形式。但如果类是第3方的，由于我们不能去修改第3方的源代码，无法在类上添加注解，则使用xml形式最为合适。例如：后期SpringMVC框架中的核心类DispatcherServlet就是使用的xml形式作为配置</p><pre class="line-numbers language-Java"><code class="language-Java">@WebServlet("/anno")public class HelloServlet  extends HttpServlet {     public HelloServlet(){        System.out.println("servlet  create  ");    }    // 当请求方式是get 的时候，进入doGet方法处理    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        // 生成动态的web 内容 给浏览器客户端        // 告知浏览器 ，响应的数据是什么格式 ，用什么编码打开        // 告知浏览器，发送给浏览器的内容的格式以及使用指定的编码进行解析        // 这句代码必须要在resp 对象使用之前设置        resp.setContentType("text/html;charset=utf8");        PrintWriter writer = resp.getWriter();        writer.println("<html> <head> <title>这是后台生成的动态web 内容</title></head> <body> "+new Date() +"</body> </html>");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h4><ul><li><p>Servlet的生命周期，是指Servlet的实例的创建到到销毁的过程。</p><pre class="line-numbers language-Java"><code class="language-Java">// loadOnStartup 它的配置 是为了改变 servlet单例对象的创建时机 （tomcat服务器启动的时候 ，创建servlet对象）@WebServlet(value = "/life",loadOnStartup = 1)public class LifeCyleServlet extends HttpServlet {     // 我们需要弄清楚 这些生命周期方法何时被调用， 才能确定我们可以利用这些方法，做什么事情    /**     *  该servlet 是单例模式     *  只有当第一次通过浏览器访问的时候，才被创建出来     *  对象被创建出来以后，紧接着会调用init方法，并且init方法只会调用一次     *     *  然后调用service方法，而service方法的执行时机是每次发送请求给该servlet     *  即，service方法， 是用来处理浏览器的每次请求     *     *     *  当服务器正常关闭的时候 ，会调用 destroy方法，非正常关闭服务，则不执行该destroy方法     *     *     *  结论：     *     *    init方法只执行一次，我们可以用来初始化一些数据     *     *    根据destory 的特点， 不建议把收尾的工作交给该方法处理     *     *     */    public LifeCyleServlet(){        System.out.println("create  方法");    }    @Override    public void init(ServletConfig config) throws ServletException {        System.out.println("init 方法");        // 假如 在init 方法中做了一个耗时的操作 耗时 5分钟    }    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println("service 方法");    }    @Override    public void destroy() {        System.out.println("destroy 方法");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结论：</p><ol><li>init 方法是初始化servlet的方法，默认第一次访问时初始化，且只会执行一次</li><li>service 方法是每次访问都会调用,会执行多次</li><li>destory 方法，是当服务器正常关闭时调用。执行一次,销毁servlet对象时执行.</li><li>init –&gt; service –&gt; destory</li></ol></li><li><p>注意：</p><ol><li><p>Servlet是单例的模式.一个Servlet只有一个当前类对象.</p></li><li><p>默认init只会在第一次访问时，进行调用。如果希望服务器启动时，就希望调用init方法。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servle01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.powernode.servlet.LifeCyleServlet <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 只要大于0 都会在加载完成后调用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果配置了：<strong>1</strong>则当应用服务器启动时就会调用init方法。</p></li><li><p>也可以在注解中使用：@WebServlet(urlPatterns &#x3D; “&#x2F;servlet”,loadOnStartup &#x3D; 1)</p></li></ol></li></ul><h4 id="servlet的初始化参数"><a href="#servlet的初始化参数" class="headerlink" title="servlet的初始化参数"></a>servlet的初始化参数</h4><ul><li><p>在使用Servlet时，可以配置Servlet的一些初始化参数。为程序提供一些默认的配置。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servle01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.powernode.servlet.ServletLife<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- servlet 默认的配置参数  是 map结构 --></span>     <span class="token comment" spellcheck="true">&lt;!--配置初始化参数： 什么是初始化参数？ 当对象被创建之后，就可以获取到这些参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 以上就是在配置servlet的配置参数 --></span>                <span class="token comment" spellcheck="true">&lt;!-- 只要大于0 都会在加载完成后调用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servle01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/servlet01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>取值</p><pre class="line-numbers language-Java"><code class="language-Java">public class InitParamServlet extends HttpServlet {     public InitParamServlet(){        System.out.println("create  方法");    }     // ServletConfig 这个类的对象 谁创建的 ？ 什么时候创建的？     //   tomcat 服务器创建的   在调用init 方法之前创建的     private  ServletConfig config ;    /**     *     * @param config     * @throws ServletException     */    @Override    public void init(ServletConfig config) throws ServletException {        System.out.println("init 方法");        // 假如 在init 方法中做了一个耗时的操作 耗时 5分钟        String encoding = config.getInitParameter("encoding");        System.out.println("encoding = " + encoding);         this.config = config;    }    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println("service 方法");       // servlet 对象 this        String encoding = this.getInitParameter("encoding");        System.out.println("encoding = " + encoding);    }    @Override    public void destroy() {        System.out.println("destroy 方法");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="servlet的线程安全问题"><a href="#servlet的线程安全问题" class="headerlink" title="servlet的线程安全问题"></a>servlet的线程安全问题</h4><ul><li>Servlet的init方法只会执行一次，Servlet是<strong>单例的</strong>。非线程安全的,当出现并发访问,共享数据无法保证一致性.在使用Servlet不要定义共享成员变量.</li><li>根据上图，Servlet实例是单例，多线程，servlet是<strong>非线程安全</strong>的。</li></ul><h2 id="servlet相关API"><a href="#servlet相关API" class="headerlink" title="servlet相关API"></a>servlet相关API</h2><h4 id="请求信息相关API"><a href="#请求信息相关API" class="headerlink" title="请求信息相关API"></a>请求信息相关API</h4><ul><li><p>在Servlet中,应用服务器将所有的请求信息封装为了HttpServletRequest对象,可以根据HttpServletRequest对象获取请求相关信息.</p><p><img src="/images/servlet/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%9B%BE.png" alt="请求响应"></p></li><li><p><strong>请求参数</strong></p></li><li><p>前端</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/request<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        账号： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>java       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c#       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>android <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后台</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/request")public class RequestServlet extends HttpServlet {         @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         // 为何 表单中输入中文，接收的时候，是乱码呢？ 因为 tomcat 服务器 是 外国人写的，人家默认使用的编码 为 iso8859-1         // 一定要在方法的第一行 增加编码设置 ， 这个编码设置 只针对 post 请求 有效 , get 请求中的乱码 已经被 tomcat服务器高版本（8.0）进行处理         req.setCharacterEncoding("utf-8");        System.out.println("--------掌握-----------------------");        // 获取请求行中的信息        // 请求方式        String method = req.getMethod();        // 请求路径        String uri = req.getRequestURI();        StringBuffer url = req.getRequestURL();        // 协议        String protocol = req.getProtocol();        System.out.println("method = " + method);        System.out.println("uri = " + uri); // 资源的映射路径        System.out.println("url = " + url); // 完整路径        System.out.println("protocol = " + protocol);        // 获取请求头的信息        String accept = req.getHeader("Accept");        System.out.println("accept = " + accept);        // 获取请求体中的信息        String username = req.getParameter("username");        System.out.println("username = " + username);        String password = req.getParameter("password");        System.out.println("password = " + password);        // getParamter 方法 只能获取 单个值 的情况        String hobby = req.getParameter("hobby");        System.out.println("hobby = " + hobby);        // 获取param多个值        Map<String, String[]> parameterMap = req.getParameterMap();        parameterMap.forEach((x,y)-> System.out.println(x + Arrays.toString(y)));        System.out.println("---------------不重要----------------------------");        //  获取一个key 对应有多个值的情况        String[] hobbies = req.getParameterValues("hobby");        System.out.println(Arrays.toString(hobbies));   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>设置编码</strong></p><ul><li><p>在Servlet中，Servlet会在第一次获取请求参数时，将网络传输的流数据，解析为map集合。并且默认post请求是按照IOS-8859-1的编码格式进行解析的，以后再次获取请求参数时，直接从map容器中获取请求参数，根据map中key获取,key就是参数名称.</p></li><li><p>注意</p><ul><li>如果要设置字符编码，必须在getParameter之前设置，否则由于只会解析一次，map容器就会存放使用IS0-8859-1转换的编码字符串,即Map中可能就是存放乱码数据。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">//1.修改request对象编码 request.setCharacterEncoding("UTF-8");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>获取请求行信息</strong></p><ul><li><p>获取请求的网络相关信息</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.*;@WebServlet("/api")public class ServletApi extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {                netInfo(req,resp);    }    /**     *  网络信息相关的API     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */    private void netInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //获取 网络请求的请求方法        String method = req.getMethod();//GET  POST  DELETE PUT 等等        System.out.println("请求方法是:"+method);        //获取请求协议        String protocol = req.getProtocol();        System.out.println("请求协议是:"+protocol);        //获取请求的URL        StringBuffer url = req.getRequestURL();// 获取请求的URL        System.out.println("请求的URL:"+url);         //获取请求的资源路径        String uri = req.getRequestURI();        System.out.println("获取请求的URI:"+uri);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>请求头信息</strong></p><ul><li><p>HttpServletRequest可以获取请求头信息。获取方式主要分为两类：</p><ol><li>根据API提供固有的方法，获取相应的值。</li><li>根据API指定请求头key,获取对应的值。</li></ol><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.*;/** * @Description: Servlet API的介绍 */@WebServlet("/api")public class ServletApi extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {                headerInfo(req,resp);    }    /**     * 请求头信息     * @param req     * @param resp     * @throws ServletException     * @throws IOException     */    private void headerInfo(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //内置的方法        String contentType = req.getContentType();        System.out.println("contentType : "+ contentType);        int contentLength = req.getContentLength();        System.out.println("contentLength  "+ contentLength);        // 根据指定的头的key  获取对应的值        //text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9        String accept = req.getHeader("Accept");        System.out.println("accept :"+accept);        //获取所有的请求头name值        Enumeration<String> headerNames = req.getHeaderNames();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h4 id="响应信息相关的API"><a href="#响应信息相关的API" class="headerlink" title="响应信息相关的API"></a>响应信息相关的API</h4><ul><li><p><strong>设置相应数据编码</strong></p><ul><li><p>设置响应编码，浏览器根据设置的响应编码进行数据解析编码，保证数据避免乱码</p><pre class="line-numbers language-Java"><code class="language-Java">@Overrideprotected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    //此时指定的是按照 UTF-8编码 指定将字符转化为字节的编码格式    resp.setCharacterEncoding("UTF-8");    //数据时  html的字符串 按照 UTF-8的编码    resp.setContentType("text/html;charset=UTF-8");    // tomcat 默认编码 ISO-8859-1    //文件是 : UTF-8编码    PrintWriter writer = resp.getWriter();    writer.print("你好 客户端!!!");    writer.flush();    writer.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>获取响应流的信息</strong></p><ul><li><p>在Servlet响应流信息主要分为2类：</p><pre class="line-numbers language-Java"><code class="language-Java">resp.getOutputStream();// 获取字节网络输出流resp.getWriter();// 获取字符网络输出流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字节流 : 多用于文件的下载，处理一些非字符串数据</p></li><li><p>字符流 : 多用于处理文本，主要与ajax结合使用</p></li></ul></li><li><p><strong>验证码案例</strong></p><ul><li><p>使用Hutool的API生成验证码</p></li><li><p>先导入Hutool的jar包</p></li><li><p><a href="https://www.hutool.cn/docs/#/">https://www.hutool.cn/docs/#/</a></p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc;import cn.hutool.captcha.CaptchaUtil;import cn.hutool.captcha.LineCaptcha;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/img")public class Img extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //createLineCaptcha(宽度,高度,字符个数,干扰元素个数)        LineCaptcha lineCaptcha = CaptchaUtil.createLineCaptcha(300, 100, 4, 6);        //验证码图片中字符串 验证码字符串        String code = lineCaptcha.getCode();//放在session        System.out.println(code);        // 把验证码存入到session        req.getSession().setAttribute("sessionCode",code);        //使用响应流 将验证码图片数据输出        lineCaptcha.write(resp.getOutputStream());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>前端页面代码</strong></p><ul><li><p>使用ajax验证</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>formId<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/code<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yzm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/img<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod(this)<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>butId<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#butId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/code"</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#formId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>bol<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#tip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>hint<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">clickMethod</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token punctuation">{</span>        img<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"/img?time="</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>后台验证代码</strong></p><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc;import com.alibaba.fastjson.JSON;import com.powernode.util.JSONUtil;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/code")public class Code extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        req.setCharacterEncoding("utf-8");        resp.setContentType("application/json;charset=utf-8");        String username = req.getParameter("username");        String pwd = req.getParameter("pwd");        String yzm = req.getParameter("yzm");        JSONUtil jsonUtil = new JSONUtil();        if (yzm == null || yzm == ""){            String s = JSON.toJSONString(jsonUtil.mick("验证码不能为空"));            resp.getWriter().write(s);            resp.getWriter().flush();            return;        }        Object sessionCode = req.getSession().getAttribute("sessionCode");        if (!yzm.equals(sessionCode)) {            String s = JSON.toJSONString(jsonUtil.mick("验证码错误"));            resp.getWriter().write(s);            resp.getWriter().flush();            return;        }        if (username == null || username == ""){            String s = JSON.toJSONString(jsonUtil.mick("账号不能为空"));            resp.getWriter().write(s);            resp.getWriter().flush();            return;        }        if (pwd == null || pwd == ""){            String s = JSON.toJSONString(jsonUtil.mick("密码不能为空"));            resp.getWriter().write(s);            resp.getWriter().flush();            return;        }        if (!username.equals("abc") && !pwd.equals("123")){            String s = JSON.toJSONString(jsonUtil.mick("账号或密码错误"));            resp.getWriter().write(s);            resp.getWriter().flush();            return;        }else {            String s = JSON.toJSONString(jsonUtil);            resp.getWriter().write(s);            resp.getWriter().flush();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义一个响应的数据类</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.util;public class JSONUtil {    private boolean bol = true;    private String hint ;    public JSONUtil mick(String str){        this.hint = str;        this.bol = false;        return this;    }    public boolean isBol() {        return bol;    }    public String getHint() {        return hint;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>效果图</p><p><img src="/images/servlet/%E9%AA%8C%E8%AF%81%E7%A0%81.png" alt="验证码"></p></li></ul></li><li><p><strong>文件的上传和下载</strong></p><ul><li><p>文件上传</p></li><li><p>如果实现文件上传功能 从0到1 去实现，其实是很复杂的， 本质是流的拷贝。难点在读取上传的文件的二进制流，市面上 提供了一个FileUpload 工具类， 来辅助我们完成文件的上传，下载， 今天我们使用更简单的方式，这种方式 只使用与 当前学习的servlet ， 文件上传功能 ，已经被 servlet 3.0以上的版本 支持了</p></li><li><p>前端页面</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileImg<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后台代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.upload;import jdk.nashorn.internal.ir.CallNode;import javax.servlet.ServletException;import javax.servlet.annotation.MultipartConfig;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.Part;import java.io.IOException;import java.util.UUID;@MultipartConfig@WebServlet("/upload")public class FileUpload extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        resp.setContentType("text/html;charset=utf-8");        //使用getPart()方法接收文件        Part fileImg = req.getPart("fileImg");        //获取文件的名字        String fileName = fileImg.getSubmittedFileName();//        System.out.println(fileName);        //获取文件的大小        long size = fileImg.getSize();//        System.out.println(size);        //获取文件的格式        String contentType = fileImg.getContentType();//        System.out.println(contentType);        //文件上传路径        String partPath = "D:\\course11\\04-javaweb\\03-ajax&servlet\\uploadproject\\web\\upload";        //获取文件的后缀名        String substring = fileName.substring(fileName.lastIndexOf("."));        //随机生成一个文件名        String newImgName = UUID.randomUUID().toString();        //生成新的文件名        String name = newImgName + "." + substring;        //上传文件        fileImg.write(partPath + "/" + name);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>文件下载</p><ul><li><p>前端页面</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>点击下载资源：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/download?filename<span class="token punctuation">=</span>1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后台代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.powernode.servlet;import com.sun.javaws.HtmlOptions;import javax.servlet.ServletException;import javax.servlet.ServletOutputStream;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.net.URLEncoder;@WebServlet("/download")public class Download extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //获取下载文件的名称        String filename = req.getParameter("filename");        //获取下载文件的文件夹的路径        String path = "D:\\course11\\04-javaweb\\03-ajax&servlet\\downloadpeoject\\web\\download";        //获取下载文件的路径        String filePath = path + "/" + filename;        // URLEncoder.encode(fileName,"utf-8") 把编码记性设置 ， 必须要在 设置头信息的 同时 去修改编码        //  通过header 修改了 下载的文件的名称  如果不设置 header 它会使用默认名称 来作为下载文件的名称 （download）        resp.setHeader("Content-Disposition","attachment;filename="+ URLEncoder.encode(filename,"utf-8") );        //下载的本质是copy，利用流来进行下载        //创建文件输入流        FileInputStream fileInputStream = new FileInputStream(new File(filePath));        //使用浏览器的默认下载路径        ServletOutputStream outputStream = resp.getOutputStream();        int len = 0;        byte[] bytes = new byte[1024];        while ((len = fileInputStream.read(bytes)) != -1){            outputStream.write(bytes,0,len);            outputStream.flush();        }        outputStream.close();        fileInputStream.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="请求转发和重定向"><a href="#请求转发和重定向" class="headerlink" title="请求转发和重定向"></a>请求转发和重定向</h2><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><ul><li><p>浏览器发出一个请求，由一个AServlet 进行接收处理，最后没有处理完毕，然后它（AServlet） 转交交给 （BServlet） 进行处理,把 AServlet 转交给 BServlet 这个动作叫请求转发</p></li><li><p>API:  </p><pre class="line-numbers language-Java"><code class="language-Java">request.getRequestDispatcher("跳转的路径").forward(request,response);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>请求转发的特点</strong></p><ol><li>只发送一次请求</li><li>响应到浏览器的结果是一最后的servlet 为准</li><li>可以共享地址栏中的参数信息</li><li>可以访问 WEB-INF 下面的资源</li><li>不可以访问 站外资源 (不能跨域)</li><li>可以共享request 域对象的数据</li></ol></li></ul><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><ul><li><p>浏览器发送请求到 a servlet ，然后 a servlet 完成一部分需求，告知浏览器，b  servlet 能完成剩余的需求，因此，浏览器 会 再一次发送请求 到 b servlet 最终 完成了 整个请求</p></li><li><p>API： </p><pre class="line-numbers language-Java"><code class="language-Java">response.sendRedirect("跳转路径")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>重定向的特点</strong></p><ol><li>发送了多次请求（至少两次）</li><li>不能共享地址栏中的参数信息</li><li>最终显示的结果 以最后一个Servlet (和请求转发的特点一样)</li><li>不能访问WEB-INF 下面的资源</li><li>可以访问站外资源</li><li>不可以共享request 域对象中的数据</li></ol></li></ul><h4 id="请求转发和重定向的选择"><a href="#请求转发和重定向的选择" class="headerlink" title="请求转发和重定向的选择"></a>请求转发和重定向的选择</h4><ol><li><p>如果需要访问WEB-INF下面的资源 ，则 必须使用 请求转发</p></li><li><p>如果需要访问站外资源，则必须使用 重定向</p></li><li><p>其它，则可以 随便使用  </p><ul><li><p>一般是这样用的：如果地址栏的地址 应该 发生变化，则使用重定向 </p></li><li><p>如果地址栏的地址，可以 不用变化，也能理解 则使用请求转发</p></li></ul></li></ol><h4 id="转发与重定向的应用场景"><a href="#转发与重定向的应用场景" class="headerlink" title="转发与重定向的应用场景"></a>转发与重定向的应用场景</h4><ul><li>应用场景：登录、购物车结算采用重定向，其他一律采用转发。</li></ul><h2 id="servlet的三大作用域"><a href="#servlet的三大作用域" class="headerlink" title="servlet的三大作用域"></a>servlet的三大作用域</h2><h4 id="域对象的理解"><a href="#域对象的理解" class="headerlink" title="域对象的理解"></a>域对象的理解</h4><ul><li>域对象 ： 存储数据的容器</li><li>Servlet 中 有 4 个 能存储数据的 容器 （域对象）</li><li>PageContext  Request Session  ServletContext (Application)</li><li>容器（域对象）的容量大小 是一样的，不同容器(域对象)的区别<ul><li>Request : 一次请求中有效 （只在请求转发中使用）</li><li>Session: 一次会话中有效 (从浏览器打开，到关闭 称为一次会话)</li><li>ServletContext (Application): 当前应用 (项目开启 到 关闭)</li></ul></li><li>共同操作域对象 的API： <ul><li>存：setAttribute（key,value）</li><li>取：getAttribute（key）</li></ul></li><li>获取Reqeust 对象  ： 直接使用</li><li>获取Session 对象 ：  request.getSession():</li><li>获取ServletContext 对象： request.getServletContext(): (上下文)</li></ul><h4 id="作用域的选择"><a href="#作用域的选择" class="headerlink" title="作用域的选择"></a>作用域的选择</h4><ul><li><p>能用小的 绝不用大的，够用原则:</p></li><li><p>Request &lt; session &lt; ServletContext</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AJAX和servlet学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/09/12/Vue/"/>
      <url>/2022/09/12/Vue/</url>
      
        <content type="html"><![CDATA[<h1><center>Vue</center></h1><hr><h2 id="MVVM的思想"><a href="#MVVM的思想" class="headerlink" title="MVVM的思想"></a>MVVM的思想</h2><h4 id="Ajax请求数据"><a href="#Ajax请求数据" class="headerlink" title="Ajax请求数据"></a>Ajax请求数据</h4><ol><li>点击按钮出发事件</li><li>使用$.post $.get $.ajax 发请求</li><li>请求 完成之后拿到数据</li><li>使用document.getElementById(“id”)找到页面的dom对象</li><li>把第三部请求回来的数据使用innrText innerHtml去修改</li></ol><h4 id="MVVM设计思想"><a href="#MVVM设计思想" class="headerlink" title="MVVM设计思想"></a>MVVM设计思想</h4><ul><li><p><strong>MVC</strong></p><ul><li><p><strong>|–M Model</strong> <strong>（domain,service,serviceimpl.utils.pojo.mapper****）</strong></p></li><li><p><strong>|–V view thymeleaf jsp html</strong></p></li><li><p><strong>|–C controller</strong> **接收前端请求(**<strong>控制器)</strong></p></li></ul></li><li><p><strong>Model</strong>：对应数据层的域模型，它主要做域模型的同步。通过 Ajax&#x2F;fetch 等 API 完成客户端和服务端业务 Model 的同步。在模型层间关系里，它主要用于抽象出 ViewModel 中视图的 Model。个人理解：后端提供API，后端服务架构是 控制器+数据模型 或者 纯控制器。</p></li><li><p><strong>View</strong>：View是作为视图模板，用于定义结构、布局。它自己不处理数据，只是将ViewModel中的数据展现出来。此外为了和ViewModel产生关联，那么还需要做的就是数据绑定的声明，指令的声明，事件绑定的声明。ViewModel和View之间是双向绑定，意思就是说ViewModel的变化能够反映到View中，View的变化也能够改变ViewModel的数据值。</p></li><li><p><strong>ViewModel</strong>：ViewModel起着连接View和Model的作用，同时用于处理View中的逻辑。在MVC框架中，视图模型通过调用模型中的方法与模型进行交互，然而在MVVM中View和Model并没有直接的关系，在MVVM中，ViewModel从Model获取数据，然后应用到View中。个人理解：Web前端的webserver对View进行双向绑定渲染。</p></li><li><p>整个MVVM实际上实现了<strong>前后端分离</strong>，通过api来实现前后端交互，前端通过纯js或者双向绑定框架来渲染页面。</p></li><li><p><strong>前后端不分离</strong>（crm页面写在crm项目里面 html thymeleaf（模板引擎） ）</p><p><strong>前后端分离</strong></p><p><img src="/images/vue/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.png" alt="前后端分离"></p></li><li><p>大概如：</p><ul><li><p>数据库（MySQL、PostgreSQL）&lt;—双向交互—&gt;api（php、java、Python、node）&lt;—双向交互—&gt;ajax&#x2F;fetch&#x2F;websocket（node服务、jQ、js）&lt;—双向绑定—&gt;html（标签、css）。</p><p>MVVM有利于项目分工和升级，所谓对前后端分离。但也有缺点，就是不利于 。</p><p>MVC：服务端来渲染数据，老旧模式。MC属于纯后端，V属于前端，js权重不高，有利于SEO。</p><p>万物基于api，一套api可以针对小程序、app、前端，为何不首先使用。需要SEO对部分，单独分离出项目，采用MVC渲染静态页面或者纯html即可。</p></li></ul></li></ul><h4 id="MVVM图例解析"><a href="#MVVM图例解析" class="headerlink" title="MVVM图例解析"></a>MVVM图例解析</h4><ul><li><p>如下图：</p><p><img src="/images/vue/MVVM%E8%A7%A3%E6%9E%90.png" alt="MVVM解析"></p></li></ul><hr><h2 id="v-text-v-html-v-pre-v-once指令"><a href="#v-text-v-html-v-pre-v-once指令" class="headerlink" title="v-text,v-html,v-pre,v-once指令"></a>v-text,v-html,v-pre,v-once指令</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</li><li>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</li></ul><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><ul><li><p>v-text主要用来更新textContent，可以等同于JS的innerText属性。</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这两者等价：</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><ul><li><p>双大括号的方式会将数据解释为纯文本，而非HTML。为了输出真正的HTML，可以用v-html指令。它等同于JS的innerHtml属性。</p></li><li><p>或者jquery的$().html(aaa)</p><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这个div的内容将会替换成属性值rawHtml，直接作为HTML进行渲染。</p></li></ul><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><ul><li><p>v-pre主要用来跳过这个元素和它的子元素编译过程。可以用来显示原始的Mustache标签。跳过大量没有指令的节点加快编译。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> //这条语句不进行编译    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最终仅显示第二个span的内容</p></li></ul><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><ul><li><p>v-once关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>This will never change:{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> //单个元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>//有子元素    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>comment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上面的例子中，msg即使产生改变，也不会重新渲染。</p></li><li><p><strong>练习</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--必须 要有一个根标签 必须给一个 id 属性--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      v-text 指令： 相当于html innerText<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      {{text}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      v-html 指令：相当于 html innerHtml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      v-pre  指令： 解析失效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-pre</span><span class="token punctuation">></span></span>           {{text}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      v-once  指令： 只渲染一次 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-once</span> <span class="token punctuation">></span></span>           {{msg}} --- {{msg}}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我修改msg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            text<span class="token punctuation">:</span><span class="token string">'&lt;h1>我是 v-text 指令&lt;/h1>'</span><span class="token punctuation">,</span>            html<span class="token punctuation">:</span><span class="token string">'&lt;h1>我是 v-html 指令&lt;/h1>'</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token string">'我是 v-once 指令'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">changeMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="属性绑定，事件绑定，双向绑定"><a href="#属性绑定，事件绑定，双向绑定" class="headerlink" title="属性绑定，事件绑定，双向绑定"></a>属性绑定，事件绑定，双向绑定</h2><h4 id="涉及指令"><a href="#涉及指令" class="headerlink" title="涉及指令"></a>涉及指令</h4><ol><li>v-bind  字面意思为绑定。是vue中提供的用户绑定属性的指令。v-bind可简写成   <strong>：</strong></li><li>v-on 事件绑定指令 可以简写成  <strong>@</strong></li><li>v-model  只能用于表单元素的双向绑定指令</li></ol><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><ul><li>在以前的开发中。我们使用title属性去设置鼠标悬浮的显示值，在vue 中可以使用V-bind去动态设置属性。</li></ul><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><ul><li>在以前的开发中。我们使用onclick等属性去设置点击事件，在vue 中可以使用v-on去设置方式，可简写成@</li></ul><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><ul><li><p>v-model 只能用于表单元素的双向绑定指令 </p></li><li><p><strong>练习</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--属性绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span> <span class="token attr-name">:alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alt<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>til<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url1<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>百度一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--事件绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>点我啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blurMethod<span class="token punctuation">"</span></span> <span class="token attr-name">@focus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>focusMethod<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>val<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--双向绑定--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>username</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>---{{username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span><span class="token string">"111.jpg"</span><span class="token punctuation">,</span>            alt<span class="token punctuation">:</span><span class="token string">'图片裂开'</span><span class="token punctuation">,</span>            til<span class="token punctuation">:</span><span class="token string">'跑车'</span><span class="token punctuation">,</span>            url1<span class="token punctuation">:</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">,</span>            val<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            username<span class="token punctuation">:</span><span class="token number">123</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">clickMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我来了"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">blurMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失去焦点"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">focusMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取焦点"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="条件渲染-v-if-v-else-v-show"><a href="#条件渲染-v-if-v-else-v-show" class="headerlink" title="条件渲染 v-if   v-else  v-show"></a>条件渲染 v-if   v-else  v-show</h2><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><ul><li>v-if可以实现条件渲染，Vue会根据表达式的值的真假条件来渲染元素。</li></ul><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><ul><li>v-else是搭配v-if使用的，它必须紧跟在v-if或者v-else-if后面，否则不起作用。</li></ul><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><ul><li><p>v-else-if充当v-if的else-if块，可以链式的使用多次。可以更加方便的实现switch语句。</p></li><li><p><strong>练习</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">></span><span class="token punctuation">=</span>90<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">></span><span class="token punctuation">=</span>80<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">></span><span class="token punctuation">=</span>70<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        我是正确的    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>我是show指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我显示show指令<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            num<span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">,</span>            a<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            ok<span class="token punctuation">:</span><span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">clickMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>ok<span class="token operator">=</span><span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="列表渲染-v-for"><a href="#列表渲染-v-for" class="headerlink" title="列表渲染 v-for"></a>列表渲染 v-for</h2><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><ul><li><p>用v-for指令根据遍历数组来进行渲染 <strong>前端不叫集合</strong></p></li><li><p>有下面两种遍历形式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> //使用in，index是一个可选参数，表示当前项的索引<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> //使用in<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下面是一个例子，并且在v-for中，拥有对父作用域属性的完全访问权限</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seekMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>住址<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.sex<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">/></span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adduser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(user,index) in users<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{index+1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{user.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{user.address}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{user.sex?"男":"女"}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateMethod(user)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteMethod(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upuser.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upuser.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>住址<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upuser.address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upuser.sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upuser.sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateuser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            users<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'tony'</span><span class="token punctuation">,</span>address<span class="token punctuation">:</span><span class="token string">'成都'</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'java'</span><span class="token punctuation">,</span>address<span class="token punctuation">:</span><span class="token string">'东莞'</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'spring'</span><span class="token punctuation">,</span>address<span class="token punctuation">:</span><span class="token string">'北京'</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'springmvc'</span><span class="token punctuation">,</span>address<span class="token punctuation">:</span><span class="token string">'重庆'</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>name<span class="token punctuation">:</span><span class="token string">'mybatis'</span><span class="token punctuation">,</span>address<span class="token punctuation">:</span><span class="token string">'佛山'</span><span class="token punctuation">,</span>sex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            user<span class="token punctuation">:</span><span class="token punctuation">{</span>                id<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                name<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                address<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                sex<span class="token punctuation">:</span><span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            username<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>            upuser<span class="token punctuation">:</span><span class="token punctuation">{</span>                id<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                name<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                address<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                sex<span class="token punctuation">:</span>undefined            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">adduser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//计算id</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">updateMethod</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>id <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>name <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>address <span class="token operator">=</span> user<span class="token punctuation">.</span>address<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>sex <span class="token operator">=</span> user<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">updateuser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> newuser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>id <span class="token operator">==</span> user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>                        user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                        user<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>address<span class="token punctuation">;</span>                        user<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>upuser<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> user<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">seekMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断名字是否存在</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> user<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> newArr<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">deleteMethod</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>效果图</p><p><img src="/images/vue/%E5%88%97%E8%A1%A8.png" alt="列表"></p></li></ul><hr><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本<strong>格式化</strong>。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p></li><li><p>过滤器分为两种</p><ol><li><p>全局过滤器 所有Vue实例里面都可以使用Vue.filter</p></li><li><p>局部过滤器 当前的Vue实例里面可以使用</p></li></ol></li><li><p>练习</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{money}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{money|moneyHandler}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{birth}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{birth|birthHandler}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{sex==1?"男":"女"}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{sex|sexHandler}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{money}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{money|moneyHandler}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{birth}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{birth|birthHandler}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{sex==1?"男":"女"}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{sex|sexHandler}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//全局过滤器的声明</span>    <span class="token comment" spellcheck="true">// Vue.filter("sexHandler",function (value) {</span>    <span class="token comment" spellcheck="true">//     return value==1?"汉子":"妹子"</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// Vue.filter("moneyHandler",function (value) {</span>    <span class="token comment" spellcheck="true">//     return value.toFixed(2)//保留两位小数</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// Vue.filter("birthHandler",function (value) {</span>    <span class="token comment" spellcheck="true">//     return value.getFullYear()+"-"+(value.getMonth()+1)+"-"+value.getDate()+" "+value.getHours()+":"+value.getMinutes()+":"+value.getSeconds()</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token keyword">let</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在过滤器里面无法访问data和methods</span>        filters<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">sexHandler</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"汉子"</span><span class="token punctuation">:</span><span class="token string">"妹子"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">moneyHandler</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//保留两位小数</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            birthHandler<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            money<span class="token punctuation">:</span><span class="token number">9999.9193</span><span class="token punctuation">,</span>            birth<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> vue2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app2"</span><span class="token punctuation">,</span>        filters<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">sexHandler</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token string">"汉"</span><span class="token punctuation">:</span><span class="token string">"妹"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">moneyHandler</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//保留两位小数</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            birthHandler<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>value<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            money<span class="token punctuation">:</span><span class="token number">9999.9193</span><span class="token punctuation">,</span>            birth<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li><p>就是用来监听data里面的数据值是否发生变化。如果发生变化会触发监听器</p></li><li><p>练习</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>10监听器的使用.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.age<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//监听器</span>        watch<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">age</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldVal<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'user.age'</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldVal<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>            user<span class="token punctuation">:</span><span class="token punctuation">{</span>                age<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="综合练习，购物车"><a href="#综合练习，购物车" class="headerlink" title="综合练习，购物车"></a>综合练习，购物车</h4><ul><li><p>代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>70%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedAll<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>allMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>小计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>备注<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(good,index) in goodsList<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>good.isChecked<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkMethod(good)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{index + 1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{good.goodsName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{good.price}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subMethod(good)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            {{good.num}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addMethod(good)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{good.amount}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{good.remark}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delMethod(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            总计：{{sumMoney}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>balance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>结算<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            goodsList<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>goodsName<span class="token punctuation">:</span><span class="token string">'小霸王1'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>remark<span class="token punctuation">:</span><span class="token string">'牛逼'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>goodsName<span class="token punctuation">:</span><span class="token string">'小霸王2'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span>remark<span class="token punctuation">:</span><span class="token string">'牛逼'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>goodsName<span class="token punctuation">:</span><span class="token string">'小霸王3'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span>remark<span class="token punctuation">:</span><span class="token string">'牛逼'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>goodsName<span class="token punctuation">:</span><span class="token string">'小霸王4'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>remark<span class="token punctuation">:</span><span class="token string">'牛逼'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>goodsName<span class="token punctuation">:</span><span class="token string">'小霸王5'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>remark<span class="token punctuation">:</span><span class="token string">'牛逼'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>isChecked<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>id<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span>goodsName<span class="token punctuation">:</span><span class="token string">'小霸王6'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>amount<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>remark<span class="token punctuation">:</span><span class="token string">'牛逼'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            sumMoney<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>            checkedAll<span class="token punctuation">:</span><span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">allMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>checkedAll <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkedAll<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    good<span class="token punctuation">.</span>isChecked <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkedAll<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*计算总计*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">+</span><span class="token operator">=</span> good<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/*减数量*/</span>            <span class="token function">subMethod</span><span class="token punctuation">(</span>good<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//商品数量不能少于1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>good<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                good<span class="token punctuation">.</span>num<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*计算小计*/</span>                good<span class="token punctuation">.</span>amount <span class="token operator">-</span><span class="token operator">=</span> good<span class="token punctuation">.</span>price<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*计算总计*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">+</span><span class="token operator">=</span> good<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/*加数量*/</span>            <span class="token function">addMethod</span><span class="token punctuation">(</span>good<span class="token punctuation">)</span><span class="token punctuation">{</span>                good<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>                good<span class="token punctuation">.</span>amount <span class="token operator">+</span><span class="token operator">=</span> good<span class="token punctuation">.</span>price<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*计算总计*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">+</span><span class="token operator">=</span> good<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">checkMethod</span><span class="token punctuation">(</span>good<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*点击按钮，按钮取反*/</span>                good<span class="token punctuation">.</span>isChecked <span class="token operator">=</span> <span class="token operator">!</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">;</span>                <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*判断所有的是否都是选中状态*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">/*有一个没选中就将flag取false*/</span>                        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">/*判断完之后，再给顶部按钮赋值*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>checkedAll <span class="token operator">=</span> flag<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*计算总计*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">+</span><span class="token operator">=</span> good<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*计算总计*/</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>good<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>good<span class="token punctuation">.</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney <span class="token operator">+</span><span class="token operator">=</span> good<span class="token punctuation">.</span>amount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"共支付"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>sumMoney<span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/*删除*/</span>            <span class="token function">delMethod</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>goodsList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>效果图</p><p><img src="/images/vue/%E8%B4%AD%E7%89%A9%E8%BD%A6.png" alt="购物车"></p></li></ul><hr><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h4 id="生命周期图"><a href="#生命周期图" class="headerlink" title="生命周期图"></a>生命周期图</h4><p><img src="/images/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>12生命周期.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是DIV的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//el==element</span>        <span class="token comment" spellcheck="true">//这个是可用的生命周期的第一个方法</span>        <span class="token comment" spellcheck="true">//这个方法里面 data和methods还没有初始化，所以不能使用this.xxx来调用data里面的属性 及methods里面的方法</span>        <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeCreate---"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//vue对象创建成功。此时可以 data和methods已初始化完成，可以使用this.xxx来调用data里面的属性和methods里面的方法</span>        <span class="token comment" spellcheck="true">//【重点方法】一般在这里面发送网络请求。因为这个方法里面可以最早的访问到data和methods</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"created---"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//这个方法是内存里面编译好的模板还没有挂载到浏览器之前执行的方法这里面不能操作页面的dom对象</span>        <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeMount---"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>            <span class="token keyword">var</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myDiv<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"hello"</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//【重点】页面挂载完成的方法，编译好的模板已把页面替换了  这里是最早可以操作页面dom对象的方法</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mounted---"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>            <span class="token keyword">var</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myDiv<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"hello"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//data里面的数据有变化，而模板里面又取了data里面的值，那么就当这个值变化时就会被触发</span>        <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate--"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//beforeUpdate执行之后页面的模板里面的数据替换完成之后，回调的方法</span>        <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"updated--"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//页面vue对象被销毁时触发的方法 里面还可以访问 data和methods</span>        <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beforeDestroy--"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//页面vue对象已完成销毁 不能再访问data和methods</span>        <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"destroyed--"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            userList<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">)</span>                <span class="token keyword">var</span> myDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                myDiv<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">"m1m1m1m1m1m1m1m1m1"</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h2><h4 id="组件概念"><a href="#组件概念" class="headerlink" title="组件概念"></a>组件概念</h4><ul><li><p>组件的出现，是为了拆分Vue的代码块，不用同的组件划分不同的功能模块，以后我们需要某个功能时，就直接调用对应的组件即可</p></li><li><p>模块化：模块化是从代码的角度去分析的，方便代码分层开发，保证每个模块职责单一</p></li><li><p>组件：组件化是从<strong>界面的角度</strong>去划分的，如：分页组件、轮播、颜色选择、文件上传等</p></li><li><p>抽象 是吧公共的东西 像的东西抽出来 （好处：复用，公共的，缺点：代码的可读性直线下降）</p></li><li><p>图示</p><p><img src="/images/vue/%E7%BB%84%E4%BB%B6.png" alt="组件"></p></li><li><p>变量名说明：（组件的使用规范）</p></li><li><p>按java的开发思想，变量名往往是驼峰规则  myComponent  my-component</p></li><li><p>在vue中定义组件可以使用驼峰规则，但是使用组件的时候如果存在驼峰，应该全部改成小写，并把每个单词用-连接 有点像springboot的yml配置文件的语法</p></li></ul><h4 id="声明组件"><a href="#声明组件" class="headerlink" title="声明组件"></a>声明组件</h4><p>- </p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{p}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*自定义组件*/</span>    <span class="token keyword">var</span> myComponent <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#template1"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                p<span class="token punctuation">:</span><span class="token string">'我是p标签'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">clickMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>p<span class="token operator">=</span><span class="token string">"ppp"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绑定组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-component"</span><span class="token punctuation">,</span>myComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件中的data和methods"><a href="#组件中的data和methods" class="headerlink" title="组件中的data和methods"></a>组件中的data和methods</h4><ul><li>组件中也可以有自己的Data和methods，</li><li>组件里面的<strong>data</strong>必须是一个方法原因如下<ul><li>组件在存在是为有复用，定义一个组件之后，可能会有多个地方使用到该组件。如果按data:{}的写法，多个组件会复用同一个data，降低组件的复用性，而定义为function则不会</li></ul></li></ul><h4 id="私有组件的使用"><a href="#私有组件的使用" class="headerlink" title="私有组件的使用"></a>私有组件的使用</h4><ul><li><p>上面的创建方法都是公有的组件，如果只想一个组件在某一个Vue实例里面使用，就可以使用私有组件</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{h}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件--></span>    var myComponent = {        template:"#tem",        data(){            return{                h:"我是自定义模版"            };        },        methods:{            clickMethod(){                this.h="我变了"            }        }    }    /*绑定组件,使用私有组件时，是在每个实例中单独绑定*///Vue.component("my-component",myComponent);    new Vue({        el:"#app",        components:{//私有组件            "my-component":myComponent        },        data:{        },        methods:{        }    });new Vue({    el:"#app1",    data:{    },    methods:{    }});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="组件的切换"><a href="#组件的切换" class="headerlink" title="组件的切换"></a>组件的切换</h2><h4 id="使用v-if-v-else-v-else-if去切换组件"><a href="#使用v-if-v-else-v-else-if去切换组件" class="headerlink" title="使用v-if v-else v-else-if去切换组件"></a>使用v-if v-else v-else-if去切换组件</h4><ul><li><p>代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义两个按钮--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--显示两个组件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>temp</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>temp</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>temp1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>temp1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义两个组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>temp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是登陆组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>temp1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>我是注册组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*定义公共组件1*/</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"#temp"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        hetmods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*定义公共组件2*/</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"temp1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"#temp1"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        hetmods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            flag<span class="token punctuation">:</span><span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        hethods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用占位符切换组件"><a href="#使用占位符切换组件" class="headerlink" title="使用占位符切换组件"></a>使用占位符切换组件</h4><ul><li><p>代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flagName <span class="token punctuation">=</span> <span class="token punctuation">'</span>tem<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flagName <span class="token punctuation">=</span> <span class="token punctuation">'</span>tem1<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义一个变量，用来切换模版--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flag</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flagName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flag</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登陆啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tem1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>注册啊<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tem"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#tem"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"tem1"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#tem1"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            flagName<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="父子组件之间的传值"><a href="#父子组件之间的传值" class="headerlink" title="父子组件之间的传值"></a>父子组件之间的传值</h2><h4 id="子组件直接获取父组件数据（父传子）"><a href="#子组件直接获取父组件数据（父传子）" class="headerlink" title="子组件直接获取父组件数据（父传子）"></a>子组件直接获取父组件数据（父传子）</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    父组件：{{msg}}    <span class="token comment" spellcheck="true">&lt;!--定义parent-msg变量，用于装入父组件的数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:parent-msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义子组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        子组件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义一个按钮，定义事件传输数据--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>传递数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-component"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#tem"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">"我是子组件"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* parentMsg 对应 parent-Msg,这里进行定义变量类型与初始化*/</span>        props<span class="token punctuation">:</span><span class="token punctuation">{</span>            parentMsg<span class="token punctuation">:</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span>String<span class="token punctuation">,</span>                <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">null</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">changeTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentMsg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            msg<span class="token punctuation">:</span><span class="token string">"我是父组件"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    父组件：{{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        子组件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数据传输<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*定义组件*/</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-component"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#tem"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">"我是子组件"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">clickTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            msg<span class="token punctuation">:</span><span class="token string">"我是父组件"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*value就是               $emit("click",this.title)            中的第二个函数*/</span>            <span class="token function">clickMethod</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="父组件调用子组件的方法"><a href="#父组件调用子组件的方法" class="headerlink" title="父组件调用子组件的方法"></a>父组件调用子组件的方法</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    父组件：{{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickMethod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>父组件按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>childRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        子组件的属性：{{title}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*定义组件*/</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-component"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#tem"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                title<span class="token punctuation">:</span><span class="token string">"我是子组件中的属性"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">childMethod</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            msg<span class="token punctuation">:</span><span class="token string">"我是父组件"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">clickMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>childRef<span class="token punctuation">.</span><span class="token function">childMethod</span><span class="token punctuation">(</span><span class="token string">"我是父组件调用子组件的方法"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h4 id="路由及作用"><a href="#路由及作用" class="headerlink" title="路由及作用"></a>路由及作用</h4><ul><li>后端：对于普通网站同，所有的超链接都对应一个url地址，每个url都对应服务器上的资源</li><li>前端：对于单页面应用程序来说的，主要通过url中的#（hash）去实现的，(相当于a标签)</li><li><strong>作用：就是用来做跳转的局部更新页面内容</strong></li></ul><h4 id="vue路由跳转"><a href="#vue路由跳转" class="headerlink" title="vue路由跳转"></a>vue路由跳转</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--显示组件的标签--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登陆界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>注册界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*定义组件*/</span>    <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#login"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> register <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#register"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*定义路由*/</span>    <span class="token keyword">var</span> routerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//{"path":"/",redirect:"/login"},//重定向</span>            <span class="token comment" spellcheck="true">//{"path":"/", component:login},</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>login<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/register"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>register<span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    router<span class="token punctuation">:</span>routerObj<span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="路由传参（地址传参及rest风格传参）"><a href="#路由传参（地址传参及rest风格传参）" class="headerlink" title="路由传参（地址传参及rest风格传参）"></a>路由传参（地址传参及rest风格传参）</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login?username<span class="token punctuation">=</span>tuoy&amp;password<span class="token punctuation">=</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register/xiaoyang/23<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--显示位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        {{username}}---{{password}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我是注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        {{name}}---{{age}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*定义组件*/</span>    <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#login"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*地址传参，数据在$route.query里面*/</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>username<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>password<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                username<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                password<span class="token punctuation">:</span>undefined            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> register <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#register"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/*rest风格传参，数据在$route.params里面*/</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>                age<span class="token punctuation">:</span>undefined            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*创建路由*/</span>    <span class="token keyword">var</span> routerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>login<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/*使用rest风格传参时，要在路由路径里面声明*/</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/register/:name/:age"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>register<span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        router<span class="token punctuation">:</span>routerObj<span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="路由的嵌套使用"><a href="#路由的嵌套使用" class="headerlink" title="路由的嵌套使用"></a>路由的嵌套使用</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--显示位置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/authLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>验证码登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/pwdLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号密码登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/scanLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>扫码登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--内嵌组件模版--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            手机号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>auth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwdLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scanLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            扫码登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>22.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>注册界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*定义组件*/</span>    <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#login"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> register <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#register"</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*定义内嵌组件*/</span>    <span class="token keyword">var</span> authLogin <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#authLogin"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> pwdLogin <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#pwdLogin"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> scanLogin <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#scanLogin"</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*创建路由*/</span>    <span class="token keyword">var</span> routerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//{"path":"/",redirect:"/login"},</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>login<span class="token punctuation">,</span>children<span class="token punctuation">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/authLogin"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>authLogin<span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/pwdLogin"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>pwdLogin<span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/scanLogin"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>scanLogin<span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/register"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>register<span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        router<span class="token punctuation">:</span>routerObj<span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="编程式路由跳转"><a href="#编程式路由跳转" class="headerlink" title="编程式路由跳转"></a>编程式路由跳转</h4><ul><li><p>代码演示</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue-router.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>toRegister<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>注册界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> login <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#login"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> register <span class="token operator">=</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#register"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> routerObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        routes<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/"</span><span class="token punctuation">,</span>redirect<span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/login"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>login<span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span><span class="token string">"/register"</span><span class="token punctuation">,</span>component<span class="token punctuation">:</span>register<span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        router<span class="token punctuation">:</span>routerObj<span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">toLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">toRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/register"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="使用npm创建vue项目"><a href="#使用npm创建vue项目" class="headerlink" title="使用npm创建vue项目"></a>使用npm创建vue项目</h2><h4 id="创建创建项目"><a href="#创建创建项目" class="headerlink" title="创建创建项目"></a>创建创建项目</h4><ol><li><p>在dos窗口任意磁盘下输入命令</p><pre class="line-numbers language-html"><code class="language-html">vue ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在打开的网页上点击创建</p><p><img src="/images/vue/%E5%88%9B%E5%BB%BA.png" alt="创建"></p></li><li><p>输入项目名，包管理器选择为 npm ，git初始化关闭</p><p><img src="/images/vue/%E9%A1%B9%E7%9B%AE%E5%90%8D.png" alt="项目名"></p></li><li><p>选择手动预设，打开 Router , Vuex , Css Pre-processors 关闭 Linter &#x2F; Formatter</p><p><img src="/images/vue/%E9%A2%84%E8%AE%BE.png" alt="预设"></p></li><li><p>配置中语法选择 3.x  ， Css Pre-processors 选择 Stylus</p><p><img src="/images/vue/%E9%85%8D%E7%BD%AE.png" alt="配置"></p></li><li><p>保存时尽量选则 ： 创建项目，不保存预设</p><p><img src="/images/vue/%E4%BF%9D%E5%AD%98.png" alt="保存"></p></li><li><p>将创建好的项目拖到idea中打开，安装axios的依赖</p><pre class="line-numbers language-Java"><code class="language-Java">//在项目的terminal窗口中，输入以下命令，安装依赖npm install --save axios vue-axios//安装成功后，在项目中找到main.js文件，添加一下代码import axios from 'axios'import VueAxios from 'vue-axios'//以下代码，添加进app中.use(VueAxios, axios)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在项目中安装element-plus</p><pre class="line-numbers language-Java"><code class="language-Java">//在项目的terminal窗口中，输入以下命令，安装element-plusnpm install element-plus --save    //安装成功后，在项目中找到main.js文件，添加一下代码import ElementPlus from 'element-plus'import 'element-plus/dist/index.css'//以下代码，添加进app中.use(ElementPlus)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全部添加完成后，效果图如下</p><p><img src="/images/vue/main.png" alt="main"></p></li><li><p>点击运行成功后的链接，若网页正常显示，怎项目配置成功</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Vue学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML-JSON</title>
      <link href="/2022/09/01/XML%E5%92%8CJSON/"/>
      <url>/2022/09/01/XML%E5%92%8CJSON/</url>
      
        <content type="html"><![CDATA[<h1><center> XML和JSON解析</center>---<h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><h4 id="xml文件"><a href="#xml文件" class="headerlink" title="xml文件"></a>xml文件</h4><ol><li><p>XML是指可扩展标记语言(eXtensible Markup Language)，它也是一种标记语言，很类似HTML。它被设计的宗旨是传输数据，而非显示数据。</p></li><li><p>XML标签没有被预定义，需要用户自行定义标签。</p></li><li><p>XML技术是W3C组织(World Wide Web Consortium万维网联盟)发布的，目前遵循的是W3C组织于2000年发布的XML1.0规范。</p></li><li><p>XML被广泛认为是继Java之后在Internet上最激动人心的新技术。</p></li></ol><h4 id="xml常见应用"><a href="#xml常见应用" class="headerlink" title="xml常见应用"></a>xml常见应用</h4><ul><li>用于数据存储</li><li>用在软件配置，用于描述模块之间的关系（如果著名的Spring和mybatis都是基于XML作为配置文件的）</li><li>在一个软件系统中，通过XML配置文件可以提高系统的灵活性。即程序的行为是通过XML文件来配置的，而不是硬编码。</li></ul><h4 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h4><ul><li><p><strong>文档声明</strong></p><ol><li>在编写XML文档时，需要先使用文档声明来声明XML文档。且必须出现在文档的第一行。（前面注释都不允许）</li><li>最简单的语法:<?xml version="1.0”?></li><li>用encoding属性说明文档所使用的字符编码。保存在磁盘上的文件编码要与声明的编码一致。<ul><li>如：<?xml version="1.0" encoding="UTF-8”?></li></ul></li><li>用standalone属性说明文档是否独立，即是否依赖其他文档。<ul><li>如：<?xml version="1.0" encoding="UTF-8" standalone="yes”?></li></ul></li></ol></li><li><p><strong>元素</strong></p><ol><li><p>XML元素指XML文件中出现的标签。一个标签分为起始和结束标签(不能省略)。一个标签有如下几种书写形式：</p><pre class="line-numbers language-xml"><code class="language-xml">包含标签主体：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytag</span><span class="token punctuation">></span></span>some content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mytag</span><span class="token punctuation">></span></span>不含标签主体：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mytag</span>    <span class="token punctuation">/></span></span>（有时也叫空标签）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>一个标签中可以嵌套若干子标签，但所有标签必须合理的嵌套，不允许有交叉嵌套。</p></li><li><p>一个XML文档必须有且仅有一个根标签，其他标签都是这个根标签的子标签或孙标签。</p></li><li><p>对于XML标签中出现的所有空格和换行，XML解析程序都会当作标签内容进行处理。</p></li><li><p>由于在XML中，空格和换行都作为原始内容被处理，所以，在编写XML文件时，使用换行和缩进等方式来让原文件中的内容清晰可读的“良好”书写习惯可能要被迫改变。</p></li><li><p>元素命名规范：<strong>一个XML元素可以包含字母、数字以及其它一些可见字符</strong>，但必须遵守下面的一些规范：</p><ol><li>区分大小写，例如，<A>和<a>是两个不同的标记。（与java、c变量命名一致）</li><li>不能以数字或”_” (下划线)开头。（与java、c变量命名一致）</li><li>不能以xml(或XML、或Xml 等)开头。(xml 为关键字，所以不能重复)</li><li>不能包含空格。</li><li>名称中间不能包含冒号（:）。</li></ol></li></ol></li><li><p><strong>属性</strong></p><ul><li>一个元素可以有多个属性，每个属性都有它自己的名称和取值，例如：&lt;mytag name&#x3D;“value” …&#x2F;&gt;</li><li>属性值一定要用引号(单引号或双引号)引起来。(引号用法与java不同)</li><li>属性名称的命名规范与元素的命名规范相同</li><li>元素中属性没有顺序要求，但是不准重复。</li><li>在XML技术中，标签属性所代表的信息也可以被改成用子元素的形式来描述</li></ul></li><li><p><strong>注释</strong></p><ul><li><p>XML中的注释语法为：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--这是注释--></span>XML声明之前不能有注释(xml声明必须放在文档第一行)注释不能嵌套，例如：<span class="token comment" spellcheck="true">&lt;!--大段注释…         &lt;!—又一大段注释--></span>…--><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h4><ul><li><p>在 XML 中，一些字符拥有特殊的意义。如果你把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始。如下这样会产生 XML 错误：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span><span class="token punctuation">></span></span>if salary &lt; 1000 then<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>message</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在xml中，有五个预定义实体应用：</p><table><thead><tr><th>特殊字符</th><th>替代符号</th></tr></thead><tbody><tr><td>&amp;</td><td>&amp;amp ;</td></tr><tr><td>&lt;</td><td><strong>&amp;lt ;</strong>    <strong>重点记住</strong></td></tr><tr><td>&gt;</td><td><strong>&amp;gt ;</strong>   <strong>重点记住</strong></td></tr><tr><td>“</td><td>&amp;quot ;</td></tr><tr><td>‘</td><td>&amp;ap ;</td></tr></tbody></table></li></ul><h4 id="xml语法总结"><a href="#xml语法总结" class="headerlink" title="xml语法总结"></a>xml语法总结</h4><ol><li>所有 XML 元素都须有关闭标签</li><li>XML 标签对大小写敏感</li><li>XML 必须正确地嵌套顺序</li><li>XML 文档必须有根元素(有且仅有一个)</li><li>XML 的属性值须加引号</li><li>特殊字符必须转义 —<![CDATA[文本内容]]></li><li>XML 中的空格、回车换行会解析时被保留</li></ol><h2 id="xml约束（了解）"><a href="#xml约束（了解）" class="headerlink" title="xml约束（了解）"></a>xml约束（了解）</h2><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>规定xml文档的书写规则</li><li>XML都是用户自定义的标签，若出现小小的错误，软件程序将不能正确地获取文件中的内容而报错。(如：Tomcat)</li><li>XML技术中，可以编写一个文档来约束一个XML的书写规范，这个文档称之为约束。</li><li>两个概念：格式良好的XML：遵循XML语法的XML。有效的XML：遵循约束文档的XML</li><li><strong>总之：约束文档定义了在XML中允许出现的元素名称、属性及元素出现的顺序等等。</strong></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>DTD:一种简单的约束技术</li><li>Schema:一种复杂的约束技术</li></ul><h4 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h4><ul><li><p>DTD入门</p></li><li><p>创建book.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" ?></span><span class="token doctype">&lt;!DOCTYPE 书架  SYSTEM "book.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书架</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书</span> <span class="token attr-name">编号</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BK1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书名</span><span class="token punctuation">></span></span>葵花宝典<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书名</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>作者</span><span class="token punctuation">></span></span>东方不败<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>作者</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>售价</span><span class="token punctuation">></span></span>59.00元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>售价</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书</span> <span class="token attr-name">编号</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BK2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书名</span><span class="token punctuation">></span></span>九阳神功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书名</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>作者</span><span class="token punctuation">></span></span>张无忌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>作者</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>售价</span><span class="token punctuation">></span></span>57.00元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>售价</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书架</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建book.dtd</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">书架</span> <span class="token attr-name">(书+)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">书</span> <span class="token attr-name">(书名,作者,售价)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">书名</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">作者</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">售价</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span>&lt;!ATTLIST 书 编<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>dtd语法</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">元素名称</span> <span class="token attr-name">使用规则</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用规则</p><pre class="line-numbers language-html"><code class="language-html">（#PCDATA）指示元素的主题内容只能是普通的文本。EMPTY：用于指示元素的主体为空。比如<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>ANY：用于指示元素的主题内容为任意类型。（子元素）：指示元素中包含的子元素。定义子元素及描述它们的关系：  1） 如果子元素用逗号隔开，必须按照声明顺序去编写XML文档。     例如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">FILE(TITLE,</span> <span class="token attr-name">AUTHOR,</span> <span class="token attr-name">EMAIL)</span><span class="token punctuation">></span></span>  2）如果子元素用"|" 分开，说明任选其一。     例如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">FILE(TITLE|AUTHOR|EMAIL)</span><span class="token punctuation">></span></span>  3）用+、*、? 来表示元素出现的次数。     如果元素后面没有+*?表示必须且只能出现一次。     +：表示至少出现一次，一次或多次。     *：表示可有可无，零次、一次或多次。     ?：表示可以有也可以无，有的话只能出现一次。零次或一次。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="xml解析技术"><a href="#xml解析技术" class="headerlink" title="xml解析技术"></a>xml解析技术</h2><h4 id="dom4j解析"><a href="#dom4j解析" class="headerlink" title="dom4j解析"></a>dom4j解析</h4><ul><li><p>准备xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>games</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>完美国际<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>company</span><span class="token punctuation">></span></span>完美世界<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>company</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>company</span><span class="token punctuation">></span></span>Tencent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>company</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>game</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>DOTA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>company</span><span class="token punctuation">></span></span>暴雪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>company</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>game</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>games</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入jar包</p></li><li><p>解析xml（方法一）</p><pre class="line-numbers language-Java"><code class="language-Java">/** * 解析mygames.xml的所有内容 * * @throws Exception */public static void readXml() throws Exception {    // 构建一个解析对象    SAXReader reader = new SAXReader();    // 创建管道指向XML文件(把文本文件加载到系统内存中)    Document document = reader.read(new File("xml/dom4j/mygames.xml"));    // 读取根节点    Element rootElm = document.getRootElement();    // 打印根节点    System.out.println("--" + rootElm.getName());    // 读取games    Iterator<Element> iter1 = rootElm.elementIterator();    // 循环遍历    while (iter1.hasNext()) {        Element e1 = iter1.next();        // 打印game 和取出里面的id属性值        System.out.println("----" + e1.getName()+"\t"+e1.attributeValue("id"));        // 迭代game        Iterator<Element> iter2 = e1.elementIterator();        // 循环遍历        while (iter2.hasNext()) {            Element e3 = iter2.next();            // 打印game里面的name company id的名字和文本            System.out.println("-------- " + e3.getName() + ":"+ e3.getText());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析xml（方法二）</p><pre class="line-numbers language-Java"><code class="language-Java"> //获取dom解析工厂        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();        //得到解析器对象        DocumentBuilder builder = dbf.newDocumentBuilder();        //获取要解析的文件        FileInputStream fis = new FileInputStream(new File("D:\\course11\\04-javaweb\\domproject\\text.xml"));        //解析文件，得到dom对象        Document parse = builder.parse(fis);        //获取xml的根节点        Element documentElement = parse.getDocumentElement();        //获取根节点的下一个子节点        NodeList games = documentElement.getElementsByTagName("game");        //遍历子元素        for (int i = 0; i < games.getLength(); i++) {            Element item = (Element) games.item(i);            //获取子元素中的name元素            Node name = item.getElementsByTagName("name").item(0);            //获取name元素中的值            String nameTextContent = name.getTextContent();            //获取子元素中的company元素            Node company = item.getElementsByTagName("company").item(0);            String companyTextContent = company.getTextContent();            System.out.println("name = " + nameTextContent);            System.out.println("company = " + companyTextContent);        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h2><h4 id="JSON基本结构"><a href="#JSON基本结构" class="headerlink" title="JSON基本结构"></a>JSON基本结构</h4><ul><li><p>对象</p><ul><li><p>对象在js中表示为“{}”扩起来的内容，数据结构为 {key：value,key：value,…}的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是 数字、字符串、数组、对象几种。</p></li><li><p>比如：</p><ol><li>最简单的形式，可以用下面这样的 JSON 表示”名称 &#x2F; 值对”：</li></ol><pre class="line-numbers language-JSON"><code class="language-JSON">{ "firstName": "Brett" }  //相当于==》firstName=Brett<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>多个”名称 &#x2F; 值对”串</li></ol><pre class="line-numbers language-JSON"><code class="language-JSON">{ "firstName": "Brett", "lastName":"McLaughlin", "email": "aaaa" }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>数组</p><ul><li><p>数组在js中是中括号“[]”扩起来的内容，数据结构为 [“java”,”javascript”,”vb”,…]，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是数字、字符串、数组、对象几种。</p></li><li><p>语法1—-[1,2,3,4,5]  语法2—-[{k1:v1,k2:v2},{},{},{}]</p></li><li><p>比如：</p><ol><li>含有1个变量的数组：</li></ol><pre class="line-numbers language-JSON"><code class="language-JSON">{ "people": [{ "firstName": "Brett", "lastName":"McLaughlin", "email": "aaaa" },{ "firstName": "Jason", "lastName":"Hunter", "email": "bbbb"},{ "firstName": "Elliotte", "lastName":"Harold", "email": "cccc" }]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="fastJSON解析"><a href="#fastJSON解析" class="headerlink" title="fastJSON解析"></a>fastJSON解析</h4><ul><li><p>fastJSON特点：</p><ol><li>快速FAST (比其它任何基于Java的解析器和生成器更快，包括jackson）</li><li>强大（支持普通JDK类包括任意Java Bean Class、Collection、Map、Date或enum）</li><li>零依赖（没有依赖其它任何类库除了JDK）</li></ol></li><li><p>先导包</p></li><li><p>创建对象</p><pre class="line-numbers language-Java"><code class="language-Java">package com.powernode.bean;import java.util.Date;public class User {    private Integer id;    private String name;    private String address;    private Date birth;    public User() {    }    public User(Integer id, String name, String address, Date birth) {        this.id = id;        this.name = name;        this.address = address;        this.birth = birth;    }    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getAddress() {        return address;    }    public void setAddress(String address) {        this.address = address;    }    public Date getBirth() {        return birth;    }    public void setBirth(Date birth) {        this.birth = birth;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成简单的JSON对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01FastJson</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token string">"武汉"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转化成JSON字符串</span>        String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转化成JSON对象  本质也就是一个Map</span>        JSONObject o <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"birth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>生成简单的数组</p><pre class="line-numbers language-Java"><code class="language-Java">package com.powernode.fastjson;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.powernode.bean.User;import java.util.ArrayList;import java.util.Date;import java.util.List;public class Test02FastJson {    public static void main(String[] args) {        List<User> users=new ArrayList<>();        for (int i = 1; i <=5 ; i++) {            users.add(new User(i,"小明"+i,"武汉"+i,new Date()));        }        //转化成JSON字符串        String json = JSON.toJSONString(users);        System.out.println(json);        //转化成JSON对象  本质也就是一个Map        JSONArray o = (JSONArray) JSON.toJSON(users);        for (Object o1 : o) {            JSONObject o2= (JSONObject) o1;            System.out.println(o2.get("id")+" "+o2.get("name")+" "+o2.get("address")+" "+o2.get("birth"));        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析简单的JSON对象</p><pre class="line-numbers language-Java"><code class="language-Java">package com.powernode.fastjson;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.powernode.bean.User;import java.util.ArrayList;import java.util.Date;import java.util.List;public class Test03FastJson {    public static void main(String[] args) {        String json="{\"address\":\"武汉\",\"birth\":1609943410183,\"id\":1,\"name\":\"小明\"}";        JSONObject jsonObj = (JSONObject) JSON.parse(json);        System.out.println(json);        System.out.println(jsonObj.get("id"));        System.out.println(jsonObj.get("name"));        System.out.println(jsonObj.get("address"));        System.out.println(jsonObj.get("birth"));        //直接转成User对象        User user = JSON.parseObject(json, User.class);        System.out.println(user.getId()+" "+user.getName()+"  "+user.getAddress()+"  "+user.getBirth());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析简单的数组</p><pre class="line-numbers language-Java"><code class="language-Java">package com.powernode.fastjson;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.powernode.bean.User;import java.util.List;public class Test04FastJson {    public static void main(String[] args) {        String json="[{\"address\":\"武汉1\",\"birth\":1609943580570,\"id\":1,\"name\":\"小明1\"},{\"address\":\"武汉2\",\"birth\":1609943580570,\"id\":2,\"name\":\"小明2\"},{\"address\":\"武汉3\",\"birth\":1609943580570,\"id\":3,\"name\":\"小明3\"},{\"address\":\"武汉4\",\"birth\":1609943580570,\"id\":4,\"name\":\"小明4\"},{\"address\":\"武汉5\",\"birth\":1609943580570,\"id\":5,\"name\":\"小明5\"}]";        JSONArray jsonArray = (JSONArray) JSON.parse(json);        System.out.println(jsonArray);        for (Object o1 : jsonArray) {            JSONObject o2= (JSONObject) o1;            System.out.println(o2.get("id")+" "+o2.get("name")+" "+o2.get("address")+" "+o2.get("birth"));        }        //直接转成List<User>对象        List<User> users = JSON.parseArray(json, User.class);        for (User user : users) {            System.out.println(user.getId()+" "+user.getName()+"  "+user.getAddress()+"  "+user.getBirth());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解析本地的JSON文件</p><pre class="line-numbers language-Java"><code class="language-Java">package com.powernode.fastjson;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;import com.powernode.bean.User;import java.io.*;import java.util.List;public class Test05FastJson {    public static void main(String[] args) throws Exception {        //读流        File file=new File("json/json/users.json");        FileInputStream fileInputStream=new FileInputStream(file);        ByteArrayOutputStream bos=new ByteArrayOutputStream();        byte[] b=new byte[1024];        int len=0;        while((len=fileInputStream.read(b))!=-1){            bos.write(b,0,len);        }        byte[] bytes = bos.toByteArray();        bos.close();        fileInputStream.close();        //解析        String json=new String(bytes);        JSONArray jsonArray = (JSONArray) JSON.parse(json);        System.out.println(jsonArray);        for (Object o1 : jsonArray) {            JSONObject o2= (JSONObject) o1;            System.out.println(o2.get("id")+" "+o2.get("name")+" "+o2.get("address")+" "+o2.get("birth"));        }        //直接转成List<User>对象        List<User> users = JSON.parseArray(json, User.class);        for (User user : users) {            System.out.println(user.getId()+" "+user.getName()+"  "+user.getAddress()+"  "+user.getBirth());        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> XML及JSON笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/08/23/CSS/"/>
      <url>/2022/08/23/CSS/</url>
      
        <content type="html"><![CDATA[<h1><center> CSS</center><p>CSS是Cascading Style Sheets（层叠样式表）的简称，是负责美化页面的</p><h2 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>     属性<span class="token property">1</span><span class="token punctuation">:</span> 值<span class="token number">1</span><span class="token punctuation">;</span>     属性<span class="token property">2</span><span class="token punctuation">:</span> 值<span class="token number">2</span><span class="token punctuation">;</span>     <span class="token number">...</span>     属性<span class="token property">N</span><span class="token punctuation">:</span> 值N<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择器就是用来选择需要美化的html标签。</p><p>html中属性的格式是： <strong>属性&#x3D;”属性值”</strong></p><p>css中属性的格式是： <strong>属性: 值;</strong> </p><h2 id="CSS引入"><a href="#CSS引入" class="headerlink" title="CSS引入"></a>CSS引入</h2><ul><li><p>方式一：行内式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css引入_行内式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--多个样式之间以分号“ ; ”隔开    字体大小样式：font-size:100px    字体颜色样式：color:red    --></span>    <span class="token comment" spellcheck="true">&lt;!--    行内式：在标签的内部 通过添加style样式来进行修理    优点:方便，针对要处理的内容，可以直观的看到结果    缺点:复用性太差，在需要添加样式的地方都要添加样式,代码重复    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--           css行内式： 就是使用标签的style属性添加样式          优点：编写方便          缺点：样式只能作用在当前单个标签，多个标签不能共享该样式         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：嵌入式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css引入_嵌入式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--             嵌入式通过在head标签中添加style标签，在style标签            内部编写css代码            type="text/css"  text是大的类型  css是小的类型  -- MIME类型         --></span>            <span class="token comment" spellcheck="true">&lt;!--              嵌入式：              优点：同一个页面中的标签可以共享样式              缺点：同一个项目的不同页面不能共享样式            --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*            选择器：                标签选择器，使用标签的名称                按照css的语法，设置样式                                作用：针对当前文档中的所有符合标签名称的标签内容，按照设置的样式进行展示            */</span>            <span class="token selector">span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式三：外链式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css引入_外链式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--          外链式:也就说css和html不在同一个页面，css从html中独立出去成为一个css文件         然后在html中引入css文件                  外链式：         优点：复用性强，css和html解耦了，所以css可以被多个html页面共享         缺点：可读性差，样式覆盖性问题，使用的样式采用的是就近原则         --></span>         <span class="token comment" spellcheck="true">&lt;!--             通过link标签引入外部css文件            rel="stylesheet"   rel属性表示关联的是样式表            type : 是类型，关联样式表的类型            href : 属性就是样式文件的路径          --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/base.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="样式的优先级"><a href="#样式的优先级" class="headerlink" title="样式的优先级"></a>样式的优先级</h2><p>  多重样式：如果外部样式、内部样式和内联样式同时应用于同一个元素，就是使多重样式的情况。</p><p>  样式优先级总结：<strong>谁离得近，谁优先级高！</strong>行内样式优先级最高！</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标签选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                标签选择器的语法格式：                标签名{                    属性:值;                }             */</span>            <span class="token comment" spellcheck="true">/*             标签选择器的短板，只能给符合标签名称的所有标签设置样式            比如：给相同标签中的部分标签设置样式，是做不到的              以下选择器表示选中当前页面中的所有div标签             */</span>            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            div01        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            div02        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>类选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--             类选择器的语法格式：            .类名{                属性:值;            }            注意：类名是通过标签的class属性设置的.            相同的类名可以用在多个标签上            一个标签可以有多个类名            class属性：叫做了类选择器，可以有多个类名                     --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">         <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token selector"><span class="token class">.c</span></span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* color属性表示文字的颜色 */</span>                <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 一个标签可以有多个类名，类名之间使用空格分开 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1 c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div01        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2 c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div02        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1 c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div03        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>id选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*              id选择器语法格式：              #id号{                  属性:值;              }              注意：id号是通过标签的id属性设置的.              规范要求：每个标签的id号唯一，在当前文档中每个id名只能有一个。因为id主要是为了配合js代码。                注意：id选择器是以#号开头            id选择器很少被使用             */</span>            <span class="token selector"><span class="token id">#p1</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>通配符选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--             通配符选择器的语法格式：             *{                属性:值;             }            *表示选中body页面中的所有标签          --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">         <span class="token selector">*</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>我爱你祖国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础选择器的优先级"><a href="#基础选择器的优先级" class="headerlink" title="基础选择器的优先级"></a>基础选择器的优先级</h3><p><strong>不同选择器的相同样式作用在同一个标签上才需要区分优先级。</strong></p><p>范围越小优先级越高</p><p>!important &gt; 行内式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符选择器</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>基础选择器的优先级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">p</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                   !important 用来提升优先级                 */</span>                <span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token id">#p1</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> yellow</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>复合选择器就是多个基础选择器组成的选择器</p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>后代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*               后代选择器语法格式：               选择器1 选择器n{                   属性:值;               }               后代：子子孙孙                         */</span>            <span class="token selector"><span class="token class">.c1</span> span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                    内容1                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                内容2            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>子代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                子代选择器语法格式：                选择器1>选择器n{               属性:值;                }                子代：亲儿子             */</span>            <span class="token selector">div>span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                    内容1                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                内容2            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>相邻兄弟选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*               相邻兄弟选择器的语法格式：                选择器1+选择器n{                    属性:值;                }                相邻兄弟选择器必须是紧挨着的，且只能向下查找             */</span>            <span class="token selector">div+p</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>通用兄弟选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*              通用兄弟选择器语法格式：               选择器1~选择器n{                属性:值;                }                              通用兄弟选择器只要是指定的兄弟标签即可              div~* 表示div下的所有兄弟，不过很少这样使用             */</span>            <span class="token selector">div~p</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>交集选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*              交集选择器语法格式：              选择器1选择器n{                  属性:值;              }              注意：标签选择器只能位于最前面             */</span>            <span class="token comment" spellcheck="true">/*             理解：获取同时满足有几个选择器的标签中的内容              p.c1表示选择p标签且类名是c1的             */</span>            <span class="token selector">p<span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>并集选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*              并集选择器语法格式：              选择器1,选择器n{                  属性:值;              }                        理解：获取满足随便一个选择器的标签的内容             */</span>            <span class="token selector"><span class="token class">.c1</span>,b,i,span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合选择器的优先级"><a href="#复合选择器的优先级" class="headerlink" title="复合选择器的优先级"></a>复合选择器的优先级</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>复合选择器的优先级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                复合选择器的优先级需要根据基础选择器的优先级来判断               id选择器 > 类选择器 > 标签选择器                100          10        1             ---- 虚拟的优先级权重                复合选择器的虚拟的优先级权重累加，结果最大的优先级最高；                如果累加的结果一样，就按照就近原则             */</span>            <span class="token selector">div p span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token id">#d1</span>><span class="token class">.c2</span>>span</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token id">#d1</span>><span class="token id">#p1</span>><span class="token id">#s1</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token selector"><span class="token class">.c1</span>><span class="token id">#p1</span>><span class="token class">.c3</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token id">#d1</span>><span class="token class">.c2</span>><span class="token class">.c3</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    内容1                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                属性选择器的语法格式：               格式一：                [属性名]{                    属性：值；                }            */</span>                <span class="token selector"><span class="token attribute">[type]</span></span><span class="token punctuation">{</span>                    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid blue<span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">/*               格式二：                [属性名="值"]{                    属性：值；                }             */</span>             <span class="token selector"><span class="token attribute">[type="text"]</span></span><span class="token punctuation">{</span>                 <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid blue<span class="token punctuation">;</span>              <span class="token punctuation">}</span>                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            账号：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            密码：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪类通过冒号来定义，它定义了<strong>元素的状态</strong>，伪类不是我们自己定义的类，而是css值已经定义好的类.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>伪类选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*               :link 表示默认的状态             */</span>            <span class="token selector">a<span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/*              :visited 表示被访问后的状态             */</span>            <span class="token selector">a<span class="token pseudo-class">:visited</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">/*               :visited 表示鼠标停留在上面的状态             */</span>            <span class="token selector">a<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">/*               :active 表示鼠标点击按下的状态             */</span>            <span class="token selector">a<span class="token pseudo-class">:active</span></span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>背景属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">body</span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 背景图片会覆盖背景色 */</span>                <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(image/bg.png)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    是否重复                   repeat 表示重复，就是平铺 -- 默认                   no-repeat 表示不重复，就是不平铺                 */</span>                <span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>字体属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                 所有的颜色都是由三原色组成               三原色： 红-red,绿-green，蓝-blue               css的中颜色可以使用英文、十进制、十六进制表示               英文： red   green  skyblue pink               十六进制：                  - 三位表示法：#000-#fff                    000 黑色  fff 白色                    f00 红色  0f0 绿色  00f 蓝色                 - 六位表示法: #000000-#ffffff                    ff0000 红色                    ffff00 黄色                                    十进制：                    0-255                    RGB(255,0,0)                    RGBA(255,0,0,)                    A：alpha通道  表示透明度  0-1                    0表示透明，内容看不到     1表示不透明，内容看得到             */</span>            <span class="token selector">span</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                    文字的颜色                 */</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    文字的大小                 */</span>                <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    文字的样式                   normal: 正常                   italic: 斜体                 */</span>                <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    文字的权重：加粗                 */</span>                <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    文字的字体                   如果属性值中有特殊符号，属性值需要使用""引起来                 */</span>                <span class="token property">font-family</span><span class="token punctuation">:</span> 华文彩云<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token selector">p</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                 font的简写注意点：                   font简写必须包含font-size和font-family，必须是font-size font-family的                    顺序且必须在最后                    font-style和font-weight在前面，两者之间没有顺序要求                 */</span>                <span class="token property">font</span><span class="token punctuation">:</span>bold italic <span class="token number">20</span>px 华文彩云 <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>好好学习，天天向上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>好好学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文本属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">                <span class="token selector">div </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                   文本装饰:                  none  什么装饰都没有，如果是a标签就会取消默认的下划线                  underline 下划线                  line-through  删除线                  overline 顶格线                 */</span>                <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    文本水平对齐方式                 */</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    行高: 从文字的中央基线向上和向下延伸的距离                   将行高设置成父容器的高度就可以做到单行文本的垂直居中                 */</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                  设置字与字之间,字母和字母之间的间距。                 */</span>                <span class="token property">letter-spacing</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token selector">p</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                    文本缩进                    2em 表示2个文字的大小                 */</span>                <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">2</span>em<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                  opacity用来设置透明度，默认值为1，1为不透明，0为完全透明。                 隐藏一个元素 ，完全不显示，但是会占空间，只是看不到。                 */</span>                <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                好好学习,good            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>浙江品诺机械有限公司车间里热火朝天，电机声隆隆，每台设备上装着传感器，通过5G技术联上“轴承产业大脑”，设备状况、产品产量及质量等数据在LED显示屏上一目了然。经过数字化改造后，该车间产出效率提升8%，自动采集的数据上传汇总还能让管理事半功倍。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>实现溢出文本eclipsis的解决，让溢出的文字以省略号显示。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>实现溢出文本eclipsis的解决<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">5</span>em<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*设置文本不能换行*/</span>                <span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*设置文本超出文本框时隐藏文本*/</span>                <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*用略符号来代表被修剪的文本*/</span>                <span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            好好学习，天天向上        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="边框线"><a href="#边框线" class="headerlink" title="边框线"></a>边框线</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>边框线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid blue<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 半径是宽高的一半，就是圆 */</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* border-bottom-width: 3px;                border-bottom-color: #0000FF;                border-bottom-style: solid; */</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">ul</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 设置列表编号类型 */</span>                <span class="token comment" spellcheck="true">/* list-style-type: circle; */</span>                <span class="token comment" spellcheck="true">/*                    取消列表的编号                 */</span>                <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素的分类"><a href="#元素的分类" class="headerlink" title="元素的分类"></a>元素的分类</h2><p>html元素分为行内元素、块级元素、行内块元素</p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul><li>不能设置宽高，宽高是包裹内容的</li><li>一行可以显示多个行内元素</li><li>常见的行内元素：span、a，em，strong, i, u, del</li></ul><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul><li>可以设置宽高。宽度默认独占一行，高度默认包裹内容</li><li>一行只能显示一个元素</li><li>常见的块级元素：div, body,p，h1~h6，ul，ol，li，pre</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul><li>可以设置宽高</li><li>一行可以显示多个行内块元素</li><li>常见的行内块元素： img、input</li></ul><h2 id="元素类型的转换"><a href="#元素类型的转换" class="headerlink" title="元素类型的转换"></a>元素类型的转换</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>元素的分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector"><span class="token id">#s1</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 转成块级元素 */</span>                <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token id">#s2</span></span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 转换成行内元素 */</span>                <span class="token comment" spellcheck="true">/* display: inline; */</span>                <span class="token comment" spellcheck="true">/*                 转换成行内块元素，                一行可以显示多个，元素之间默认有间距                 */</span>                <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> peru<span class="token punctuation">;</span>                <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>盒子模型不是html中的一个元素，也不是css的一个样式，而是对css中一组属性的形象化描述。</p><p>宽高、边框线、内边距、外边距就是盒子模型的形象化描述</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>盒子模型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                    盒子内容的宽高                  */</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">96</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">96</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> salmon<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    border会撑大盒子的大小                 */</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid blue<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                    padding表示盒子的内边距，盒子内容和盒子边框的距离                   padding: 1px 2px 3px 4px  上右下左的内边距                   padding: 1px 2px 3px;  上右下，左和右的值一样                   padding: 1px 2px; 上右，下和上一样，左和右的值一样                   padding: 1px; 上右下左都一样                 */</span>                <span class="token comment" spellcheck="true">/*                  padding会撑大盒子的大小                 */</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*                  margin盒子的外边距，盒子和盒子外其他内容之间的距离                 margin: 1px; 上右下左都一样                 */</span>                <span class="token comment" spellcheck="true">/*                  margin 不会撑大盒子的大小                 */</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid blue<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* css3的属性                 使用box-sizing: border-box;这个后                 宽高就是盒子的宽高，内容的宽高自动减少了                 */</span>                <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            div1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="盒子水平居中"><a href="#盒子水平居中" class="headerlink" title="盒子水平居中"></a>盒子水平居中</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>盒子水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                清除页面默认的外边距和内边距               0可以不带px单位             */</span>            <span class="token selector">*</span><span class="token punctuation">{</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 盒子水平居中 */</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css页面的布局"><a href="#css页面的布局" class="headerlink" title="css页面的布局"></a>css页面的布局</h2><p>css中页面的布局分为：标准流、浮动流、定位流</p><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>页面默认就是标准流，也就是从上到下，从左到右的显示布局</p><h3 id="浮动流"><a href="#浮动流" class="headerlink" title="浮动流"></a>浮动流</h3><p>浮动流是一种<strong>脱离标准流</strong>的<strong>水平布局</strong>方式</p>]]></content>
      
      
      
        <tags>
            
            <tag> CSS学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2022/08/23/jQuery/"/>
      <url>/2022/08/23/jQuery/</url>
      
        <content type="html"><![CDATA[<h1><center> jQuery</center><hr><h2 id="jQuery是对JavaScript的封装，是一个JavaScript函数库。"><a href="#jQuery是对JavaScript的封装，是一个JavaScript函数库。" class="headerlink" title="jQuery是对JavaScript的封装，是一个JavaScript函数库。"></a>jQuery是对JavaScript的封装，是一个JavaScript函数库。</h2><p>jQuery是一个快速、小巧、功能丰富的JavaScript库。它通过一个易于使用的、可跨多种浏览器工作的API，使HTML文档遍历和操作、事件处理、动画和Ajax等工作变得更加简单。 </p><h2 id="下载jQuery库"><a href="#下载jQuery库" class="headerlink" title="下载jQuery库"></a>下载jQuery库</h2><p><a href="https://jquery.com/download/">https://jquery.com/download/</a></p><p>开发环境中使用未压缩的版本；生产环境使用压缩版本</p><h2 id="编写第一个jQuery代码"><a href="#编写第一个jQuery代码" class="headerlink" title="编写第一个jQuery代码"></a>编写第一个jQuery代码</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>初步使用jQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 使用外链式将jquery引入 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">// 获取元素的前提是:页面加载完成</span>            <span class="token comment" spellcheck="true">// 页面加载完成也是会触发事件的</span>            <span class="token comment" spellcheck="true">// document 是js中的dom对象</span>            <span class="token comment" spellcheck="true">// $(document) 是jquery对象</span>            <span class="token comment" spellcheck="true">/*              ready(fn):             当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。             简单地说，这个方法纯粹是对向window.load事件注册事件的替代方法             请确保在 &lt;body> 元素的onload事件中没有注册函数，否则不会触发+$(document).ready()事件。             可以在同一个页面中无限次地使用$(document).ready()事件。             其中注册的函数会按照（代码中的）先后顺序依次执行。             */</span><span class="token comment" spellcheck="true">// $(document).ready(function(){</span><span class="token comment" spellcheck="true">// $("p").text("你好");</span><span class="token comment" spellcheck="true">// })</span>            <span class="token comment" spellcheck="true">// $(document).ready 可以简写如下</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"你好啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a><strong>jQuery 语法</strong></h2><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <code>$(selector).action()</code></p><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><ul><li>通配符选择器</li><li>类选择器</li><li>id选择器</li><li>标签选择器</li><li>并集选择器</li><li>交集选择器</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>基础选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通配符选择器: 文字大小统一设置成 50px</span>                <span class="token comment" spellcheck="true">// jquery是封装的js函数库.也就是jquery中操作js的属性也是通过调用函数</span>                <span class="token comment" spellcheck="true">// css()函数对应js中的style属性</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">,</span><span class="token string">"50px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 标签选择器:将文件的颜色统一设置成红色</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 类选择器: 将文本内容修改成 你好</span>                <span class="token comment" spellcheck="true">// text()函数对应js中的innerText属性</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".c1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// id选择器: 将文本内容修改成 一级标题的 hello</span>                <span class="token comment" spellcheck="true">// html()函数对应js中的innerHTML属性</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#p3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>hello&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 并集选择器: 将p和span的文字添加下划线</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p,span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"text-decoration"</span><span class="token punctuation">,</span><span class="token string">"underline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ul><li>子代选择器（“parent &gt; child”）</li><li>后代选择器  (“ancestor descendant”)</li><li>相邻兄弟选择器 (“prev + next”)</li><li>通用兄弟选择器 (“prev ~ next-siblings”)</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>层级选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子代选择器</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav>li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">,</span> <span class="token string">"3px solid red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 后代选择器</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">,</span> <span class="token string">"3px solid blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 相邻兄弟选择器</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav+div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">,</span> <span class="token string">"3px solid green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 通用兄弟选择器</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav~div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">,</span> <span class="token string">"3px solid pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            div0        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 2                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Nested item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Nested item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Nested item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            div1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            div2        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li><p>[属性名]</p></li><li><p>[属性名&#x3D;“属性值”]</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery-3.6.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//页面加载完成</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//控件名[属性名='属性值']</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[name='n1']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//控件名[属性名]</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>老大：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>老二：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>老三：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><p><a href="https://api.jquery.com/category/selectors/form-selectors/">https://api.jquery.com/category/selectors/form-selectors/</a></p><ul><li>:button  选择所有的button元素和类型是button的元素</li><li>:input   选择所有的input、textarea、select、button元素</li><li>val()函数，表示获取其value值的 函数 ,一般应用在表单中,不传入参数，表示获取，如果传入参数，表示设置</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>表单选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础过滤器"><a href="#基础过滤器" class="headerlink" title="基础过滤器"></a>基础过滤器</h3><p>需要配合选择器一起使用，索引从0开始</p><ul><li>元素名:eq(n)  选择索引等于n的指定元素</li><li>元素名:gt(n)  选择索引大于n的指定元素</li><li>元素名:lt(n)  选择索引小于n的指定元素</li><li>元素名:even() 选择索引是偶数的指定元素</li><li>元素名:odd() 选择索引是奇数的指定元素</li><li>元素名:first() 选择指定元素的第一个</li><li>元素名:last() 选择指定元素的最后一个</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>基础过滤器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 索引从0开始</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:eq(2)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:even()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:last()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:first()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h3><p>子元素过滤器一般配合子代或者后代选择器使用</p><ul><li>first-child:  选择所有子元素中的第一个子元素</li><li>nth-child(n):  选择所有子元素中的第n个子元素</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>子元素过滤器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* 选择ul下的第一个li */</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul>li:first-child"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 选择第几个子元素</span>                <span class="token comment" spellcheck="true">// 2n表示第偶数个</span>                <span class="token comment" spellcheck="true">// 2n+1 表示第奇数个</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul>li:nth-child(2n+1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM对象和jQuery对象转换"><a href="#DOM对象和jQuery对象转换" class="headerlink" title="DOM对象和jQuery对象转换"></a>DOM对象和jQuery对象转换</h2><p>DOM对象的属性和函数，jQuery对象是不能使用的</p><p>jQuery对象的函数和属性，DOM对象是不能使用的。</p><h3 id="DOM对象转jQuery对象"><a href="#DOM对象转jQuery对象" class="headerlink" title="DOM对象转jQuery对象"></a>DOM对象转jQuery对象</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>DOM对象<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="jQuery对象转DOM对象"><a href="#jQuery对象转DOM对象" class="headerlink" title="jQuery对象转DOM对象"></a>jQuery对象转DOM对象</h3><p>jQuery对象是一个伪数组，里面的元素是DOM对象，所以使用索引就可以将jQuery对象转DOM对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>DOM对象<span class="token punctuation">)</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span>或者：<span class="token function">$</span><span class="token punctuation">(</span>DOM对象<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>索引<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><ul><li>单击事件和鼠标事件</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jQuery事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 单击事件</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// text()没有传参就表示取值</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 鼠标进入事件</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将jQuery对象转成DOM对象,使用DOM对象的属性来实现</span>                    <span class="token comment" spellcheck="true">// $(this)[0].className ="c2";</span>                    <span class="token comment" spellcheck="true">// $(this).addClass("c2");</span>                    <span class="token comment" spellcheck="true">// toggleClass() 类不存在就添加,类存在就删除</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"c2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 鼠标离开事件</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// $(this).removeClass("c2");</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"c2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>hover事件</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hover事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div </span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c1</span> </span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c2</span> </span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                   hover([over,]out)：                   over:鼠标移到元素上要触发的函数                   out:鼠标移出元素要触发的函数                 */</span>                <span class="token comment" spellcheck="true">// $("div").hover(function(){</span>                <span class="token comment" spellcheck="true">// $(this).toggleClass("c2");</span>                <span class="token comment" spellcheck="true">// }, function(){</span>                <span class="token comment" spellcheck="true">// $(this).toggleClass("c2");</span>                <span class="token comment" spellcheck="true">// })</span>                <span class="token comment" spellcheck="true">// 鼠标进入和离开的代码是一样的,所以可以只写一个函数</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"c2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>on和off绑定和解绑事件</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件绑定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// on(events,[selector],[data],fn)</span>                <span class="token comment" spellcheck="true">/*                 事件绑定： 这里是给每一个li标签绑定了一个单击事件                有多少个li标签就绑定了多少个单击事件                                $("ul>li").on("click",function(){                    console.log($(this).text());                })                */</span>                                <span class="token comment" spellcheck="true">/*                  事件委托: 现在将事件绑定到ul标签上                 li的单击事件会委托给ul上的单击事件处理                 */</span>                 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// off(events,[selector],[fn])</span>                <span class="token comment" spellcheck="true">// 事件解绑</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>事件自动触发-trigger和triggerHandler</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>trigger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c1</span></span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.c2</span></span><span class="token punctuation">{</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> deepskyblue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"c2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div被点击了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 自动触发单击事件</span>                <span class="token comment" spellcheck="true">// 方式一: 手动调用单击事件函数</span>                <span class="token comment" spellcheck="true">// $("div").click();</span>                <span class="token comment" spellcheck="true">// 方式二</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>trigger不会阻止默认行为和事件冒泡</p><p> triggerHandler会阻止默认行为和阻止事件冒泡</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>trigger不会阻止默认行为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// trigger不会阻止默认行为和事件冒泡</span>                <span class="token comment" spellcheck="true">// $("#btn").trigger("click");</span>                <span class="token comment" spellcheck="true">// triggerHandler会阻止默认行为和阻止事件冒泡</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            账号：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="jQuery操作html元素的相关API"><a href="#jQuery操作html元素的相关API" class="headerlink" title="jQuery操作html元素的相关API"></a>jQuery操作html元素的相关API</h2><h3 id="获取内容：text-、html-以及-val"><a href="#获取内容：text-、html-以及-val" class="headerlink" title="获取内容：text()、html() 以及 val()"></a>获取内容：text()、html() 以及 val()</h3><p>text() 获取元素的文本内容和设置元素的文本内容，对应js的innerText属性</p><p>text()不传参数就是获取内容；传入参数就是设置内容</p><p>html() 获取元素的文本内容及文本标签和设置元素的文本内容，对应js的innerHTML属性</p><p>val() 获取元素的value属性值和设置元素的value属性值  – 对应js中的value属性</p><h3 id="获取属性：attr-和prop"><a href="#获取属性：attr-和prop" class="headerlink" title="获取属性：attr()和prop()"></a>获取属性：attr()和prop()</h3><p>attr()可以操作自有属性和自定义属性</p><p>prop()只能操作自有属性，不能操作自定义属性</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>attr()和prop()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置name属性</span>                <span class="token comment" spellcheck="true">// $("input").attr("value","张三");</span>                <span class="token comment" spellcheck="true">// $("input").prop("value","张三");</span>                                <span class="token comment" spellcheck="true">// attr可以设置自定义属性</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// prop不能设置自定义属性</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"yyy"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 获取属性</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 获取自定义属性</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 不能获取自定义属性</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// undefined</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">my</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="内部添加"><a href="#内部添加" class="headerlink" title="内部添加"></a>内部添加</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>内部添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// append内部追加: 将span添加到div内部</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;span>你好&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// appendTo: 追加到</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>你好啊啊&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 向每个匹配的元素内部前置内容。</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;p>段落0&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// prependTo 添加到xxx的前面</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>你好啊啊000&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外部添加"><a href="#外部添加" class="headerlink" title="外部添加"></a>外部添加</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>外部添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 外部添加:添加的元素p和div是平级的</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"&lt;p>段落2&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"&lt;p>段落0&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>删除元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// empty() 删除匹配的元素集合中所有的子节点。</span>                <span class="token comment" spellcheck="true">// 删除子元素</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从DOM中删除所有匹配的元素。</span>                <span class="token comment" spellcheck="true">// 删除自身及子元素</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#d2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="css类"><a href="#css类" class="headerlink" title="css类"></a>css类</h3><ul><li>addClass(class): 为每个匹配的元素添加指定的类名。</li><li>removeClass(class):为每个匹配的元素删除指定的类名。</li><li>toggleClass(class)： 类不存在就添加，存在就删除</li></ul><p>addClass(class)可以为元素添加class属性；attr(“class”,”类名”)也可以给元素添加class属性，两者有啥区别？</p><p>addClass(class)不会覆盖已有的类型，而是在已有类名的基础上增加新的类型</p><p>attr(“class”,”类名”)  会覆盖已有的类型，没有类名就是添加类名</p><h3 id="css-方法"><a href="#css-方法" class="headerlink" title="css()方法"></a>css()方法</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css()方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">p</span><span class="token punctuation">{</span>                <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置css样式: 需要给属性赋值</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">,</span><span class="token string">"30px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取css样式: 只有属性名</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 设置多个css</span>                <span class="token comment" spellcheck="true">// css的属性有特殊符号,引号不能省略</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token string">"text-decoration"</span><span class="token punctuation">:</span><span class="token string">"underline"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery元素遍历"><a href="#jQuery元素遍历" class="headerlink" title="jQuery元素遍历"></a>jQuery元素遍历</h2><p>jQuery中除了选择器以外，还提供了类似功能的函数来选择元素</p><h3 id="查找祖先元素"><a href="#查找祖先元素" class="headerlink" title="查找祖先元素"></a>查找祖先元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>元素查找<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// parent([expr]): 查找元素的父元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// parents([expr]):获取匹配元素的祖先元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// parents([expr]):获取匹配元素的指定的祖先元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parents</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// parentsUntil([expr|element][,filter]) </span>                <span class="token comment" spellcheck="true">// 查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。不包含指定的父辈元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parentsUntil</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找后代元素"><a href="#查找后代元素" class="headerlink" title="查找后代元素"></a>查找后代元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>元素查找<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// children([expr]): 查找子元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#d2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// find(expr|obj|ele): 查找指定的子子孙孙</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#d2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                        Hello01                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                    Hello02                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找兄弟元素"><a href="#查找兄弟元素" class="headerlink" title="查找兄弟元素"></a>查找兄弟元素</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>元素查找<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// siblings([expr]): 查找兄弟姐妹元素,可以从前和从后查找</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// var $ele = $("div").siblings("p");</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// next([expr]):每一个元素紧邻的后面同辈元素的元素集合。</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// nextAll([expr]): 查找当前元素之后所有的同辈元素。</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// nextUntil([exp|ele][,fil]):查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止。</span>                <span class="token comment" spellcheck="true">// 不包含指定的兄弟元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextUntil</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                Hello00            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                    Hello                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                Hello01            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>过滤<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// first():获取第一个元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                $ele<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//last():获取最后一个元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                $ele<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// eq(index|-index): 过滤等于index索引的元素</span>                <span class="token comment" spellcheck="true">// index 一个整数，指示元素基于0的位置,这个元素的位置是从0算起。</span>                <span class="token comment" spellcheck="true">// -index 一个整数，指示元素的位置，从集合中的最后一个元素开始倒数。(-1算起)</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                $ele<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// filter(expr|obj|ele|fn):筛选出与指定表达式匹配的元素集合。</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">".c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                $ele<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// not(expr|ele|fn):从匹配元素的集合中删除与指定表达式匹配的元素</span>                <span class="token comment" spellcheck="true">// html中元素还在,只是删除了匹配元素的集合中的元素</span>                <span class="token keyword">var</span> $ele <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">".c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello Again<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="serializeArray-与serialize"><a href="#serializeArray-与serialize" class="headerlink" title="serializeArray()与serialize()"></a>serializeArray()与serialize()</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>serializeArray()与serialize()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// serialize()：作用是将表单的参数和参数值拼接成一个完整的请求参数</span>                    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#info"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// username=zhangsan&amp;pwd=123456</span>                    <span class="token comment" spellcheck="true">/*                      serializeArray() 返回的是一个json数组，格式是：                     [                         {                             name:"username",                             value:"zhangsan"                         },                         {                         name:"pwd",                         value:"123456"                         }                     ]                     */</span>                    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#info"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            账号：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            密码：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历：each-和-each"><a href="#遍历：each-和-each" class="headerlink" title="遍历：each()和$.each()"></a>遍历：each()和$.each()</h2><p>each(callback)：只能遍历jQuery对象</p><p>$.each()可以遍历任意对象（jQuery对象、dom对象、自定义对象）和数组</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>each()和$.each()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery-3.6.0.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// each(callback) : 以每一个匹配的元素作为上下文来执行一个函数。</span>                <span class="token comment" spellcheck="true">// each(callback)：只能遍历jQuery对象</span>                <span class="token comment" spellcheck="true">/* $("img").each(function(index){                    console.log(index);                    this.src = "image/mm0"+(index+1)+".webp";                }) */</span>                                <span class="token comment" spellcheck="true">// $.each(object, [callback])</span>                <span class="token comment" spellcheck="true">// 在jQuery中$就表示jQuery</span>                                <span class="token comment" spellcheck="true">/*                  // $.each 可以变量jquery对象                                  $.each($("img"),function(index){                 this.src = "image/mm0"+(index+1)+".webp";                 })                 */</span>                <span class="token comment" spellcheck="true">/*                  // $.each 可以遍历DOM对象                 var ele = document.getElementsByTagName("img");                 $.each(ele,function(index){                    this.src = "image/mm0"+(index+1)+".webp";                }) */</span>                                <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">20</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/* // $.each 可以遍历对象                $.each(stu,function(prop){                    console.log(stu[prop]);                }) */</span>                                                <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// $.each 可以遍历数组</span>                $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jQuery学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/08/23/JavaScript/"/>
      <url>/2022/08/23/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1><center> JavaScript</center><h2 id="JavaScript的概述"><a href="#JavaScript的概述" class="headerlink" title="JavaScript的概述"></a>JavaScript的概述</h2><p>JavaScript ，它包含了三大部分：<strong>ECMAScript</strong>、<strong>DOM</strong>、<strong>BOM</strong></p><ul><li>ECMAScript：ECMAScript是JavaScript这门语言的核心组成，是这门语言的精髓所在。规定了语法格式</li><li>DOM：文档对象模型(document object model)。我们知道标签的嵌套，就产生了父子关系，而DOM，提供了大量的API，让我们可以轻松操作DOM树。使用DOM，我们能动态修改页面内容，调整样式等等，这也是JS多样化的一个体现。</li><li>BOM：浏览器对象模型(brower object model)。和DOM类似，只不过主体变成了浏览器。浏览器同样提供了大量的API，其中部分对JS开放，为我们提供了操作浏览器窗口的方法。</li></ul><p>JavaScript是脚本语言，也就是说js属于编程语言。</p><p>JavaScript是一种基于对象的语言。</p><p>脚本语言：也就说js是不需要编译就可以直接执行了。js是浏览器解析的，每个浏览器中都有js解析器。</p><h2 id="JavaScript书写位置"><a href="#JavaScript书写位置" class="headerlink" title="JavaScript书写位置"></a>JavaScript书写位置</h2><p><strong>base.js:</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是外来的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>JavaScript书写位置<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 单行注释</span>            <span class="token comment" spellcheck="true">/* 多行注释 */</span>            <span class="token comment" spellcheck="true">// 嵌入式</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>h5版本的HTML中 ，type <span class="token operator">=</span> <span class="token string">"text/javaScript"</span> 可以省略<span class="token operator">--</span><span class="token operator">></span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你来了，老弟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>            外链式是通过script标签的src属性引入的           注意：外链式的script标签中不能再编写js代码，不许使用单标签           优点：解耦了，好维护           缺点：可读性差         <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/base.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 行内式             理解：直接把事件添加在button控件上           优点：简便，快捷，一目了然            缺点：复用性差            单引号和双引号都是字符串            <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p onclick<span class="token operator">=</span><span class="token string">"alert('还真的点啊');"</span><span class="token operator">></span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript输出"><a href="#JavaScript输出" class="headerlink" title="JavaScript输出"></a>JavaScript输出</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>JavaScript输出<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 控制台输出</span>            <span class="token comment" spellcheck="true">// js中字符串可以使用单双引号,推荐使用单引号</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 输出到html页面</span>            <span class="token comment" spellcheck="true">// html页面在js中就是文档对象</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>hello,javascript&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="variable变量"><a href="#variable变量" class="headerlink" title="variable变量"></a>variable变量</h2><h3 id="声明变量和初始化"><a href="#声明变量和初始化" class="headerlink" title="声明变量和初始化"></a>声明变量和初始化</h3><ul><li>变量名必须以字母(包含大小写字母)、下划线(_)、$和数字组成，变量不能以数字开头；</li><li>不能使用JavaScript中的关键字作为变量名(var、true等)；</li><li>JavaScript变量名是严格区分大小写的；  wangErMaZi</li><li>变量命名使用“小驼峰”命名法则，第一个单词首字母小写，第二个单词起首字母大写，例如userName。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>声明变量和初始化<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明变量</span>            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 变量初始化</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明变量的同时初始化</span>            <span class="token comment" spellcheck="true">/*            typeof 变量：表示查看变量的真实数据类型                        基本数据类型：                number、boolean、undefined(无法确定真实类型)、null、String                            引用数据类型：                Array(数组),Function(函数),Object(对象),Date            */</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>js是弱类型的语言，变量是没有数据类型，变量值才有数据类型。所以变量的数据类型由值决定。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>数据类型<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 变量a的数据类型由值决定</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>            a <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript中的数据类型分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p>基本数据类型: number、boolean、undefined、null、string</p><p>引用数据类型: Object(Array, Function, Object, Date等)，后续再讲。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>基本数据类型<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">/*               number数值类型：                 包含：整数型、浮点型、NaN(not a number)和Infinity（正负无穷大）              */</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// boolean: 布尔类型，布尔类型只有两个值：true 和 false</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b= "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// undefined类型只有一个值，就是undefined</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> undefined<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c= "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 只声明变量不初始化,结果就是undefined</span>            <span class="token keyword">var</span> d<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d= "</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*             string类型就是字符串，在JavaScript语言中，使用单引号或双引号包裹的内容，我们都称之为字符串。              */</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"s= "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// null类型</span>            <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n= "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为null表示的是一个空对象的指针，所以使用typeof操作符检测null会返回object的原因。</p><p>本质上这是一个bug，因为当初设计JavaScript这门语言的时候比较仓促，后来发现的时候已经好多开发者在使用了，如果修改这个bug对原有项目的代码改动极大，所以就只能将错就错了。</p><h2 id="表达式与运算符"><a href="#表达式与运算符" class="headerlink" title="表达式与运算符"></a>表达式与运算符</h2><ul><li><p>算数运算符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>运算符<span class="token number">01</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 算术运算符</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>            <span class="token comment" spellcheck="true">// +遇到字符串就是拼接符</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 11</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1,null转换成0</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>                        <span class="token comment" spellcheck="true">// +号和-号的特殊作用,可以做类型转换</span>            <span class="token comment" spellcheck="true">// 在数字类型的字符串前面使用+,就会将字符串转数字</span>            <span class="token comment" spellcheck="true">// -号会改变正负,所以一般不会使用</span>            <span class="token comment" spellcheck="true">// 注意: +"123"前不能添加其他内容</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">"123"</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 其他符号（* / % ++ --）和java一样</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>赋值运算符</p><p>执行结果和java的一样</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    a<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件运算符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// == 只会比较内容,不会判断类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// === 不仅仅比较内容,还会比较类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>    <span class="token comment" spellcheck="true">// != 只会比较内容,不会判断类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    <span class="token comment" spellcheck="true">// !== 不仅仅比较内容,还会比较类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>逻辑运算符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// &amp;&amp; 短路与  || 短路或  ! 逻辑非</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>三目运算符</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// 接收用户输入的年龄,进行判断</span>    var age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 数字类型的字符串做比较,会转成数值类型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"该淘汰了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"该工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"未成年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swith语句"><a href="#swith语句" class="headerlink" title="swith语句"></a>swith语句</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> season <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入季节："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> spring <span class="token operator">=</span> <span class="token string">'春'</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// js中case后面可以使用变量</span>        <span class="token keyword">case</span> spring<span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"春眠不觉晓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'夏'</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"处处蚊子咬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'秋'</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"打上敌敌畏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'冬'</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不知死多少"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你输啥玩意儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// 在页面上输出九九乘法表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> i <span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// while循环输出1-10的偶数</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">// do...while循环输出1-10的偶数</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p>break终止整个循环，continue终止本次循环，进入下一次循环</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// break;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="格式一："><a href="#格式一：" class="headerlink" title="格式一："></a>格式一：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    函数体；    <span class="token punctuation">[</span><span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>自定义函数_格式一<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 定义函数</span>            <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>show<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于Syetem.out.println(student);输出对象内容信息</span>            <span class="token comment" spellcheck="true">// function是object类型,js是函数式编程</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> show<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// function</span>                        <span class="token comment" spellcheck="true">// 调用函数</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 形参是不能使用var修饰的</span>            <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a <span class="token operator">+</span><span class="token string">",b= "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用函数</span>            <span class="token comment" spellcheck="true">// 在js中实参列表和形参列表的数量不一致,是不会报错的</span>            <span class="token comment" spellcheck="true">// 没有实参赋值的形参就是undefined</span>            <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="格式二："><a href="#格式二：" class="headerlink" title="格式二："></a>格式二：</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     函数体；    <span class="token punctuation">[</span><span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>自定义函数_格式二<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置函数-数据类型转换函数"><a href="#内置函数-数据类型转换函数" class="headerlink" title="内置函数-数据类型转换函数"></a>内置函数-数据类型转换函数</h2><ul><li>Number(value)——把给定的值转换成数字(可以是整数或浮点数)</li><li>Boolean(value)——把给定的值转换成Boolean型</li><li>String(value)——把给定的值转换成字符串</li><li>parseInt(value) ——把String解析成整数</li><li>parseFloat(value) ——把String解析成number</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>内置函数<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 将字符串123转成数字</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'123a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4.140000000000001</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 没有实际内容的值转成boolean都是false</span>            <span class="token comment" spellcheck="true">// 0 "" null NaN undefined转成boolean都是false</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// String(value)将任意类型的数据转成String;也就是转成'value'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "NaN"</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'undefined'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'null'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [object Object]</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'true'</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// parseInt只能提取数字开头的字符串,不是数字开头的就是NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"a123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123.99"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 123</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// parseFloat只能提取数字开头的字符串,不是数字开头的就是NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.14</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 123</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.14</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"a3.14aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NaN</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置函数-编码和解码函数"><a href="#内置函数-编码和解码函数" class="headerlink" title="内置函数-编码和解码函数"></a>内置函数-编码和解码函数</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>内置函数<span class="token operator">-</span>编码和解码函数<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=%E6%89%8B%E6%9C%BA</span>            <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com?keyword=手机"</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 编码</span>            <span class="token keyword">var</span> encode <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// http://www.baidu.com?keyword=%E6%89%8B%E6%9C%BA</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 解码</span>            <span class="token keyword">var</span> decode <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// http://www.baidu.com?keyword=手机</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内置函数-isNaN"><a href="#内置函数-isNaN" class="headerlink" title="内置函数-isNaN"></a>内置函数-isNaN</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>内置函数<span class="token operator">-</span>isNaN<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// isNaN() 判断值是不是NaN类型</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h2><p>警告框     alert, 常用。</p><p>询问框     prompt返回提示框中的值。</p><p>确认框     confirm返回true&#x2F;false   。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>弹出框<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'来了，老弟'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回输入的值</span>            <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回boolean</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><h3 id="方式一-使用-表示对象"><a href="#方式一-使用-表示对象" class="headerlink" title="方式一:使用{}表示对象"></a>方式一:使用{}表示对象</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>自定义对象_方式一<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">/*                json：javascript对象表示法               所以js中定义对象使用json格式             */</span>            <span class="token comment" spellcheck="true">// var stu = {}</span>            <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// js中对象的属性可以使用引号,也可以不使用引号</span>                <span class="token comment" spellcheck="true">// 属性</span>                <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>                <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 方法</span>                study<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"好好学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用对象的属性和方法</span>            <span class="token comment" spellcheck="true">// 方式一: 使用点语法</span>            stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(stu.user.name);</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 方式二: 使用 对象[属性]</span>            <span class="token comment" spellcheck="true">// 如果属性名中有特殊符号就可以使用方式二</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二：使用new-Object"><a href="#方式二：使用new-Object" class="headerlink" title="方式二：使用new Object()"></a>方式二：使用new Object()</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>自定义对象_方式二<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 创建一个空对象,是没有定义属性和方法的</span>            <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 随意给空对象定义属性和方法</span>            stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃饭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上创建对象的两种方式都有一个很大的弊端：属性的值固定了，也就是只能创建一个对象，需要创建多个对象的话，属性和方法需要重复编写。如何解决?使用构造函数创建对象</p><h3 id="方式三：使用构造函数创建对象"><a href="#方式三：使用构造函数创建对象" class="headerlink" title="方式三：使用构造函数创建对象"></a>方式三：使用构造函数创建对象</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>自定义对象_方式三<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 构造函数的规范: 方法名首字母大写</span>            <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this不能省略</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> name<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 成员方法</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>eat<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃啥呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>            stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> 变量名 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里的变量名就是对象的成员名称</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>遍历对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>                sex<span class="token punctuation">:</span><span class="token string">'男'</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 遍历对象</span>            <span class="token comment" spellcheck="true">//遍历对象必须使用中括号</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> stu<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM对象-重中之重"><a href="#DOM对象-重中之重" class="headerlink" title="DOM对象-重中之重"></a>DOM对象-重中之重</h2><p>DOM: Document Object Model 文档对象模型</p><h3 id="HTML-DOM-树"><a href="#HTML-DOM-树" class="headerlink" title="HTML DOM 树"></a>HTML DOM 树</h3><p><img src="/JavaScript.assets/wps1.jpg" alt="img"></p><p>在js中将一个html页面当做一个文档对象：document对象</p><p>js将html中的标签、属性等也封装成了对应的DOM对象</p><p>所以操作DOM对象就是操作HTML页面</p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>DOM_获取元素<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>                    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>                             window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//页面加载完毕事件</span>                                <span class="token comment" spellcheck="true">// 通过id获取元素,返回的是元素的DOM对象  推荐使用</span>            <span class="token keyword">var</span> pELe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pELe<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> pELe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span>                        <span class="token comment" spellcheck="true">// 操作pEle对象就是操作id是p1的标签</span>            pELe<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'xyz'</span><span class="token punctuation">;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过类名获取元素,返回的是元素的DOM对象组成的数组</span>            <span class="token keyword">var</span> eles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eles<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过[索引]获取数组中的元素</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> eles<span class="token punctuation">)</span><span class="token punctuation">;</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过标签名称获取元素,返回的是元素的DOM对象组成的数组</span>            <span class="token keyword">var</span> eleList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eleList<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eleList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> eleList<span class="token punctuation">)</span><span class="token punctuation">;</span>                         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过name属性获取元素,返回的是元素的DOM对象组成的数组</span>            <span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token punctuation">}</span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"p1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c1"</span> name<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c1"</span><span class="token operator">></span>段落<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p name<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>段落<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>innerText和innerHTML<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>                        window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">var</span> divEle01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> divEle02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*              在js中  dom对象.属性=xxx 就是给属性赋值；               dom对象.属性 就是获取属性的值              */</span>            <span class="token comment" spellcheck="true">// 给元素添加文本内容</span>            <span class="token comment" spellcheck="true">// innerText所有内容当成普通字符串,不会识别html标签</span>            divEle01<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;h1>我爱你，中国&lt;/h1>'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// innerHTML 会识别html标签</span>            divEle02<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;h1>我爱你，中国&lt;/h1>'</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 获取元素的文本内容</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divEle01<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divEle02<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d2"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><blockquote><p><strong>在js中  dom对象.属性&#x3D;xxx 就是给属性赋值；</strong><br><strong>dom对象.属性 就是获取属性的值</strong></p></blockquote><h3 id="动态生成表格"><a href="#动态生成表格" class="headerlink" title="动态生成表格"></a>动态生成表格</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>动态生成表格<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            table<span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* 折叠边框线 */</span>                border<span class="token operator">-</span>collapse<span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>                margin<span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        table<span class="token punctuation">,</span>td<span class="token punctuation">,</span>th<span class="token punctuation">{</span>                border<span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>                text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>thead<span class="token operator">></span>                <span class="token operator">&lt;</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>年龄<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>性别<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>地址<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>            <span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>            <span class="token operator">&lt;</span>tfoot<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>tfoot<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> students <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>                    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>                    address<span class="token punctuation">:</span><span class="token string">"成都"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>                    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>                    address<span class="token punctuation">:</span><span class="token string">"北京"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">"韩梅梅"</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>                    sex<span class="token punctuation">:</span><span class="token string">'女'</span><span class="token punctuation">,</span>                    address<span class="token punctuation">:</span><span class="token string">"上海"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>                    sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>                    address<span class="token punctuation">:</span><span class="token string">"成都"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// 获取table</span>            <span class="token keyword">var</span> tbodyEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 数组的长度 = tr的数量</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> students<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建tr标签</span>                <span class="token keyword">var</span> trEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将tr标签添加到tbody中</span>                tbodyEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>trEle<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 数组中每个对象的属性数量 = td的数量</span>                <span class="token keyword">var</span> stu <span class="token operator">=</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> stu<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 创建td标签</span>                    <span class="token keyword">var</span> tdEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 给td设置文本内容</span>                    <span class="token comment" spellcheck="true">// td的文本内容 = 对象的属性值</span>                    tdEle<span class="token punctuation">.</span>innerText <span class="token operator">=</span> stu<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将td标签添加到tr中</span>                    trEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tdEle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h3><p>事件：就是和元素的交互行为</p><p><strong>事件三要素：</strong></p><p>事件主体：也就是和哪一个元素交互</p><p>事件类型：发生了什么类型的交互，比如说单击、鼠标按下</p><p>事件的功能：发生事件后需要完成什么功能</p><h4 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>DOM事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"p1"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> pEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*              pEle 事件主体             onclick  事件类型是click单击事件             onclick是click单击事件的句柄（引用）             onxxx 就是xxx事件的句柄，事件句柄是元素的属性             function()  事件功能             */</span>            pEle<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nihao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取焦点和失去焦点的事件"><a href="#获取焦点和失去焦点的事件" class="headerlink" title="获取焦点和失去焦点的事件"></a>获取焦点和失去焦点的事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>获取焦点和失去焦点的事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            #tip<span class="token punctuation">{</span>                font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>                color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">.</span>hidden<span class="token punctuation">{</span>                display<span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                display<span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">></span>            账号：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> id<span class="token operator">=</span><span class="token string">"account"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入5-8位名称"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"tip"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span>账号长度不正确<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">></span>            密码：            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">// 1. 获取账号的input</span>            <span class="token keyword">var</span> nameEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> tipEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2. 设置失去焦点的事件</span>            nameEle<span class="token punctuation">.</span>onblur <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 失去焦点后获取input的值进行判断</span>                <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">||</span> val<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// class是js中的关键字,表示类</span>                    <span class="token comment" spellcheck="true">// className就是标签的class属性</span>                    tipEle<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'show'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 3. 设置获取焦点事件</span>            nameEle<span class="token punctuation">.</span>onfocus <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tipEle<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>鼠标事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            div<span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 鼠标移到某元素之上。</span>            div<span class="token punctuation">.</span>onmouseenter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                div<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background-color: blue"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 鼠标从某元素移开。</span>            div<span class="token punctuation">.</span>onmouseleave <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                div<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background-color: red"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件的另一种写法"><a href="#事件的另一种写法" class="headerlink" title="事件的另一种写法"></a>事件的另一种写法</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>事件的另一种写法<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>p onclick<span class="token operator">=</span><span class="token string">"show();"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="event事件对象"><a href="#event事件对象" class="headerlink" title="event事件对象"></a>event事件对象</h4><p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p><p>注意： 每一个事件中都有event事件对象。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>event事件对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"p1"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的实参event名称不能乱写 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p onmousemove<span class="token operator">=</span><span class="token string">"show(event);"</span><span class="token operator">></span>段落<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> pEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这里的event仅仅是一个变量,可以是其他任意的名字</span>            pEle<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 返回当事件被触发时，鼠标指针的水平和垂直坐标。</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX <span class="token operator">+</span><span class="token string">"--"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                                    <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX <span class="token operator">+</span><span class="token string">"--"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="阻止事件的默认行为"><a href="#阻止事件的默认行为" class="headerlink" title="阻止事件的默认行为"></a>阻止事件的默认行为</h4><ul><li><strong>补充</strong>：在标签中添加，配置：JavaScript:void(0) &#x2F;&#x2F;超链接失效配置</li></ul><p>在html中，有些元素是自带事件的，比如 a标签、submit类型的按钮、reset类型的按钮</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>阻止事件的默认行为<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 点击超链接标签后控制台输出语句，不跳转页面 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> id<span class="token operator">=</span><span class="token string">"a1"</span><span class="token operator">></span>百度一下<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> aEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// a标签有默认的事件行为（跳转页面）,根据我们的需求需要阻止</span>            aEle<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 阻止默认行为</span>                <span class="token comment" spellcheck="true">// return false;</span>                <span class="token comment" spellcheck="true">// console.log(event.defaultPrevented); // false</span>                <span class="token comment" spellcheck="true">// 阻止默认行为</span>                <span class="token keyword">return</span> event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>父元素和子元素都绑定了事件，此时触发子元素的事件，父元素的事件也被触发，这就是子元素的事件向上</p><p>传播给了父元素，造成父元素的事件也被触发了，这叫做事件冒泡。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>阻止事件冒泡<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            #d1 <span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            #d2 <span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>                height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d2"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> d1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> d2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fu-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        d2<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"zi-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 阻止事件冒泡</span>                event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全选案例"><a href="#全选案例" class="headerlink" title="全选案例"></a>全选案例</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>全选案例<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            table<span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                margin<span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        table<span class="token punctuation">,</span>th<span class="token punctuation">,</span>td<span class="token punctuation">{</span>                border<span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>                border<span class="token operator">-</span>collapse<span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>                text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>table<span class="token operator">></span>            <span class="token operator">&lt;</span>thead<span class="token operator">></span>                <span class="token operator">&lt;</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>学号<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>年龄<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                    <span class="token operator">&lt;</span>th<span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span>  id<span class="token operator">=</span><span class="token string">"all"</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span>            <span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1001</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>张三<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1002</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>李四<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">21</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1003</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>王五<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">23</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>                <span class="token operator">&lt;</span>tr<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1004</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>李磊<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                    <span class="token operator">&lt;</span>td<span class="token operator">></span>                        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span>                <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用来统计每一行被选中的个数</span>            <span class="token comment" spellcheck="true">// 全选按钮 联动 每一行的按钮</span>            <span class="token comment" spellcheck="true">// 1. 获取全选按钮</span>            <span class="token keyword">var</span> all <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取tbody中的input</span>            <span class="token keyword">var</span> inputList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2. 给全选按钮设置单击事件</span>            all<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 3. 获取全选按钮的状态</span>                <span class="token keyword">var</span> allState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>allState<span class="token punctuation">)</span><span class="token punctuation">{</span>                    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 4. 每一行的按钮的状态和全选按钮的状态一致</span>                <span class="token comment" spellcheck="true">// 4.1 获取每一行的按钮</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 获取每一行的按钮,设置状态和全选按钮的状态一致</span>                    inputList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> allState<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//每一行的按钮 联动 全选按钮 </span>            <span class="token comment" spellcheck="true">// 1. 给每一行的按钮添加单击事件</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取每一行的按钮,添加单击事件</span>                inputList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">{</span>                        count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        count<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                                        <span class="token comment" spellcheck="true">// 判断count和 inputList.length是否相等</span>                    <span class="token comment" spellcheck="true">// 相等就说明每一行的按钮都选中了</span>                    all<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> inputList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JS常用对象"><a href="#JS常用对象" class="headerlink" title="JS常用对象"></a>JS常用对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>常用对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">884545786457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2022-10-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// document.write(date.toLocaleString());</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -3</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -3</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -4</span>                        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// var arr01 = new Array(); // 定义一个长度为0的数组</span>            <span class="token comment" spellcheck="true">// var arr01 = new Array(3);// 定义一个长度为3的数组</span>            <span class="token keyword">var</span> arr01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个初始值为1,2,3的数组</span>            <span class="token comment" spellcheck="true">// js中的数组会自动扩容</span>            arr01<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            arr01<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加元素</span>            arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr01<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除最后一个元素</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BOM对象-熟悉"><a href="#BOM对象-熟悉" class="headerlink" title="BOM对象-熟悉"></a>BOM对象-熟悉</h2><p>BOM: (Browser Object Model)浏览器对象模型</p><p>浏览器在js中对应BOM对象。</p><p>BOM包含DOM对象</p><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>window对象代表了整个浏览器窗口</p><blockquote><p>所有浏览器都支持 window 对象。它表示浏览器窗口。</p><p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p><p>全局变量是 window 对象的属性。</p><p>全局函数是 window 对象的方法。 window.alert()&#x2F;prompt()&#x2F;confirm()</p><p>甚至 HTML DOM 的 document 也是 window 对象的属性之一：</p><p>window.document.getElementById(“header”);</p><p>与下面的代码相同：</p><p>document.getElementById(“header”);</p></blockquote><h3 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h3><p><img src="/JavaScript.assets/wps2.jpg" alt="img"></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Location对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"show();"</span><span class="token operator">></span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>           <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// http://127.0.0.1:8848/JSDemo/39-Location%E5%AF%B9%E8%B1%A1.html?username=zhangsan&amp;pwd=123456</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"protocol="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http:</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"host="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 127.0.0.1:8848</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"port="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 8848</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pathname="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// /JSDemo/39-Location%E5%AF%B9%E8%B1%.html?username=zhangsan&amp;pwd=123456</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"search="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ?username=zhangsan&amp;pwd=123456</span>                                 <span class="token comment" spellcheck="true">// 跳转到百度</span>               <span class="token comment" spellcheck="true">// window.location.href = 'http://www.baidu.com';</span>                <span class="token comment" spellcheck="true">// window.location.replace("http://www.bjpowernode.com")</span>                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"http://www.bjpowernode.com"</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h3><p>History对象01.html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>History对象01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40-History对象02.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>History对象02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>next();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前进<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调到下一个页面</span>                <span class="token comment" spellcheck="true">// history.forward();</span>                history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>History对象02.html</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>History对象<span class="token number">02</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"priv();"</span><span class="token operator">></span>回退<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">function</span> <span class="token function">priv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 返回上一个页面</span>                <span class="token comment" spellcheck="true">// history.back();</span>                history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>定时器<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>            <span class="token punctuation">.</span>c1 <span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                height<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token punctuation">.</span>c2 <span class="token punctuation">{</span>                width<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                height<span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                background<span class="token operator">-</span>color<span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// div -- 2秒后变成蓝色</span>            <span class="token comment" spellcheck="true">// var code = setTimeout(function,time) 只会执行一次</span>            <span class="token comment" spellcheck="true">// setTimeout(function(){</span>            <span class="token comment" spellcheck="true">// div.className='c2';</span>            <span class="token comment" spellcheck="true">// },2000);</span>           <span class="token comment" spellcheck="true">// setInterval(function,time) 周期性执行一次</span>                       <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">{</span>                    div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'c2'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'c1'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                bool <span class="token operator">=</span> <span class="token operator">!</span>bool<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// clearTimeout()</span>            <span class="token comment" spellcheck="true">// 清除定时器</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h3><p>把JavaScript 字符串参数作为脚本代码来执行。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>eval函数<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"name":"张三","age":22,"sex":"male"}'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*               在js中{}除了表示对象外，还是代码块               所以这里直接将json传入eval中，eval函数将{}当做代码块解析              此时需要将 json使用（）括起来表示是一个值，这个值是对象             ｛｝：在json中表示对象             []:在json中表示数组             : ：在json中表示key和value,左边为k右边为v             "" :在json中表示字符串             , ：在json中表示分割属性，属性之间用逗号分割             */</span>            <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token operator">+</span>json<span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>意为本地会话存储:  值存储进去，如果浏览器关闭，那么这个值就没有了。</p><p>sessionStorage存储数据大小最多5M</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>sessionStorage<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span>  id<span class="token operator">=</span><span class="token string">"t1"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"save();"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"get();"</span><span class="token operator">></span>获取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"del();"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存储格式给 kv键值对</span>                sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                input<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>意为本地存储:值存储进去，如果浏览器不清空或者不调用它本身的删除方法，那么这个值会永久的存在客户端。</p><p>localStorage存储数据大小最多10M</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>localStorage<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span>  id<span class="token operator">=</span><span class="token string">"t1"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"save();"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"get();"</span><span class="token operator">></span>获取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"del();"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>            <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 存储格式给 kv键值对</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                input<span class="token punctuation">.</span>value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2022/08/23/HTML/"/>
      <url>/2022/08/23/HTML/</url>
      
        <content type="html"><![CDATA[<h1><center> HTML</center><h2 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h2><ul><li><p>C&#x2F;S架构（Client&#x2F;Server，客户端&#x2F;服务器模式）</p></li><li><p>QQ，360，idea，浏览器等都是C&#x2F;S架构</p></li><li><p>弊端：必须下载安装才能使用，更新需要重新安装</p></li><li><p>优点：界面效果更好，更方便将数据缓存在本地</p></li><li><p>B&#x2F;S架构（Browser&#x2F;Server，浏览器&#x2F;服务器模式）</p></li><li><p>京东、淘宝等都是B&#x2F;S架构</p></li><li><p>优点: 无需安装，只要有浏览器随时随地可以打开，更新用户可以实时看到</p></li><li><p>缺点：数据缓存没有cs方便</p></li></ul><p>  <strong>现在java开发更多的是B&#x2F;S架构结构的程序。</strong></p><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><ul><li>结构标准：HTML，负责页面的内容结构  – 人体</li><li>样式标准：CSS，负责页面的美化 – 给人化妆</li><li>行为标准：JavaScript，负责页面的交互 – 给人进行交互</li></ul><h2 id="HTML是什么"><a href="#HTML是什么" class="headerlink" title="HTML是什么"></a>HTML是什么</h2><p>HTML（Hyper Text Markup Language-EndFragment）: 超文本标记语言</p><p>文本：只能是字符串内容</p><p><strong>超文本：</strong>不仅仅是文本，还可以是音频、视频、图片</p><p><strong>标记语言：</strong>就是使用标签来表示语义，html中的标签都是内置好的，表达什么语义就使用什么标签</p><p>超文本也是文本，所以使用所有的文本软件都可以打开和编辑。那么音频、视频、图片用文本是怎么打开的呢？？？</p><p>注意：音频、视频、图片并不是真的将音频、视频、图片的数据添加进文本，而是使用表示音频、视频、图片的语义标签来引入音频、视频、图片的地址。</p><p><strong>所以学习HTML就是学习它的语义标签。</strong></p><p>html文件的扩展名是：<code>.html</code>或者<code>.htm</code></p><h2 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token comment" spellcheck="true">&lt;!-- !DOCTYPE html HTML5的文档声明 --></span><span class="token comment" spellcheck="true">&lt;!--  html 只能有且只有一个根标签html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        head是html页面的头       head是双标签     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--  meta 元数据标签           meta单标签         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 页面的关键字信息： 这是给搜索引擎使用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java,c,php<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>动力节点专业IT培训机构,一家只教java的培训机构<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 页面的标题 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>百度一下，以后啥也不知道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        身体：主体部分       页面的内容就编写在该标签中     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>          你干啥呢    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token comment" spellcheck="true">&lt;!-- !DOCTYPE html HTML5的文档声明 --></span><span class="token comment" spellcheck="true">&lt;!--  html 只能有且只有一个根标签html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        head是html页面的头       head是双标签     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--  meta 元数据标签           meta单标签         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 页面的关键字信息： 这是给搜索引擎使用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java,c,php<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>动力节点专业IT培训机构,一家只教java的培训机构<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 页面的标题 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>百度一下，以后啥也不知道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        身体：主体部分       页面的内容就编写在该标签中              bgcolor 背景颜色属性     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>skyblue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          你干啥呢    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="br和hr标签"><a href="#br和hr标签" class="headerlink" title="br和hr标签"></a>br和hr标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>br和hr标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            在html表达什么意思需要使用标签           br 换行标签         --></span>        床前明月光，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        疑是地上霜。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        举头望明月，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        低头思故乡。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!-- hr标签表示水平线 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="h1到h6的标题标签"><a href="#h1到h6的标题标签" class="headerlink" title="h1到h6的标题标签"></a>h1到h6的标题标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>h1到h6的标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--             h1到h6的标题标签 是body中内容的标题标签            文字大小和粗体是样式负责的，属于css的范畴。            但是h1到h6的标题标签自带默认样式，但是这些自带的样式都可以被css修改            所以h1到h6的标题标签的主要重要是标签的语义表示的权重不一样            h1的权重最大；h6的权重最小            权重是给搜索引擎使用的。                    一个页面最多一个h1标签，网站的logo需要使用h1         --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标题3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>标题4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>标题5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>标题6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="p段落标签和pre标签"><a href="#p段落标签和pre标签" class="headerlink" title="p段落标签和pre标签"></a>p段落标签和pre标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>p段落标签和pre标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            p标签是段落标签，段落是英文格式的         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            党的十八大以来，以习近平同志为核心的党中央，先后部署开展了党的群众路线教育实践活动、“三严三实”专题教育、“两学一做”学习教育、“不忘初心、牢记使命”主题教育、党史学习教育等5次党内集中学习教育，频度之密、力度之大、成效之显著，放眼百年党史都不多见。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            习近平总书记指出：“党的十八大以来，我们先后开展一系列集中学习教育，一个重要目的就是教育引导全党牢记中国共产党是什么、要干什么这个根本问题，始终保持党同人民的血肉联系。”        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            pre 是预格式标签，保留内容中的空格、换行等符号         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>            public static void main(String[] args){               System.out.println(1234);             }        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="格式标签"><a href="#格式标签" class="headerlink" title="格式标签"></a>格式标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>格式标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--           b标签是文字粗体标签，但是文字粗体根据web标准是属于css的范畴          所以文字粗体应该由css来控制。          所以在开发中b标签用来作为css的钩子使用         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--           i标签是文字斜体标签，但是文字斜体根据web标准是属于css的范畴          所以文字斜体应该由css来控制。          所以在开发中i标签用来作为css的钩子使用         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--           u标签是文字下划线标签，但是文字下划线根据web标准是属于css的范畴          所以文字下划线应该由css来控制。          所以在开发中u标签用来作为css的钩子使用         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--          strong也是粗体标签，但是比b的权重更大，语义的主要作用是表示强调         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--          em也是斜体标签，但是比i的权重更大，语义的主要作用是表示强调         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            del表示删除线，同样css可以控制         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            sup 标签：定义上标文本。         --></span>        <span class="token comment" spellcheck="true">&lt;!-- (a-b)²=a²-2ab+b² --></span>        (a-b)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>=a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>-2ab+b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            sub 标签：定义下标文本。         --></span>        log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>8    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="img图像标签"><a href="#img图像标签" class="headerlink" title="img图像标签"></a>img图像标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>img图像标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            img 图片标签           src属性表示图片的地址                      html中的资源的路径分为：           绝对路径：就是路径本身就能定位到资源             常见的绝对路径是： 文件系统的根路径开头、网络协议开头的地址             &lt;img src="D:\mm.gif" >           相对路径：就是路径本身无法定位资源，必须借助参照路径           参照路径：当前页面的路径                      绝对路径 = 参照路径 + 相对路径           参照路径: D:/course/03_Web/HTML/code/HtmlDemo/html/           相对路径: mv.webp           绝对路径: D:/course/03_Web/HTML/code/HtmlDemo/image/mm01.webp                      注意： 相对路径要求在同一个项目中的资源才能使用                      开发中需要使用相对路径           --></span>           <span class="token comment" spellcheck="true">&lt;!--              width="300px"  表示图片宽度为300像素             宽度和高度设置一个即可，另一个会按照比例缩放             width="50%" 表示图片宽度是页面宽度的50%                          title属性是鼠标停留在图片上显示的文字信息             alt属性是图片加载失败后显示的信息                         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../mvxx.webp<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>这是哪个美女<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>美女图片<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../image/mm01.webp<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="a超链接标签"><a href="#a超链接标签" class="headerlink" title="a超链接标签"></a>a超链接标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>a超链接标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            a标签表示超链接           href属性就是超链接需要链接的地址                      target 表示超链接打开的方式           target="_self" 表示在当前标签页打开           target="_blank" 表示在一个新的空白标签页中打开         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.126.com<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>126<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 这里的#仅仅是占位的，超链接点击后还是在当前页面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用a标签完成锚点功能"><a href="#使用a标签完成锚点功能" class="headerlink" title="使用a标签完成锚点功能"></a>使用a标签完成锚点功能</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>使用a标签完成锚点功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            给标签设置id,然后在a标签中使用#id就可以跳转到指定id的位置           这就是锚点功能         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="span标签和div标签"><a href="#span标签和div标签" class="headerlink" title="span标签和div标签"></a>span标签和div标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>span标签和div标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        我爱你，祖国        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--           文本内容使用span标签后，视觉效果没有任何的变化          span在这里仅仅是一个文本标签，主要是用来充当css的钩子         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我爱你，祖国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            div标签的作用是将整个页面分区           分区的作用是为了给不同的区域做不同的美化效果         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            div        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            html中的列表分为有序列表、无序列表、定义列表           有序列表：ordered list 简写为 ol标签           无序列表：unordered list 简写为 ul标签           列表项： list item 简写为 li标签         --></span>         <span class="token comment" spellcheck="true">&lt;!--           type="1" 表示列表编号类型是数字类型(默认类型)            还能设置为 A,a,I,i          --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--           type="默认值是实心圆" 表示列表项的符号        square：表示符号黑色方块        circle：空心圆          --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--             定义列表： definition list 简写为dl标签            定义列表由dl dt dd 组成            dt  definition title            dd  definition data             一个dl可以有多个dt             一个dt可以有多个dd          --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>四川省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>成都市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>绵阳市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>自贡市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>云南省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>昆明市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>玉溪市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>昭通市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="table表格标签"><a href="#table表格标签" class="headerlink" title="table表格标签"></a>table表格标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>table表格标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            table标签表示表格           表格的行 table row 简写成 tr标签           表头  table head 简写成 th标签           表格的数据   table data 简写成 td标签             caption 子标签， 表示 表格的标题         --></span>         <span class="token comment" spellcheck="true">&lt;!--           border="1px" 表示表格和单元格边框线为1px          width 表格的宽度          cellspacing="0px" 设置单元格的外边距为0px          cellpadding="0px" 设置单元格的内边距为0px          align="center" 设置对齐方式为水平居中对齐          --></span>                <span class="token comment" spellcheck="true">&lt;!--        理解内容： thead ，tbody ，tfoot  套上这些标签以后和存放他们的位置无关，          thead 用于显示在头部          tfoot 用远显示在底部        --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span>         <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span> 这是表格的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>lisi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>wangwu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格合并行和列"><a href="#表格合并行和列" class="headerlink" title="表格合并行和列"></a>表格合并行和列</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>合并行和列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            html页面默认是从上到下，从左到右显示的         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--              rowspan="2" 表示合并两行，也就是该单元格占据两行的位置             --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--               colspan="2" 表示合并2列，也就是该单元格占据两列的空间             --></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>表单标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--            form表示表示表单标签           表单的作用就是用来收集用户信息，然后将信息提交到指定路径           action="" 该属性就是提交信息的路径地址           method="get" 表示数据提交的方式是 get/post                get方式：参数 是展现在地址栏中的                post方式：参数 是在请求体中的            enctype 数据传递给后台的数据编码方式                  application/x-www-form-urlencoded  默认是这种编码 (urlencoded) , 大多数表单提交都是采用这种编码                 multipart/form-data 把数据转换成流 (只有一种场景会使用，文件上传的时候)                  text/plain 提交的表单数据 ，不做任何的处理 (不使用)         --></span>                <span class="token comment" spellcheck="true">&lt;!--            type 输入框的类型，总结：                1.submit  提交请求的按钮 ,点击 提交按钮，就会把表单中的数据提交给 action 中的地址对应服务器                  2.text  普通文本 ，（明文显示）                 3.password 密码 （密文显示）                  4.radio  单选按钮 （让单选有效果，name 的值必须相同，value的值 默认是on，需要我们重置value             因为不重置，后台无法区分提交来的数据是男还是女）必须要给value 属性重新赋值 (一般都是用0和1表示)                 5.checked 属性 ，表示选中                 6.checkbox 多选按钮 (让多选按钮为一组，name 的值必须相同，由于value 的默认值为on             ，所以 也要重置value的值，让后台进行区分)                 7.hidden 隐藏域,把需要提交给后台且不需要显示出来的属性，使用隐藏域 ，隐藏起来                    8.file 文件上传 ，文件上传的时候需要 ，表单中有个文件上传的控件 (出现只有文件上传的时候 ，才会出现)                 reset 重置 表单内容            h5 提供的 类型              email 邮箱              number 数字              date   日期            注意：在type中 name 必须要设置的，它的作用是 提交表单中的数据的key 如果不给，数据提交不到后台        --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--                for="标签的id号"，此时点击该标签就会关联到id对应的元素上             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--                 type="text" 表示类型是明文的文本                placeholder="请输入账号" 占位符，也就是没有输入内容的时候显示的信息               name属性是提交数据到指定路径时的参数名称               比如之前我们学习的jdbc的url                jdbc:mysql:///db01?username=root&amp;password=123456                这里的username和password就是参数名称，也就是这里name属性的值             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwdId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwdId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            电话：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            生日：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            性别：            <span class="token comment" spellcheck="true">&lt;!--              type="radio" 表示单选按钮，单选按钮必须互斥              checked="checked" 表示被选中了，如果属性名和属性值一样，可以              只写属性名             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            头像：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userimg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            爱好：            <span class="token comment" spellcheck="true">&lt;!--                type="checkbox" 表示是复选框             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>抽烟            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>喝酒            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>烫头            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            地址：            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>四川省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>云南省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>贵州省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>成都市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>宜宾市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>昆明市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>锦江区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>武侯区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>青羊区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            备注：            <span class="token comment" spellcheck="true">&lt;!--               textarea 文本域，特点是内容可以换行             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--                 submit和reset类型的按钮，自带监听，也就说不需要使用js就可以点击交互                submit点击后默认行为就是提交数据                reset点击后默认行为就是清空数据                                                button类型的按钮必须配合js才能交互             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--                &lt;button>注册2&lt;/button> 默认的类型是submit             --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--select 下拉选， name 属性必须要提供，表示提交给后台的数据            multiple 属性 表示 支持多选            size 可见的长度大小            option 是子标签             value 属性是提交给后台的数据值, 如果不给则提交的是 option标签体的内容--></span>    常住地：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>place<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>东莞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="框架和实体字符"><a href="#框架和实体字符" class="headerlink" title="框架和实体字符"></a>框架和实体字符</h2><h3 id="frameset框架集"><a href="#frameset框架集" class="headerlink" title="frameset框架集"></a>frameset框架集</h3><p>frameset标签可定义一个框架集，在同一个浏览器窗口中被用来组织多个窗口（框架），每个窗口（框架）存有独立的HTML文档。<strong>在使用frameset时，不可以同时存在body标签，它和body标签是同级的。</strong></p><p>在HTML5当中，为了推进新的web前端开发模式，frameset布局将不再被推荐，但是使用它做为企业后台界面开发的还是非常多。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>框架集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        frameset不能和body同时存在       noresize="noresize" 不允许改变大小     --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10%,*<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.html<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20%,*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left.html<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>top.html:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>动力学生管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>left.html:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--          target="frame的name"  表示页面在指定的frame中打开         --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentManagment.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学员管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10-列表标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13-表单标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>班级管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内联框架-iframe"><a href="#内联框架-iframe" class="headerlink" title="内联框架-iframe"></a>内联框架-iframe</h3><p>iframe元素会创建包含另外一个文档的内联框架（即行内框架），用于一个网页中局域显示另外网页。<br>iframe是属于内联框架，它是body的子级，和body是父子关系。<br>iframe作为一个普通元素放在body里，而frameset是代替了body元素。<br>scrolling&#x3D;”yes&#x2F;no” 规定是否在框架中显示滚动条。</p><p>iframe标签属性：</p><ol><li><p>width 可设置内联框架的宽</p></li><li><p>height 可设置内联框架的高</p></li><li><p>name 设置框架名称</p></li><li><p>src 设置页面的路径</p></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>内联框架-iframe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10-列表标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10-列表标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>800px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h3><p>HTML 中的预留字符必须被替换为字符实体，在 HTML 中，某些字符是预留的。</p><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p><p><img src="/HTML.assets%5C1656323117746.png" alt="1656323117746"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>实体字符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        我们今天学习了<span class="token entity" title="&lt;">&amp;lt;</span>p<span class="token entity" title="&gt;">&amp;gt;</span>标签        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        你<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>好    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> HTML学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/08/22/MySQL%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/22/MySQL%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><center> MySQL</center><hr><h2 id="数据库的相关概念"><a href="#数据库的相关概念" class="headerlink" title="数据库的相关概念"></a>数据库的相关概念</h2><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ul><li>表达形式：多种表现形式：文本，图形，音频，视频。</li></ul><h4 id="数据库（Database，DB）"><a href="#数据库（Database，DB）" class="headerlink" title="数据库（Database，DB）"></a>数据库（Database，DB）</h4><ul><li>存放数据的仓库，存放在计算机中，按照一定的格式存放，可为用户共享</li></ul><h4 id="数据库管理系统（Database-Management-System-DBMS）"><a href="#数据库管理系统（Database-Management-System-DBMS）" class="headerlink" title="数据库管理系统（Database Management System, DBMS）"></a>数据库管理系统（Database Management System, DBMS）</h4><ul><li>数据库管理系统就是科学的组织和存储数据，高效的获取和维护数据，</li><li>市面上常用的：Oracle MySQL SQL Server  DB2</li></ul><h4 id="数据库应用程序（DBAS）"><a href="#数据库应用程序（DBAS）" class="headerlink" title="数据库应用程序（DBAS）"></a>数据库应用程序（DBAS）</h4><ul><li>在数据库系统基础上，使用数据库管理系统的语法，开发的直接面对最终用户的应用程序</li><li>例如：学生管理系统、人事管理系统、图书管理系统</li></ul><h4 id="数据库管理员（Database-Administrator-DBA）"><a href="#数据库管理员（Database-Administrator-DBA）" class="headerlink" title="数据库管理员（Database Administrator, DBA）"></a>数据库管理员（Database Administrator, DBA）</h4><ul><li>数据库管理系统的操作者</li></ul><h4 id="最终用户"><a href="#最终用户" class="headerlink" title="最终用户"></a>最终用户</h4><ul><li>数据库应用程序的使用者</li></ul><h4 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h4><ul><li><p>数据库 + 数据库管理系统 + 数据库应用程序 + 最终用户</p><p><img src="/images/MySQL/DB.jpg" alt="DB"></p></li></ul><h4 id="数据库的发展阶段"><a href="#数据库的发展阶段" class="headerlink" title="数据库的发展阶段"></a>数据库的发展阶段</h4><ol><li><p>网状数据库</p></li><li><p>层次数据库</p></li><li><p>关系数据库</p><ul><li><p>采用关系[二维表]存储与管理数据</p></li><li><p>采用结构化查询结构（sql）作为客户端数据库服务器之间沟通的桥梁</p></li></ul></li></ol><h4 id="NOSQL数据库"><a href="#NOSQL数据库" class="headerlink" title="NOSQL数据库"></a>NOSQL数据库</h4><ul><li>Not only sql数据库 泛指非关系数据库。</li><li>关系数据库在超大规模和高并发的web2.0纯属动态网站已经显示力不从心，暴露了很多难以克服的问题。Nosql数据库的产生就是为了解决大无框数据集合多重数据种类带来的挑战，尤其是大数据应用难题</li></ul><h2 id="数据库相关基础操作"><a href="#数据库相关基础操作" class="headerlink" title="数据库相关基础操作"></a>数据库相关基础操作</h2><h4 id="数据库的启动与停止"><a href="#数据库的启动与停止" class="headerlink" title="数据库的启动与停止"></a>数据库的启动与停止</h4><ul><li>方式一<ul><li>打开任务管理器，点击服务，找到MySQL右击启动或者停止</li></ul></li><li>方式二<ul><li>打开dos窗口，输入命令，net start mysql  启动，net stop mysql  停止</li></ul></li></ul><h4 id="使用root账户登陆"><a href="#使用root账户登陆" class="headerlink" title="使用root账户登陆"></a>使用root账户登陆</h4><ul><li>mysql -uroot -p123456<ul><li>root  是默认的用户名—超级管理员</li><li>123456  是之前我们安装的时候设置的默认密码</li></ul></li></ul><h4 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h4><ul><li><p>命令</p><pre class="line-numbers language-mysql"><code class="language-mysql">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="默认库几个库的简单说明"><a href="#默认库几个库的简单说明" class="headerlink" title="默认库几个库的简单说明"></a>默认库几个库的简单说明</h4><ul><li><p><strong>information_schema</strong></p><ul><li>information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。</li><li>在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件</li></ul></li><li><p><strong>mysql</strong></p><ul><li>这个是mysql的核心数据库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。</li></ul></li><li><p><strong>performance_schema</strong></p><ul><li>mysql 5.5 版本 新增了一个性能优化的引擎： PERFORMANCE_SCHEMA这个功能默认是关闭的：</li><li>需要设置参数： performance_schema 才可以启动该功能，这个参数是静态参数，只能写在my.cnf 中 不能动态修改。</li><li>windows里面叫 my.ini文件  C:\ProgramData\MySQL\MySQL Server 5.7  【默认在这个目录】linux里面叫my.cnf文件</li></ul></li><li><p><strong>sys</strong></p><ul><li><p>通过这个库可以快速的了解系统的元数据信息</p><p>这个库确实可以方便DBA发现数据库的很多信息，解决性能瓶颈都提供了巨大帮助</p></li></ul></li><li><p><strong>注</strong>：以上几个库都不能删除（重点）</p></li></ul><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">use  <数据库名称>;-- 例如：使用mysql数据库use mysql;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改数据库密码</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">1使用mysql数据库use mysql;2修改密码命令(将root用户的密码修改为123456)update mysql.user set authentication_string=PASSWORD('123456') where user='root;3刷新flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><ul><li><p>命令</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE USER 'username'@'host' IDENTIFIED BY 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>说明：</p><ul><li>username：你将创建的用户名</li><li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li></ul></li><li><p>列如：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#创建dog用户密码为123456 并且限制只能在本机上登录访问CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';#创建pig用户密码为123456 并且限制只能在指定的ip（192.168.1.101）登录访问CREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456';#创建pig用户密码为123456 并且可以通过任意远程主机登录访问CREATE USER 'pig'@'%' IDENTIFIED BY '123456';#创建pig用户输入任意密码即可登录并且可以通过任意远程主机登录访问CREATE USER 'pig'@'%' IDENTIFIED BY '';#创建pig用户没有密码并且可以通过任意远程主机登录访问CREATE USER 'pig'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h4><ul><li><p>命令</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">GRANT privileges ON databasename.tablename TO 'username'@'host'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>说明：</p><ul><li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，</li></ul></li><li><p>例如：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#给pig用户授权 给 test库里面 的user表 查询和插入权限并且可以通过任意主机访问GRANT SELECT, INSERT ON test.user TO 'pig'@'%';#给pig用户授权 给所有库的所有表 增删改查的权限并且可以通过任意主机访问GRANT ALL ON *.* TO 'pig'@'%'; #给pig用户授权 给 maindataplus库里面 的所有表 增删改查权限并且可以通过任意主机访问GRANT ALL ON maindataplus.* TO 'pig'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注：用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL"></a>什么是SQL</h2><h4 id="DDL数据定义语言"><a href="#DDL数据定义语言" class="headerlink" title="DDL数据定义语言"></a>DDL数据定义语言</h4><ul><li><p>全称Data Definition Language，主要用于创建和删除结构。</p><ol><li><p>创建结构相关操作：表、视图、索引、数据 </p></li><li><p>删除结构相关操作：表、视图、索引、数据</p></li><li><p>改变结构相关操作：表、视图、索引、数据</p></li></ol></li></ul><h4 id="DML数据操纵语言"><a href="#DML数据操纵语言" class="headerlink" title="DML数据操纵语言"></a>DML数据操纵语言</h4><ul><li><p>DML对表和视图进行插入、删除、更新相关操作，全称Data Manipulation Language。</p><ol><li><p>插入数据关键字：insert</p></li><li><p>删除数据关键字：delete</p></li><li><p>修改数据关键字：update</p></li></ol></li></ul><h4 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h4><ul><li>对表和视图进行操作，全称： Data Query Language<ol><li>DQL关键字 select</li></ol></li></ul><h4 id="TCL事务控制语言"><a href="#TCL事务控制语言" class="headerlink" title="TCL事务控制语言"></a>TCL事务控制语言</h4><ul><li><p>TCL全称Transaction Control Language，使用事务管理DML操作。</p><ol><li><p>提交事务关键字 commit;</p></li><li><p>回滚事务关键字 rollback;</p></li><li><p>开启事务关键字 start transaction;</p></li></ol></li></ul><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><table><thead><tr><th>数据类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>tinyint</td><td>8bit</td><td>范围(-128~127)</td></tr><tr><td>smallint</td><td>16bit</td><td>范围(-32768~32767)</td></tr><tr><td>mediumint</td><td>24bit</td><td>范围(-8388608~8388607)</td></tr><tr><td>int</td><td>32bit</td><td>范围(-2147483648~2147483647)&#x3D;&#x3D;（对应java中的类型int 或 Integer 记住）&#x3D;&#x3D;</td></tr><tr><td>bigint</td><td>64bit</td><td>范围(+-9.22*10的18次方)&#x3D;&#x3D;（对应java中的类型long或 Long记住）&#x3D;&#x3D;</td></tr></tbody></table><h4 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h4><table><thead><tr><th>数据类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>float(m,d)</td><td>32bit</td><td>单精度浮点型，m总个数，d小数位</td></tr><tr><td>double(m,d)</td><td>64bit</td><td>双精度浮点型，m总个数，d小数位</td></tr></tbody></table><h4 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h4><ul><li>浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。 decimal(m,d) 参数m是总个数，d是小数位。</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><table><thead><tr><th>数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符，索引效率级高，必须在括号里定义长度，可以有默认值</td></tr><tr><td>varchar(n)</td><td>可变长度，最多65535个字符&#x3D;&#x3D;（对应java中的类型String或  char记住）&#x3D;&#x3D;</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr><tr><td>json</td><td>mysql5.7新增加的数据类型，用来存放json数据</td></tr></tbody></table><ul><li><p><strong>char、varchar、text区别 （理解）</strong></p><ul><li><strong>char</strong>：存储定长数据很方便，CHAR字段上的索引效率级高，必须在括号里定义长度，可以有默认值，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间（自动用空格填充），且在检索的时候后面的空格会隐藏掉，所以检索出来的数据需要记得用什么trim之类的函数去过滤空格。</li><li><strong>varchar</strong>：存储变长数据，但存储效率没有CHAR高，必须在括号里定义长度，可以有默认值。保存数据的时候，不进行空格自动填充，而且如果数据存在空格时，当值保存和检索时尾部的空格仍会保留。另外，varchar类型的实际长度是它的值的实际长度+1，这一个字节用于保存实际使用了多大的长度。</li><li><strong>text</strong>：存储可变长度的非Unicode数据，最大长度为2^31-1个字符。text列不能有默认值，存储或检索过程中，不存在大小写转换，后面如果指定长度，不会报错误，但是这个长度是不起作用的，意思就是你插入数据的时候，超过你指定的长度还是可以正常插入。</li></ul></li><li><p>实战结论：</p><ol><li><p>经常变化的字段用varchar；</p></li><li><p>知道固定长度的用char；</p></li><li><p>超过255字节的只能用varchar或者text；</p></li><li><p>能用varchar的地方不用text；</p></li><li><p>能够用数字类型的字段尽量选择数字类型而不用字符串类型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接回逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了；</p></li><li><p>同一张表出现多个大字段，能合并时尽量合并，不能合并时考虑分表</p></li></ol></li></ul><h4 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h4><table><thead><tr><th>数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>日期 ‘2021-1-1’（对应java中的类Date  记住）</td></tr><tr><td>time</td><td>时间 ‘12:25:36’</td></tr><tr><td>datetime</td><td>日期时间 ‘2021-1-1 22:06:44’ （对应java中的类Date 记住）</td></tr><tr><td>timestamp</td><td>自动存储记录修改时间</td></tr></tbody></table><h4 id="逻辑类型"><a href="#逻辑类型" class="headerlink" title="逻辑类型"></a>逻辑类型</h4><ul><li><strong>（适用于：性别、状态、标记等只有两个值的）</strong><ul><li>Logic类型使用bit表示，它只能存储两个值0或者1</li></ul></li></ul><h4 id="数据类型的属性"><a href="#数据类型的属性" class="headerlink" title="数据类型的属性"></a>数据类型的属性</h4><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET  name</td><td>指定一个字符集</td></tr></tbody></table><h2 id="MySQL表的相关操作"><a href="#MySQL表的相关操作" class="headerlink" title="MySQL表的相关操作"></a>MySQL表的相关操作</h2><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">create table <表名称>(   列名称1 数据类型1,   列名称2 数据类型2,   ..........   列名称n 数据类型n);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实列1：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">create table tb_student(     id int(11),     stu_name varchar(50),     stu_sex bit,     stu_hobby varchar(50),     stu_age smallint);#注意：最后一列没有逗号#列与列之间以英文逗号隔开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实例2：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">create table student(     id int(11),     stu_name varchar(50),     stu_sex bit,     stu_hobby varchar(50),     stu_age smallint)default charset=UTF8, ENGINE=INNODB;# DEFAULT CHARSET 用于指定表中数据的字符集编码方式# ENGINE 用于指定表的存储引擎<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="数据存储问题"><a href="#数据存储问题" class="headerlink" title="数据存储问题"></a>数据存储问题</h4><ul><li><p>现在我们在数据库中创建了一个表，那么如我们把电脑重启，这个表还在不在呢？</p></li><li><p>测试结果为  在  那是为什么呢？</p></li><li><p>原因是当我们创建表个表之后，在我们数据库的文件系统里面就会有一个对应的文件存在</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">.frm文件：保存了每个表的元数据，包括表结构的定义等；.ibd文件：InnoDB引擎开启了独立表空间(my.ini中配置innodb_file_per_table = 1)产生的存放该表的数据和索引的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h4><ul><li><p>创建表之后如何查看是否创建成功？可以通过desc命令来查看表结构</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 第一种方式查看表结构# desc <表名称>;desc student;# 第二种方式查看表结构# show create <表名称>;show create table tb_student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><pre class="line-numbers language-MySQL"><code class="language-MySQL">基本语法如下：alter table <表名称>;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>案列1</p></li><li><p>添加列，例如：向student表新增加一列stu_height学生身高</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 语法如下：# alter table <表名称> add column <列名称>  <数据类型>;alter table student add column stu_height int(11);# 查看表结构desc student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例2</p></li><li><p>删除某一个列，例如：删除student表中的学生身高</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 语法如下：# alter table <表名称> drop column <列名称>;alter table student drop column stu_height;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>案例3</p></li><li><p>修改列名称和数据类型：例如修改stu_sex 为 student_sex 数据类型修改为 varchar(30)</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 语法如下：# alter table <表名称> change column <原列名称> <新列名称> <数据类型>;# 修改stu_sex 为 student_sex 数据类型修改为 varchar(30)alter table student change column stu_sex student_sex varchar(30);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>案例4</p></li><li><p>修改某一列的数据类型，例如：将学生年龄修改为int类型</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 语法如下：# alter table  <表名称> modify column <原来的列名称>  <新的数据类型>;# 例如：alter table student modify column stu_age int(11);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><ul><li><p>删除删除之前先判断表是否还存在</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">drop table if exists <表名称>;  # 刪除之前先做校验，表在数据库中存在才删除drop table if exists EMP_bak;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>直接删除</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">drop table <表名称>;drop table EMP_bak;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>显示当前的所有表</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">show tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="MySQL表里面数据的相关操作DML"><a href="#MySQL表里面数据的相关操作DML" class="headerlink" title="MySQL表里面数据的相关操作DML"></a>MySQL表里面数据的相关操作DML</h2><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><ul><li><p>单个添加</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 插入所有的数据语法如下：#  insert into 表名称 values (值1,值2,……);insert into student values(101,'老王',0,'足球',31);# 注意：在插入所有的数据时values后面的括号必须填满所有列，保证参数的顺序和表中的列的顺序 一致insert into student values(101,'老王',0,'足球');#报错：ERROR 1136 (21S01): Column count doesn't match value count at row 1# 错误原因：student表后面没有指定列名称，默认将插入所有列的数据，此时student表定义了5列，但是只插入了4列数据，所以报错# 注意：student表后面没有指定列名称，那么在插入数据的时候，数据的类型必须跟定义表结构类型保持一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>批量添加</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 行与行之间使用半角逗号分离，value关键字只定义一次insert into student(id,stu_name,stu_sex,stu_hobby,stu_age)values(108,'老王',1,'Basketball',39),(1031,'老张',1,'Basketball',39);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul><li><p>批量修改</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 修改所有数据# 语法update <表名称> set 列名称 = 值;# 例如：student表的年龄全部修改为50update student set stu_age = 50;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单个修改</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 如果只想修改某一行的数据，需要加上条件# 例如：我只想修改id为1031的年龄为60where 表示行过滤where id=1031 表示只选择id为1031的行进行修改# 下面代码执行步骤：首先执行 update student 确定修改那张表# 然后执行 where 条件 确定修改表中的哪一行，不满住条件的行都会被过滤掉update student set stu_age = 60 where id = 1031;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单个修改多个值</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">update student set stu_age = 60，name='习大大' where id = 1031;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li><p>删除一个</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 删除某一条数据 语法：delete from <表名称>  where 条件;# 例如：删除id为108的student数据delete from student where id = 108;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除全部</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 语法delete from <表名称> ;# 例如：删除student表所有数据delete from student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>truncate关键字</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">truncate 是DDL，删除所有数据，不支持where，不能回滚delete 是DML，可以删除部分数据，因为支持where，可以回滚#总体上truncate效率比delete高，他们都只能删除数据不能删除表结构，只有drop才能删除表结构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><ul><li><p>什么是主键：主要关键字，一个表如果创建了主键那么该行的所有数据必须在表中 非空并且唯一。</p></li><li><p>主键设计原则：</p><ul><li><p>在开发中，一般的主键为数值类型，呈递增趋势，如果不想每次都插入主键，我们可以让数据自动增长</p></li><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">create table tb_class(    # id是主键列，不用显示插入值 让其自动增长    id int(11)auto_increment,      # not null 非空约束     class_name varchar(30) not null,     # 班级描述     class_desc varchar(100),      # 为tb_class表的id列设置主键约束     primary key (id)       )ENGINE=INNODB,DEFAULT CHARSET UTF8;    # 注意： MySQL 数据库 auto_increment自动增长和主键primary key 是配套的不能单独使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><ul><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">create table tb_class(# id是主键列，不用显示插入值 让其自动增长 id int(11) auto_increment,   # not null 非空约束 class_name varchar(30) not null,  # 班级描述 class_desc varchar(100),   # 为tb_class表的id列设置主键约束 primary key (id)   )ENGINE=INNODB,DEFAULT CHARSET UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><ul><li>制定一个规则，让表的某一列数据必须唯一</li><li>特征：某列数据可以为空，但是必须唯一</li><li>语法：</li></ul><pre class="line-numbers language-MySQL"><code class="language-MySQL">#列如：学生的手机号码create table tb_1(    phone int unique)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h4><ul><li><p>为某一列制定一个默认规则</p></li><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#列如：性别默认为 0create table tb_1(    phone int unique,sex int DEFAULT 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li><p>外部的关键字叫做外键，通常为多张表中建立联系，确保表与表之间的数据安全性，一致性，能够减少数据冗余(重复的数据)。</p></li><li><p>前面几个约束：在一张表建立约束(规则)</p></li><li><p>外键约束： 多张表之间建立约束(关联，联系)</p></li><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#场景：创建一个tb_student表，为其添加默认约束、唯一约束、非空约束、外键约束。create table tb_student(  id  int(11) auto_increment,  stu_name varchar(50) not null,    # unique 唯一混熟  stu_mobile varchar(20) unique,      # 默认约束 性别默认为1  0女  1男  stu_sex bit default 1,  class_id int(11) not null,     # 学生表的class_id建立外键去关联 tb_class表的主键  primary key (id),  foreign key (class_id) references tb_class(id))ENGINE=INNODB,DEFAULT CHARSET UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="约束关键字总结"><a href="#约束关键字总结" class="headerlink" title="约束关键字总结"></a>约束关键字总结</h4><table><thead><tr><th>约束名称</th><th>关键字</th></tr></thead><tbody><tr><td>主键约束</td><td>primary key</td></tr><tr><td>非空约束</td><td>not null</td></tr><tr><td>唯一约束</td><td>unique</td></tr><tr><td>默认约束</td><td>default</td></tr><tr><td>外键约束</td><td>foreign key…….references</td></tr></tbody></table><ul><li><p>约束分为两类：</p><ol><li><p>行级别约束： 主键约束、外键约束</p></li><li><p>列级别约束： 非空约束、唯一约束、默认约束</p></li></ol></li><li><p>外键约束小结：</p><ol><li>foreign key(外键列) </li><li>references 主表 (主键列)</li><li>references 关键字的右边是主表的主键列，左边是从表的外键列，该关键字在主表和从边之间建立了联系。</li></ol></li><li><p>创建表小结：没有外键的表是主表，有外键的表是从表。先创建主表后创建从表(有外键的表是从表)</p></li><li><p>插入数据小结：先插入主表数据后插入从表数据</p></li><li><p>删除数据小结：先删除从表数据后删除主表数据</p></li></ul><hr><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><h4 id="一对一（one-to-one）"><a href="#一对一（one-to-one）" class="headerlink" title="一对一（one-to-one）"></a>一对一（one-to-one）</h4><ul><li><p>一对一关系就如球队与球队所在地址之间的关系，一支球队仅有一个地址，而一个地址区也仅有一支球队。</p></li><li><p>数据表间一对一关系的表现有两种，一种是外键关联，一种是主键关联。</p></li><li><p>如图：</p><p><img src="/images/MySQL/%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB.jpg" alt="一对一关系"></p></li></ul><h4 id="一对多或多对一（many-to-one）"><a href="#一对多或多对一（many-to-one）" class="headerlink" title="一对多或多对一（many-to-one）"></a>一对多或多对一（many-to-one）</h4><ul><li><p>存在最普遍的映射关系，简单来讲就如球员与球队的关系；</p><ul><li><p>一对多：从球队角度来说一个球队拥有多个球员 即为一对多</p></li><li><p>多对一：从球员角度来说多个球员属于一个球队 即为多对一数据表间一对多关系</p></li></ul></li><li><p>如图：</p><p><img src="/images/MySQL/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.jpg" alt="一对多关系"></p></li><li><p>案列</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 班级表 create table tb_class(    # id是主键列，不用显示插入值 让其自动增长 id int(11) auto_increment,       # not null 非空约束 class_name varchar(30) not null,     # 班级描述 class_desc varchar(100),     # 为tb_class表的id列设置主键约束 primary key (id)  )ENGINE=INNODB,DEFAULT CHARSET UTF8;# 学生表create table tb_student(  id  int(11) auto_increment,  stu_name varchar(50) not null,    # unique 唯一约束  stu_mobile varchar(20) unique,     # 默认约束 性别默认为1  0女  1男  stu_sex bit default 1,     #非空约束 class_id  class_id int(11) not null,    #id为主键  primary key (id),    # 学生表的class_id建立外键去关联 tb_class表的主键  foreign key (class_id) references tb_class(id))ENGINE=INNODB,DEFAULT CHARSET UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="多对多（many-to-many）"><a href="#多对多（many-to-many）" class="headerlink" title="多对多（many-to-many）"></a>多对多（many-to-many）</h4><ul><li><p>多对多关系也很常见，例如学生与选修课之间的关系，一个学生可以选择多门选修课，而每个选修课又可以被多名学生选择。</p></li><li><p>数据库中的多对多关联关系一般需采用中间表的方式处理，将多对多转化为两个一对多。</p></li><li><p>数据表间多对多关系如图：</p><p><img src="/images/MySQL/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.jpg" alt="多对多关系"></p></li><li><p>案列</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">-- 学生表create table tb_student(  id  int(11) auto_increment,  stu_name varchar(50) not null,  stu_mobile varchar(20) unique, -- unique 唯一混熟  stu_sex bit default 1, -- 默认约束 性别默认为1  0女  1男  class_id int(11) not null,   primary key (id),    -- 学生表的class_id建立外键去关联 tb_class表的主键  foreign key (class_id) references tb_class(id))ENGINE=INNODB,DEFAULT CHARSET UTF8;-- 课程表create table tb_course(  id int(11) auto_increment,  course_name varchar(30) not null, -- 课程名称  primary key(id))ENGINE=INNODB,DEFAULT CHARSET UTF8;-- 学生课程表是一个中间表，在学生表和课程表之间解耦create table tb_student_course(  stu_id int(11), -- 学生id  course_id int(11), -- 课程id  course_score int(11), -- 课程的成绩    primary key(stu_id,course_id),    -- 复合主键-- stu_id作为外键关联学生表主键  foreign key(stu_id) references tb_student(id),  -- course_id作为外键关联课程表主键 foreign key(course_id) references tb_course(id))ENGINE=INNODB,DEFAULT CHARSET UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="单表数据查询"><a href="#单表数据查询" class="headerlink" title="单表数据查询"></a>单表数据查询</h2><h4 id="最简单的查询方式"><a href="#最简单的查询方式" class="headerlink" title="最简单的查询方式"></a>最简单的查询方式</h4><ul><li><p>查询所有员工的信息</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp;#查询所有部门信息select * from dept;#查询所有员工的 编号，姓名，工资，职位信息select empno, ename,sal,job  from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h4><ul><li><p>查询所有员工的编号、姓名、工资、年终奖信息</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select empno, ename,sal,sal*1.08 from emp;#查询所有员工的 编号，姓名，工资，年薪信息select empno, ename,sal, sal*12 from emp;#查询所有员工的 编号，姓名，工资，年薪增加1000 信息select empno, ename,sal, sal*12 +1000 from emp;注：在Select语句中，对数值型数据可以使用算术运算符创建表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用字段别名"><a href="#使用字段别名" class="headerlink" title="使用字段别名"></a>使用字段别名</h4><ul><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select empno as 员工编号, ename 员工姓名, sal*12 年薪  from emp;select empno, ename "Ename", sal*12 "Anual Salary" from emp;select sal*12+5000  as "年度工资(加年终奖)" from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>字段别名说明：</p><ul><li>重命名查询结果中的字段，以增强可读性，别名如果含有空格或其他特殊字符或大小写敏感，需用双引号引起来。</li><li>AS可以省略</li></ul></li></ul><h4 id="去重查询"><a href="#去重查询" class="headerlink" title="去重查询"></a>去重查询</h4><ul><li><p>缺省情况下，查询结果中包含所有符合条件的记录行，包括重复行</p></li><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#查询所有员工的部门编号信息select deptno from emp;使用DISTINCT关键字可从查询结果中清除重复行#查询所有员工的部门编号信息并去重select distinct deptno from emp;#查询所有员工的职位信息并去重select distinct  job from emp;DISTINCT的作用范围是后面所有字段的组合#查询所有员工的部门编号和职位信息去重select distinct deptno，  job from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><ul><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#使用order by 子句对查询结果进行排序#排序方式包括升序（asc，缺省）和降序（desc）两种：#查询员工的编号，姓名，工资并按照工资升序排序select empno, ename, sal from emp order by sal;#查询员工的编号，姓名，工资并按照工资升序降序select empno, ename, sal from emp order by sal desc ;#按多字段排序#查询员工的编号，姓名，工资并先按照部门编号升序排序，如果编号相同，再按照工资升序排序select deptno, empno, ename, sal from emp order by deptno, sal;#使用字段别名排序#查询员工的编号，姓名，年薪并先按照年薪升序排序  (别名 可以在 排序中使用)select empno, ename, sal*12 annsal from emp order by annsal;#查询员工的编号，年薪 且年薪大于10000 select empno, sal*12 incomeyear where incomeyear>10000 # (错误的)select empno, sal*12 incomeyear where sal*12 >10000 # (对的)#因为 where子句的优先级比select子句高#执行顺序:  from > where>select >order by <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li><p><strong>关键字：limit</strong></p></li><li><p>案列1：查询每页显示3条数据，查询第一页数据的sql</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp limit 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>案列2：每页显示三条数据，查询第五页的数据的sql</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp limit 12，3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>limit 参数1，参数2</p><ul><li>参数1：表示索引</li><li>参数2：表示每页显示的信息条数</li></ul></li><li><p><strong>参数1的计算方法：</strong>索引 &#x3D; （查询页数 - 1）* 2</p></li></ul><h4 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h4><ul><li><p>将多个select语句联合(合并)为一个select语句，涉及的关键字union 和union all。</p></li><li><p>union all 不管是否重复，全部合并</p></li><li><p>union 如果有重复的，过滤掉重复的</p></li><li><p>案列：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp  where DEPTNO=10 union all select * from emp  where DEPTNO=20select * from emp  where DEPTNO=10 union select * from emp  where DEPTNO=20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h2><h4 id="用法举例"><a href="#用法举例" class="headerlink" title="用法举例"></a>用法举例</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#查询员工的部门编号为10的所有信息select * from emp where deptno=10;#查询员工的姓名为‘JACK’的所有信息select * from emp where ename = 'JACK';#查询员工的入职日期为2020-12-12的所有信息select * from emp where hiredate = '2020-12-12';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意：</strong>字符串和日期值要用单引号括起来，字符串大小写不敏感。</p></li><li><p>日期格式敏感，缺省的日期格式是’YYYY-MM-DD HH:mm:ss’</p></li></ul><h4 id="查询条件中可以使用比较运算符"><a href="#查询条件中可以使用比较运算符" class="headerlink" title="查询条件中可以使用比较运算符"></a>查询条件中可以使用比较运算符</h4><ul><li><p>MySQL支持如下比较运算符： &gt; &gt;&#x3D;  &lt; &lt;&#x3D;  !&#x3D;  &lt;&gt;</p><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>between…and..</td><td>介于两值之间（闭区间）</td></tr><tr><td>in(set)</td><td>出现在集合中</td></tr><tr><td>like</td><td>模糊查询</td></tr><tr><td>is null</td><td>为控制</td></tr></tbody></table></li><li><p><strong>注意：</strong>MySQL使用“&#x3D;”运算符来判断表达式是否相等，它没有&#x3D;&#x3D;Java使用!&#x3D;表示不等于，MySQL也支持。但是我们不要使用，效率太低了</p></li><li><p>MySQL使用的不等于使用&lt;&gt;</p></li><li><p>案列：查询工资大于2900的员工信息</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp where sal > 2900;#查询部门编号不等于30的员工信息select * from emp where deptno <> 30;#查询工资在1600 到 2900之间的员工信息select * from emp where sal between 1600 and 2900;#查询员工姓名为'SMITH','CLARK','KING'的员工信息select * from emp where ename in('SMITH','CLARK','KING');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模糊查询案列：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 查询员工名字中包含 m的员工信息select * from emp where ename like '%M%'#查询名字以M开头的员工信息select * from emp where ename like 'M%'#查询名字以M结尾的员工信息select * from emp where ename like '%M'# _下划线 表示占位符,一个下划线表示占一个字符# 查找名字中倒数第二个字母为M的员工信息select * from emp where ename like '%M_'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用LIKE运算符执行模糊查询（通配查询）"><a href="#使用LIKE运算符执行模糊查询（通配查询）" class="headerlink" title="使用LIKE运算符执行模糊查询（通配查询）"></a>使用LIKE运算符执行模糊查询（通配查询）</h4><ul><li><p>% 表示零或多个字符    _ 表示一个字符</p></li><li><p>对于特殊符号可使用ESCAPE 标识符来查找</p></li><li><p>案列：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#查询员工姓名以S开头的员工信息select * from emp where ename like 'S%';#查询 员工 姓名第二给字母为A的员工信息select * from emp where ename like '_A%';# 查找名字中包含下划线的员工信息select * from emp where ename like '%/_%' escape  '/'select * from emp where ename like '%\_%'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断空值</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#查询没有奖金的员工信息select * from emp where comm is null;#查询有奖金的员工信息select * from emp where comm is not null; （固定写法）#查询有奖金的员工信息select * from emp where not comm is null; （通用型）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="查询条件中可以使用逻辑运算符"><a href="#查询条件中可以使用逻辑运算符" class="headerlink" title="查询条件中可以使用逻辑运算符"></a>查询条件中可以使用逻辑运算符</h4><ul><li><p>语法：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#查询部门编号为10 且工资大于1000 的员工信息select * from emp where deptno = 10 and sal > 1000;#查询部门编号为10 或者 岗位为 ‘ClerK’的员工信息select * from emp where deptno = 10 or job = ‘CLERK’;#查询工资不等800,1500,2000 的员工信息select * from emp where sal not in (800, 1500, 2000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="SQL优化问题"><a href="#SQL优化问题" class="headerlink" title="SQL优化问题"></a>SQL优化问题</h4><ul><li>AND: 把检索结果较少的条件放到后面</li><li>OR: 把检索结果较多的条件放到后面</li></ul><h4 id="四种运算符优先级：算术-gt-连接-gt-比较-gt-逻辑"><a href="#四种运算符优先级：算术-gt-连接-gt-比较-gt-逻辑" class="headerlink" title="四种运算符优先级：算术&gt;连接&gt;比较&gt;逻辑"></a>四种运算符优先级：算术&gt;连接&gt;比较&gt;逻辑</h4><p><img src="/images/MySQL/%E8%BF%90%E7%AE%97%E7%AC%A6.jpg" alt="运算符"></p><ul><li><p><strong>可使用小括号强行改变运算顺序</strong></p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp where job='SALESMAN' or job='CLERK' and sal>=1280;select * from emp where (job='SALESMAN' or job='CLERK') and sal>=1280;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>优先级： Not&gt;and&gt;or</li></ul></li></ul><hr><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h4 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h4><ul><li>使用函数可以大大提高SELECT语句操作数据库的能力。它给数据的转换和处理提供了方便。</li><li>函数只是将取出的数据进行处理，不会改变数据库中的值。</li></ul><h4 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h4><ul><li><p>单行函数分类</p><ol><li>数学函数</li><li>字符串函数</li><li>日期和时间函数</li><li>条件判断函数</li><li>系统信息函数</li><li>加密函数</li><li>格式化函数</li></ol></li><li><p>多行函数分类</p><ol><li><p>仅适用数值型的多行函数 </p><ul><li><p>sum() 求和 </p></li><li><p>avg() 求平均值</p></li></ul></li><li><p>适用任何类型数据</p><ul><li><p>count() 计数  </p></li><li><p>max() 求最大值    </p></li><li><p>min() 求最小值</p></li></ul></li></ol></li></ul><h4 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h4><ul><li><p>数学函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">ABS(x)   # 返回x的绝对值PI()     # 返回圆周率π，默认显示6位小数SQRT(x)  # 返回非负数的x的二次方根MOD(x,y) # 返回x被y除后的余数CEIL(x)、CEILING(x) #返回不小于x的最小整数FLOOR(x)  #返回不大于x的最大整数ROUND(x)、ROUND(x,y)  #前者返回最接近于x的整数，即对x进行四舍五入；后者返回最接近x的数，其值保留到小数点后面y位，若y为负值，则将保留到x到小数点左边y位SIGN(x)  #返回参数x的符号，-1表示负数，0表示0，1表示正数POW(x,y)和、POWER(x,y) # 返回x的y次乘方的值EXP(x)  #返回e的x乘方后的值LOG(x)  #返回x的自然对数，x相对于基数e的对数LOG10(x) # 返回x的基数为10的对数RADIANS(x)  #返回x由角度转化为弧度的值DEGREES(x)  #返回x由弧度转化为角度的值SIN(x)、ASIN(x)  #前者返回x的正弦，其中x为给定的弧度值；后者返回x的反正弦值，x为正弦COS(x)、ACOS(x) # 前者返回x的余弦，其中x为给定的弧度值；后者返回x的反余弦值，x为余弦TAN(x)、ATAN(x)  #前者返回x的正切，其中x为给定的弧度值；后者返回x的反正切值，x为正切COT(x)   #返回给定弧度值x的余切RAND(x)   #返回0-1之间的随机小数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">（1）CHAR_LENGTH(str)  #计算字符串字符个数（2）CONCAT(s1,s2，...) # 返回连接参数产生的字符串，一个或多个待拼接的内容，任意一个为NULL则返回值为NULL（3）CONCAT_WS(x,s1,s2,...) #返回多个字符串拼接之后的字符串，每个字符串之间有一个x（4）INSERT(s1,x,len,s2)  #返回字符串s1，其子字符串起始于位置x，被字符串s2取代len个字符（5）LOWER(str)和LCASE(str)、UPPER(str)和UCASE(str)#前两者将str中的字母全部转换成小写，后两者将字符串中的字母全部转换成大写（6）LEFT(s,n)、RIGHT(s,n)  #前者返回字符串s从最左边开始的n个字符，后者返回字符串s从最右边开始的n个字符（7）LPAD(s1,len,s2)、RPAD(s1,len,s2)  #前者返回s1，其左边由字符串s2填补到len字符长度，假如s1的长度大于len，则返回值被缩短至len字符；前者返回s1，其右边由字符串s2填补到len字符长度，假如s1的长度大于len，则返回值被缩短至len字符（8）LTRIM(s)、RTRIM(s) #前者返回字符串s，其左边所有空格被删除；后者返回字符串s，其右边所有空格被删除（9）TRIM(s)  #返回字符串s删除了两边空格之后的字符串（10）TRIM(s1 FROM s)  #删除字符串s两端所有子字符串s1，未指定s1的情况下则默认删除空格（11）REPEAT(s,n) # 返回一个由重复字符串s组成的字符串，字符串s的数目等于n（12）SPACE(n) # 返回一个由n个空格组成的字符串（13）REPLACE(s,s1,s2)  #返回一个字符串，用字符串s2替代字符串s中所有的字符串s1（14）STRCMP(s1,s2) # 若s1和s2中所有的字符串都相同，则返回0；根据当前分类次序，第一个参数小于第二个则返回-1，其他情况返回1（15）SUBSTRING(s,n,len)、MID(s,n,len) #两个函数作用相同，从字符串s中返回一个第n个字符开始、长度为len的字符串（16）LOCATE(str1,str)、POSITION(str1 IN str)、INSTR(str,str1) #三个函数作用相同，返回子字符串str1在字符串str中的开始位置（从第几个字符开始）（17）REVERSE(s)  #将字符串s反转（18）ELT(N,str1,str2,str3,str4,...) #返回第N个字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>日期和时间函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">（1）CURDATE()、CURRENT_DATE()#将当前日期按照"YYYY-MM-DD"或者"YYYYMMDD"格式的值返回，具体格式根据函数用在字符串或是数字语境中而定（2）CURRENT_TIMESTAMP()、LOCALTIME()、NOW()、SYSDATE() #这四个函数作用相同，返回当前日期和时间值，格式为"YYYY_MM-DD HH:MM:SS"或"YYYYMMDDHHMMSS"，具体格式根据函数用在字符串或数字语境中而定（3）MONTH(date)和MONTHNAME(date) #前者返回指定日期中的月份，后者返回指定日期中的月份的名称（4）WEEK(d)、WEEKOFYEAR(d) #前者计算日期d是一年中的第几周，后者计算某一天位于一年中的第几周（5）DAYOFYEAR(d)、DAYOFMONTH(d) #前者返回d是一年中的第几天，后者返回d是一月中的第几天（6）EXTRACT(type FROM date) #从日期中提取一部分，type可以是YEAR、YEAR_MONTH、DAY_HOUR、DAY_MICROSECOND、DAY_MINUTE、DAY_SECOND（7）TimeStampDiff #(间隔类型，前一个日期，后一个日期) #例如距离现在差了多少年：TimeStampDiff(year, 前一个日期, now())#间隔类型有：second秒，minute分，hour时，day天，week周，month月，quarter季度，year年（8）DATE_ADD(date,INTERVAL expr type)、ADD_DATE(date,INTERVAL expr type) # 返回将起始时间加上expr type之后的时间，比如DATE_ADD('2010-12-31 23:59:59', INTERVAL 1 SECOND)表示的就是把第一个时间加1秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件判断函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">（1）IF(expr,v1,v2) #如果expr是TRUE则返回v1，否则返回v2（2）IFNULL(v1,v2) #函数  如果v1的值不为NULL，则返回v1，否则返回v2。（2）CASE expr WHEN v1 THEN r1 [WHEN v2 THEN v2] [ELSE rn] END #如果expr等于某个vn，则返回对应位置THEN后面的结果，如果与所有值都不想等，则返回ELSE后面的rn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>系统信息函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">（1）VERSION() #查看MySQL版本号（2）CONNECTION_ID() #查看当前用户的连接数（3）USER()、CURRENT_USER()、SYSTEM_USER()、SESSION_USER() #查看当前被MySQL服务器验证的用户名和主机的组合，一般这几个函数的返回值是相同的（4）CHARSET(str) #查看字符串str使用的字符集（5）COLLATION() #查看字符串排列方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加密函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">（1）PASSWORD(str)#从原明文密码str计算并返回加密后的字符串密码，注意这个函数的加密是单向的（不可逆），因此不应将它应用在个人的应用程序中而应该只在MySQL服务器的鉴定系统中使用（2）MD5(str) #为字符串算出一个MD5 128比特校验和，改值以32位十六进制数字的二进制字符串形式返回（3）ENCODE(str, pswd_str) #使用pswd_str作为密码，加密str（4） DECODE(crypt_str,pswd_str) #使用pswd_str作为密码，解密加密字符串crypt_str，crypt_str是由ENCODE函数返回的字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式化函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">（1）FORMAT(x,n) #将数字x格式化，并以四舍五入的方式保留小数点后n位，结果以字符串形式返回（2）CONV(N,from_base,to_base) #不同进制数之间的转换，返回值为数值N的字符串表示，由from_base进制转换为to_base进制（3）INET_ATON(expr) #给出一个作为字符串的网络地址的点地址表示，返回一个代表该地址数值的整数，地址可以使4或8比特（4）INET_NTOA(expr) #给定一个数字网络地址（4或8比特），返回作为字符串的该地址的点地址表示（5）BENCHMARK(count,expr) #重复执行count次表达式expr，它可以用于计算MySQL处理表达式的速度，结果值通常是0（0只是表示很快，并不是没有速度）。另一个作用是用它在MySQL客户端内部报告语句执行的时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h4><ul><li><p>对一组数据进行运算，针对一组数据（多行记录）只返回一个结果，也称分组函数。</p></li><li><p>常用的多行函数</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">sum()  avg()   仅适用数值型count()   max()   min()   适用任何类型数据# 查询平均工资，最高工资，最低工资，工资总select avg(sal), max(sal), min(sal), sum(sal) from emp; # 查询最早入职和最晚入职的员工信息select max(hiredate), min(hiredate) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多行函数与空值</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#多行函数除了count(*)外，都跳过空值而处理非空值select count(comm),sum(comm),avg(comm) from emp;#可使用IF()函数强制多行函数处理空值select count(IF(comm is null,0,comm)),sum(IF(comm is null,0,comm)),avg(IF(comm is null,0 ,comm)) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>count（*）函数的说明</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">count(*) #返回组中总记录数目；count(exp) # 返回表达式exp值非空的记录数目；count(distinct(exp)) # 返回表达式exp值不重复的、非空的记录数目。#查询所有员工个数select count(*) from emp;#查询有奖金的员工的个数select count(comm) from emp;#查询部门的个数select count(distinct(deptno)) from emp; #查询所有的员工数select count(IF(comm IS null,0,comm)) from emp;select count(IFnull(0,comm)) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="group-by子句"><a href="#group-by子句" class="headerlink" title="group by子句"></a>group by子句</h4><ul><li><p>GROUP BY 子句将表中数据分成若干小组</p></li><li><p>语法格式</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select column, group_function(column)from table[where condition][group by group_by_expression][order by column];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用举例</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#按照部门分组并查询部门的平均工资select deptno, avg(sal) from emp group by deptno;#按照部门分组，并统计部门的平均工资和数量select  deptno, ename,count(*),avg(sal) from emp group by deptno；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ul><li><p>出现在SELECT列表中的字段，如果不是包含在多行函数中，那么该字段必须同时在GROUP BY子句中出现。</p></li><li><p>错误：select ename,deptno,sum(sal) from emp group by deptno;</p><ul><li>|以上的SQL在MYSQL中是不错的，但是在oracle是错的，在开发中避免这样写</li><li>包含在GROUP BY子句中的字段则不必须出现在SELECT列表中。</li></ul></li><li><p>如果没有GROUP BY子句，SELECT列表中不允许出现字段（单行函数）与多行函数混用的情况</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select empno, sal from emp;  #合法select avg(sal) from emp;  #合法select empno, avg(sal) from emp;  #非法# 不允许在WHERE 子句中使用多行函数select deptno, avg(sal)   from empwhere avg(sal) > 2000;   # 执行where时尚未执行groupby 及其他group by deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="having子句"><a href="#having子句" class="headerlink" title="having子句"></a>having子句</h4><ul><li><p>对分组查询的结果进行过滤，要使用having从句。</p></li><li><p>having从句过滤分组后的结果，它只能出现在group by从句之后，而where从句要出现在group by从句之前。</p></li><li><p>where过滤行，having过滤分组。having支持所有where操作符。</p></li><li><p>语法格式：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select column, group_function(column)from table[where condition][group by  group_by_expression][having group_condition][order by column];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意：</strong>执行过程：from–where – group by– having– select– order by</li></ul></li><li><p>用法举例</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 列出平均工资大于8000元的部门IDselect deptno, avg(sal)   from empgroup by deptno having avg(sal) > 8000  order by deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>练习：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 统计人数小于4的部门的平均工资。Select deptno ,avg(sal),count(*)  from emp group by deptno having count(*) <4# 统计各部门的最高工资，排除最高工资小于8000的部门。Select max(sal),deptno  from emp group by deptno having not max(sal)<8000# 显示部门编号大于10 的部门的人数，要求人数大于3Select deptno, count(*) from emp group by deptno  having deptno > 10 and count(*) > 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="连接查询SQL-92"><a href="#连接查询SQL-92" class="headerlink" title="连接查询SQL 92"></a>连接查询SQL 92</h2><h4 id="链接查询的概述"><a href="#链接查询的概述" class="headerlink" title="链接查询的概述"></a>链接查询的概述</h4><ul><li>笛卡尔集</li><li>等值连接</li><li>非等值连接</li><li>外连接</li><li>自连接</li><li>说明。SQL92是1992年提出的查询语法，向上兼容</li></ul><h4 id="连接查询语法"><a href="#连接查询语法" class="headerlink" title="连接查询语法"></a>连接查询语法</h4><ul><li><p>语法规则：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECTtable1.column, table2.column FROM table1, table2 WHERE table1.column1 = table2.column2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>特点</p><ul><li>在 WHERE 子句中写入连接条件</li><li>当多个表中有重名列时，必须在列的名字前加上表名作为前缀</li></ul></li><li><p>链接查询的类型</p><ul><li><p>等值连接 – Equijoin</p></li><li><p>非等值连接 – Non-equijoin</p></li><li><p>左连接 –LEFT JOIN</p></li><li><p>右连接 –RIGHT JOIN</p></li><li><p>自连接 – Self join</p></li></ul></li></ul><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><p>- </p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from dept; # 4条记录select * from emp; ; # 14条记录select * from dept,emp; ; # 4*14=56条记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>总结</p><ol><li>检索出的行的数目将是第一个表中的行数乘以第二个表中的行数</li><li>检索出的列的数目将是第一个表中的列数加上第二个表中的列数</li><li>应该保证所有联结都有where子句，不然数据库返回比想要的数据多得多的数据</li></ol></li></ul><h4 id="等值查询"><a href="#等值查询" class="headerlink" title="等值查询"></a>等值查询</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">#查询员工信息以及部门信息select * from dept,emp where dept.deptno=emp.deptno;#查询员工信息以及部门信息（使用别名）select * from dept d,emp e where d.deptno=e.deptno;#针对重复的字段必须要指定哪个表的字段select d.deptno,dname,loc,empno,ename,job from dept d,emp e where d.deptno=e.deptno;#查询10号部门的员工信息以及部门信息select d.deptno,dname,loc,empno,ename,job from dept d,emp e where d.deptno=e.deptno and d.deptno=10#查询部门的地址为武汉的员工信息以及部门信息select d.deptno,dname,loc,empno,ename,job from dept d,emp e where d.deptno=e.deptno and loc='武汉';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意点：</strong></p><ol><li>当被连接的多个表中存在同名字段时，须在该字段前加上”表名.”前缀</li><li>可使用AND 操作符增加查询条件；</li><li>使用表别名可以简化查询，使用表名（表别名）前缀可提高查询效率；</li></ol></li></ul><h4 id="非等值查询"><a href="#非等值查询" class="headerlink" title="非等值查询"></a>非等值查询</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 要求：查询员工的工资等级select  empno,ename,job,sal,grade from emp e,salgrade swhere e.sal<s.hisal and e.sal>s.losal;# 查询经理的工资等级select  empno,ename,job,sal,grade from emp e,salgrade swhere e.sal<s.hisal and e.sal>s.losal and e.job='MANAGER';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><ul><li><p>特点：将一个表当两个表使用</p></li><li><p>使用举例：查询每个员工的工号、姓名、直接领导姓名</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 要求：必须使用别名select e1.empno,e1.ename,e1.job,e2.ename from emp e1 ,emp e2where e1.mgr=e2.empnoorder by e1.empno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="连接查询SQL99"><a href="#连接查询SQL99" class="headerlink" title="连接查询SQL99"></a>连接查询SQL99</h2><h4 id="SQL语法概述"><a href="#SQL语法概述" class="headerlink" title="SQL语法概述"></a>SQL语法概述</h4><ul><li><p><strong>SQL92</strong>的语法规则的缺点：</p><ol><li>语句过滤条件和表连接的条件都放到了where子句中 。</li><li>当条件过多时，联结条件多，过滤条件多时，就容易造成混淆</li></ol></li><li><p><strong>SQL99</strong>修正了整个缺点，把联结条件，过滤条件分开来，包括以下新的TABLE JOIN的句法结构：</p><ol><li><p>交叉连接（Cross join）</p></li><li><p>自然连接（Natural join）</p></li><li><p>使用Using子句建立连接</p></li><li><p>使用On子句建立连接</p></li><li><p>连接（ Outer join ）</p><ul><li><p>内连接INNER JOIN </p></li><li><p>左连接LEFT JOIN</p></li><li><p>右连接RIGHT JOIN</p></li></ul></li></ol></li></ul><h4 id="SQL99语法"><a href="#SQL99语法" class="headerlink" title="SQL99语法"></a>SQL99语法</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select 字段列表 from table1 [cross join table2] |     # 1：交叉连接[natural join table2] |                              # 2：自然连接[join table2 using (字段名)] |                        # 3：using子句[join table2 on (table1.column_name = table2.column_name)] |  # 4：on子句[(left | right | full outer) join table2on (table1.column_name = table2.column_name)]; # 5：左/右/满外连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><ul><li><p>Cross join 产生了一个笛卡尔集，其效果等同于在两个表进行连接时未使用WHERE子句限定连接条件;</p></li><li><p>可以使用where条件从笛卡尔集中选出满足条件的记录。</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select dept.deptno,dname,ename from dept cross join emp; 等价于select dept.deptno,dname,ename from dept,emp; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><ul><li><p>Natural join基于两个表中的全部同名列建立连接</p></li><li><p>从两个表中选出同名列的值均对应相等的所有行</p></li><li><p>如果两个表中同名列的数据类型不同，则出错</p></li><li><p>不允许在参照列上使用表名或者别名作为前缀</p></li><li><p>自然连接的结果不保留重复的属性</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select empno, ename, sal, deptno, dname from emp natural join dept<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="using子句"><a href="#using子句" class="headerlink" title="using子句"></a>using子句</h4><ul><li><p>如果不希望参照被连接表的所有同名列进行等值连接，自然连接将无法满足要求，可以在连接时使用USING子句来设置用于等值连接的列（参照列）名。</p></li><li><p>using子句引用的列在sql任何地方不能使用表名或者别名做前缀</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select e.ename,e.sal,deptno,d. dname from emp e join dept d using(deptno) where deptno=10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="on子句"><a href="#on子句" class="headerlink" title="on子句"></a>on子句</h4><ul><li><p>自然连接的条件是基于表中所有同名列的等值连接，为了设置任意的连接条件或者指定连接的列，需要使用ON子句</p></li><li><p>连接条件与其它的查询条件分开书写</p></li><li><p>使用ON 子句使查询语句更容易理解</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 1.select ename,dname from emp inner join  dept on emp.deptno=dept.deptno where  emp.deptno=30;# 2.select empno, ename, sal, emp.deptno, dname from emp inner  join dept on (emp.deptno = dept.deptno and sal>5000);# 3.select * from dept, emp where dept.deptno = emp.deptno and sal>5000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三种是sql92里面的查询方法，和上面两种等价</p></li><li><p>等列名</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select emp.empno,emp.ename,dept.dname,dept.loc from emp join dept on emp.deptno = dept.deptno<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不等列名</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select  emp.empno,emp.ename, s.grade  from emp join salgrade s on emp.sal > s.losal and emp.sal < s.hisal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li><p>左外连接</p><ul><li><p>两个表在连接过程中除返回满足连接条件的行以外，还返回左表中不满足条件的行，这种连接称为左外联接。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select deptno, dname,empno,ename from dept left join emp using(deptno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>右外连接</p><ul><li><p>两个表在连接过程中除返回满足连接条件的行以外，还返回右表中不满足条件的行，这种连接称为右外联接。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select deptno, dname,empno,ename from dept right join emp using(deptno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>满外连接</p><ul><li><p>两个表在连接过程中除返回满足连接条件的行以外，还返回两个表中不满足条件的所有行，这种连接称为满外联接。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select deptno, dname,empno,ename from dept full join emp using(deptno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>内连接</p><ul><li>在SQL99规范中，内连接只返回满足连接条件的数据。</li></ul></li></ul><hr><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><ul><li><p>将查询到的信息用作条件使用，称之为子查询</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select 字段列表   from table where 表达式  operator (select 字段列表  from table);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>例如：如何查得所有比“CLARK”工资高的员工的信息</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp where sal>( select sal from emp where ename='CLARK');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询工资高于平均工资的雇员名字和工资。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">Select ename, sal from emp Where sal > (Select avg(sal) from emp )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>：查询和Lucy同一部门且比他工资低的雇员名字和工资。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">Select ename ,sal from emp where (Sal < (Select sal from emp where ename = 'ALLEN')) and (emp.deptno= (Select deptno from emp where ename = 'ALLEN'))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>特点：</p><ol><li><p>子查询在主查询前执行一次</p></li><li><p>主查询使用子查询的结果</p></li></ol></li><li><p>使用子查询注意事项：</p><ol><li>在查询是基于未知值时应考虑使用子查询</li><li>子查询必须包含在括号内，建议将子查询放在比较运算符的右侧，以增强可读性。</li><li>除非进行Top-N 分析，否则不要在子查询中使用ORDER BY 子句。</li><li>如果子查询返回单行结果，则为单行子查询，可以在主查询中对其使用相应的单行记录比较运算符</li><li>如果子查询返回多行结果，则为多行子查询，此时不允许对其使用单行记录比较运算符</li></ol></li></ul><h4 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h4><ul><li><p>单行子查询只返回一行记录，对单行子查询可使用单行记录比较运算符</p></li><li><p>&lt; 、 &gt; 、 &#x3D; 、 &gt;&#x3D;、 &lt;&#x3D; 、 &lt;&gt;</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">select * from emp where sal > (select sal from emp where empno = 101);# 查询工资最高的雇员名字和工资。Select ename , sal  from emp where Sal = (Select max(sal) from emp) # 查询职务和SCOTT相同，比SCOTT雇佣时间早的雇员信息SELECT  empno, ename, job FROM emp WHERE job =(SELECT job FROM emp WHERE empno=7788) AND hiredate < (SELECT hiredate FROM emp WHERE empno=7788);#查询工资比SCOTT高或者雇佣时间比SCOTT早的雇员的编号和名字select empno,ename,sal,hiredate from emp where sal>(select sal from emp where ename='SCOTT') or hiredate<(select hiredate from emp where ename='SCOTT')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h4><ul><li><p>多行子查询返回多行记录</p></li><li><p>对多行子查询只能使用多行记录比较运算符</p></li><li><p>ALL 和子查询返回的所有值比较</p></li><li><p>ANY 和子查询返回的任意一个值比较</p></li><li><p>IN 等于列表中的任何一个</p></li><li><p>案例1</p></li><li><p>查询工资低于任何一个’CLERK’的工资的雇员信息。</p></li><li><p>思路：查询 ‘CLERK’ 最高工资 ，查询小于最高工资的雇员</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECT  empno, ename, job,sal FROM emp WHERE   sal < ANY (SELECT sal FROM emp WHERE job = 'CLERK') AND job <> 'CLERK';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>案例2</p></li><li><p>查询工资比所有的 ‘SALESMAN’都高的雇员的编号、名字和工资。</p></li><li><p>思路：查询 ‘SALESMAN’最高工资 ，查询高于于最高工资的雇员</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECT  empno, ename,sal FROM emp WHERE sal > ALL(SELECT sal FROM emp WHERE job= 'SALESMAN');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>案例3</p></li><li><p>查询部门20中职务同部门10的雇员一样的雇员信息。</p></li><li><p>思路：部门为10号中的职位，根据职位从20号部门中跳取 </p><pre class="line-numbers language-MySQL"><code class="language-MySQL">SELECT empno, ename, job FROM emp WHERE job IN (SELECT job FROM emp WHERE deptno=10) AND deptno =20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h4 id="视图的定义及作用"><a href="#视图的定义及作用" class="headerlink" title="视图的定义及作用"></a>视图的定义及作用</h4><ul><li><p>定义</p><ul><li>视图是从若干基本表和（或）其他视图构造出来的表。在创建一个视图时，只是存放的视图的定义，也即是动态检索数据的查询语句，而并不存放视图对应的数据</li><li>在用户使用视图时才去求相对应的数据。所以视图被称作“虚表”</li></ul></li><li><p>作用</p><ol><li><p>可以限制对数据的访问，可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</p></li><li><p>可以使复杂的查询变的简单。在编写查询后，可以方便地重用它而不必知道他的基本查询细节。</p></li><li><p>提供了对相同数据的不同显示</p></li></ol></li></ul><h4 id="视图的创建和删除"><a href="#视图的创建和删除" class="headerlink" title="视图的创建和删除"></a>视图的创建和删除</h4><ul><li><p>创建单表视图</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE VIEW MYVIEW1 AS SELECT * FROM EMP;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建或修改一个单表视图</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE OR REPLACE VIEW MYVIEW2 AS SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO >=102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用视图添加和修改数据</p></li><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">INSERT INTO MYVIEW1 (EMPNO,ENAME,SAL)VALUES(9999,'AAAA',3000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为视图添加相关权限</p></li><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE OR REPLACE VIEW MYVIEW2 AS SELECT EMPNO,ENAME,JOB,SAL,DEPTNO FROM EMP WHERE DEPTNO >=20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除视图</p></li><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">DROP VIEW MYVIEW4;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>统计视图</p></li><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE OR REPLACE VIEW MYVIEW4 AS SELECT DEPTNO 部门编号,DNAME 部门名称,AVG(SAL) 平均工资,MAX(SAL) 最高工资,COUNT(*)人数 FROM EMP E JOIN DEPT D USING(DEPTNO)WHERE DEPTNO IS NOT NULL GROUP BY DEPTNO，DNAME ORDER BY AVG(SAL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>基于其它视图的视图</p></li><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE OR REPLACE VIEW MYVIEW5 AS SELECT * FROM MYVIEW4 WHERE 部门编号=10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="视图总结"><a href="#视图总结" class="headerlink" title="视图总结"></a>视图总结</h4><ol><li><p>视图对应一个查询语句；视图是（从若干基本表和（或）其他视图构造出来的）表</p></li><li><p>视图进行查询，添加，修改，删除，其实就是对背后的表进行相应操作</p></li><li><p>虚表 在创建一个视图时，只是存放的视图的定义，也即是动态检索数据的查询语句，而并不存放视图对应的数据</p></li><li><p>视图的好处</p><ol><li><p>安全 可以只显示部分行部分列的数据;可以对添加的数据进行检查；可以设置为只读视图</p><p>2.操作简单</p></li><li><p>只显示多个数据库表的部分列，部分行的视图</p></li></ol></li></ol><hr><h2 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h2><h4 id="InnoDB-引擎-MySQL5-5以后默认使用"><a href="#InnoDB-引擎-MySQL5-5以后默认使用" class="headerlink" title="InnoDB 引擎(MySQL5.5以后默认使用)"></a>InnoDB 引擎(MySQL5.5以后默认使用)</h4><ul><li><p>MySQL 5.5 及以后版本中的默认存储引擎，他的优点如下：</p><ol><li><p>灾难恢复性好</p></li><li><p>支持事务</p></li><li><p>使用行级锁</p></li><li><p>支持外键关联</p></li><li><p>支持热备份</p></li></ol></li><li><p>对于InnoDB引擎中的表，其数据的物理组织形式是簇表（Cluster Table），主键索引和数据是在一起的，数据按主键的顺序物理分布</p></li><li><p>实现了缓冲管理，不仅能缓冲索引也能缓冲数据，并且会自动创建散列索引以加快数据的获取</p><p>支持热备份</p></li></ul><h4 id="MyISAM引擎"><a href="#MyISAM引擎" class="headerlink" title="MyISAM引擎"></a>MyISAM引擎</h4><ul><li>特性如下：<ol><li>不支持事务</li><li>使用表级锁，并发性差</li><li>主机宕机后，MyISAM表易损坏，灾难恢复性不佳</li><li>可以配合锁，实现操作系统下的复制备份、迁移</li><li>只缓存索引，数据的缓存是利用操作系统缓冲区来实现的。可能引发过多的系统调用且效率不佳</li><li>数据紧凑存储，因此可获得更小的索引和更快的全表扫描性能</li></ol></li></ul><h4 id="两种存储引擎的大致区别表现在"><a href="#两种存储引擎的大致区别表现在" class="headerlink" title="两种存储引擎的大致区别表现在"></a>两种存储引擎的大致区别表现在</h4><ol><li><p>区别：</p><ol><li><p>InnoDB支持事务，MyISAM不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。</p></li><li><p>MyISAM适合查询以及插入为主的应用，InnoDB适合频繁修改以及涉及到安全性较高的应用</p></li><li><p>InnoDB支持外键，MyISAM不支持</p></li><li><p>从MySQL5.5.5以后，InnoDB是默认引擎</p></li><li><p>InnoDB不支持FULLTEXT类型的索引</p></li><li><p>InnoDB中不保存表的行数，如select count(<em>) from table时，InnoDB需要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(</em>)语句包含where条件时MyISAM也需要扫描整个表。</p></li><li><p>对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引。</p></li><li><p>清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表。</p></li><li><p>InnoDB支持行锁（某些情况下还是锁整表，如 update table set a&#x3D;1 where user like ‘%lee%’</p></li></ol></li><li><p>有人说MYISAM只能用于小型应用，其实这只是一种偏见。</p><p>如果数据量比较大，这是需要通过升级架构来解决，比如分表分库，读写分离，而不是单纯地依赖存储引擎。现在一般都是选用InnoDB了，主要是MyISAM的全表锁，读写串行问题，并发效率锁表，效率低，MyISAM对于读写密集型应用一般是不会去选用的。</p></li><li><p>总结</p><ul><li>MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。</li><li>MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</li></ul></li></ol><h4 id="存储引擎的其他说明"><a href="#存储引擎的其他说明" class="headerlink" title="存储引擎的其他说明"></a>存储引擎的其他说明</h4><ul><li><p>存储引擎：数据在数据库中的组织方式（存储方式）。</p></li><li><p>例如：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">create table test_table( id int(11))ENGINE=INNODB ,DEFAULT CHARSET = UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建表的时候指定存储引擎为INNODB，这个存储引擎在MySQL中用的非常广泛，因为它支持外键、支持事务、支持行级锁。</p></li><li><p>查看MySQL支持的存储引擎命令如下：</p><p><img src="/images/MySQL/%E6%9F%A5%E7%9C%8B%E5%BC%95%E6%93%8E.jpg" alt="查看引擎"></p></li><li><p>除了上述操作之外，还可以在数据库安装盘的my.ini文件可以配置数据库表默认的存储引擎。</p></li></ul><hr><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>完成一个事情需要的一系列步骤(操作)，这些操作要么同时成功，要么同时失败</li></ul><h4 id="事务的基本操作"><a href="#事务的基本操作" class="headerlink" title="事务的基本操作"></a>事务的基本操作</h4><ol><li>开启事务<ul><li>start transaction;</li></ul></li><li>提交事务<ul><li>commit;</li></ul></li><li>回滚事务<ul><li>rollback;</li></ul></li><li><strong>注意：</strong><ul><li>一旦使用start transaction;开启事务那么自动提交将失效，如果所有操作都正常执行使用commit;提交事务</li><li>当发生异常情况回滚事务，数据(此时为tb_account表)通常回滚到开启事务之前的状态</li></ul></li></ol><ul><li><p>例如：有两个账户分别为张三和李四，他们默认都有1000块钱的余额。在这两个账户之间进行转账。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 1 创建account表create table tb_account(id int(11) auto_increment,user_name varchar(30) not null,account_blance  int(11) not null, # 账户余额primary key (id))ENGINE=INNODB,default charset =UTF8;# 2 插入数据insert into tb_account(user_name,account_blance)values('ZS',1000),('LS',1000);# 3 执行张三向李四转账500# ZS账户-500，LS账户+500# 下面两个update语句要么同时执行成功要么同时执行失败# 执行下列SQL语句会出现问题：张三的钱减少了，李四的钱没有加上。因为此时的两个update语句并没有使用事务来托管update tb_account set account_blance=account_blance-500 where id=1;# 银行转帐异常情况：如机机房停电update tb_account set account_blance=account_blance+500 where id=2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想要解决上述问题，那么就可以使用事务来解决</p></li></ul><h4 id="事务的四大特质"><a href="#事务的四大特质" class="headerlink" title="事务的四大特质"></a>事务的四大特质</h4><ol><li>原子性：事务每一步都是不可再分</li><li>一致性：张三和李四账户一共2000块钱，不管转账多少次总金额不变</li><li>持久性：当一个事务执行成功(完毕)，数据会持久化到磁盘的数据文件中。例如转账成功：张三余额变为500，李四余额变为1500.</li><li>隔离性：A事务和B事务同时操作一份数据，相互之间不影响。</li></ol><h4 id="事务的提交方式"><a href="#事务的提交方式" class="headerlink" title="事务的提交方式"></a>事务的提交方式</h4><ol><li><p>自动提交，MySQL默认为自动提交。不需要写commit;就会自动将DML语句持久化提交</p></li><li><p>手动提交，Oracle默认手动提交。</p></li><li><p>在dos窗口中查看当前的提交方式：</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 查询结果为1表示自动提交，0表示手动提交 select @@autocommit;# 修改提交方式（自动提交修改为手动提交）set @@autocommit = 0 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ul><li><p>ISO定义的四大隔离级别</p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><ul><li>查询当前的隔离级别：select @@tx_isolation</li><li>隔离级别1最低，4最高 。隔离级别越高就越安全，同时内存资源消耗也越大。隔离级别越高效率越低下。</li><li>工作中：1和4都不用，只会在2和3之间切换</li><li><strong>MySQL</strong>默认的事务隔离级别为3，<strong>Oracle</strong>默认隔离界别默认为2</li></ul></li><li><p>并发下的脏读，不可重复读，幻读的问题</p><ol><li><p>脏读问题</p><ul><li>一个事务(A)读取到另一个事务(B)没有提交的数据（破坏了隔离性）.</li><li>例如：事务A开启事务做转账，DML语句执行成功但是没有commit；事务B在另一个窗口开启了，执行Select语句读取tb_account数据，读取到的结果是事务A没有提交的数据。</li></ul></li><li><p>不可重复读问题</p><ul><li>同一个事务中多次读取到的数据不一致(破坏了一致性，update和delete)</li><li>例如：事务A开启事务做转账，DML语句执行成功但是没有commit；；事务B在另一个窗口开启了，执行Select语句读取tb_account数据，读取的结果正确（1000,1000）.</li><li>事务A里面提交了事务。然后事务B再次做Select操作查询结果也正确(500,1500)</li><li>问题：事务B在一次事务中对tb_account表做了两次select操作，两次操作查询的结果不一致。</li></ul></li><li><p>幻读问题</p><ul><li><p>事务A插入一条数据，能够使用select获取结果，此时事务B几乎同时插入了一条或者大量数据，此时事务A看不到事务B的更新（破坏了一致性，insert）。</p></li><li><p>查看事务隔离级别</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># REPEATABLE-READ  可重复读# tx 表示事务的简称  transaction# isolation表示隔离性select @@tx_isolation;# 设置事务的隔离级别 读未提交set session transaction isolation level  READ UNCOMMITTED;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ul><hr><h2 id="SQL优化之索引"><a href="#SQL优化之索引" class="headerlink" title="SQL优化之索引"></a>SQL优化之索引</h2><h4 id="索引概念"><a href="#索引概念" class="headerlink" title="索引概念"></a>索引概念</h4><ul><li>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</li><li>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</li><li>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</li><li>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</li><li>索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</li><li>建立索引会占用磁盘空间的索引文件。</li></ul><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ul><li><p>普通索引</p><ul><li><p>语法</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">CREATE INDEX 索引名称 on 表名称(列名称);#例如：为person表的pname列建立普通索引CREATE INDEX INDEX_PERSON_PNAME ON PERSON(PNAME);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看是否使用了索引</p><pre class="line-numbers language-MySQL"><code class="language-MySQL">EXPLAIN select * from person where pname= 'Jack';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在MySQL中为表创建主键的同时默认也创建了一个索引</p></li><li><p><strong>注意：</strong></p><ul><li><p>在表中如果条件使用的是模糊查询。</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 前后模糊中间精确不会使用索引EXPLAINselect  * from person where pname like '%e%';# 前面模糊后面精确也不会使用索引EXPLAINselect  * from person where pname like '%e';# 只有前面精确后面模糊才会使用索引，工作中数据量大的表模糊查询尽量不要使用 '%%',也不要使用'%a',他们都不支持索引EXPLAINselect  * from person where pname like 'e%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>总结</p><ol><li><p>如果为某个列创建索引，那么就会在数据文件中创建一个类似TreeMap的文件。如果一个表的数据很多，那么索引会大量的占据数据文件的磁盘空间。</p></li><li><p>不是所有的列都适合建立索引，如果某个列的有效数据很少不要建立索引 。 </p></li><li><p>可以为表的多个列创建复合索引，经常使用的列放在前面。</p></li><li><p>创建主键的同时默认也创建了一个索引。</p></li></ol></li></ul></li><li><p>唯一索引</p><ul><li>唯一索引关键字： unique</li><li>之前学习了唯一约束，当我们创建了一个唯一约束的时候就创建了一个唯一索引，唯一约束就是唯一索引。</li></ul></li><li><p>组合索引</p><p>- </p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 为多个列创建复合索引ALTER TABLE PERSON  DROP  INDEX INDEX_PERSON_AGE_SEX;CREATE INDEX INDEX_PERSON_AGE_SEX ON PERSON(PNAME,PSEX);# 没有创建索执行下面DQL语句引耗时11.427秒，创建索引执行耗时1毫秒SELECT * FROM PERSON WHERE PNAME ="oQlJN" AND PSEX='男';EXPLAIN SELECT * FROM PERSON WHERE  PSEX='男'  AND PNAME ="oQlJN";# 创建的复合索引，但是只对第二个索引列单独进行where条件，不会使用索引# 如果创建复合索引，经常使用的列放在前面，并且查询时一定要带上第一列的条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全文索引</p><ul><li>概述</li><li>通过数值比较、范围过滤等就可以完成绝大多数我们需要的查询，但是，如果希望通过关键字的匹配来进行查询过滤，那么就需要基于相似度的查询，而不是原来的精确数值比较。全文索引就是为这种场景设计的。</li><li>你可能会说，用 like + % 就可以实现模糊匹配了，为什么还要全文索引？like + % 在文本比较少时是合适的，但是对于大量的文本数据检索，是不可想象的。全文索引在大量的数据面前，能比 like + % 快 N 倍，速度不是一个数量级，但是全文索引可能存在精度问题。</li><li>你可能没有注意过全文索引，不过至少应该对一种全文索引技术比较熟悉：各种的搜索引擎。虽然搜索引擎的索引对象是超大量的数据，并且通常其背后都不是关系型数据库，不过全文索引的基本原理是一样的。</li></ul></li><li><p>删除索引</p><pre class="line-numbers language-MySQL"><code class="language-MySQL"># 语法ALTER TABLE 表名称 DROP INDEX 索引名称；# 示例ALTER TABLE PERSON DROP INDEX INDEX_PERSON_PNAME;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="数据库设计原则"><a href="#数据库设计原则" class="headerlink" title="数据库设计原则"></a>数据库设计原则</h2><h4 id="引入三大范式"><a href="#引入三大范式" class="headerlink" title="引入三大范式"></a>引入三大范式</h4><ul><li><p>必须保证数据库设计的合理性</p><ul><li><p>数据库设计关系整个系统的架构，关系到后续的开发效率和运行效率</p></li><li><p>数据库的设计主要包含了设计表结构和表之间的联系</p></li></ul></li><li><p>如何是合理数据库</p><ul><li>结构合理</li><li>冗余较小</li><li>尽量避免插入删除修改异常</li></ul></li><li><p>如何才能保证数据库设计水平</p><ul><li>遵循一定的规则</li><li>在关系型数据库中这种规则就称为范式</li></ul></li><li><p>什么是范式（NF&#x3D; NormalForm）</p><ul><li>范式是符合某一种设计要求的总结。</li><li>要想设计一个结构合理的关系型数据库，必须满足一定的范式。</li></ul></li><li><p>范式的分类</p><ul><li>第一范式</li><li>第二范式</li><li>第三范式</li><li>各个范式是依次嵌套包含的,范式越高，设计质量越高，在现实设计中也越难实现，一般数据库设计，只要达到第三范式，即可避免异常的出现</li></ul></li></ul><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><ul><li>要求<ul><li>最基本的范式</li><li>数据库表每一列都是不可分割的基本数据项，同一列中不能有多个值</li><li>简单说就是要确保每列保持原子性</li><li>第一范式的合理遵循需要根据系统的实际需求来定</li></ul></li></ul><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><ul><li>要求<ul><li>第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</li><li>即在一个数据库表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</li></ul></li></ul><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><ul><li>要求<ul><li>确保数据表中的每一列数据都和主键直接相关，而不能间接相关</li><li>属性不依赖于其他非主属性。</li></ul></li></ul><h4 id="范式的优缺点"><a href="#范式的优缺点" class="headerlink" title="范式的优缺点"></a>范式的优缺点</h4><ul><li><p>优点</p><ul><li>结构合理</li><li>冗余较小</li><li>尽量避免插入删除修改异常</li></ul></li><li><p>缺点</p><ul><li><p>性能降低</p></li><li><p>多表查询比单表查询速度慢</p></li></ul></li></ul><h4 id="数据库的设计应该根据当前情况和需求做出灵活的处理。"><a href="#数据库的设计应该根据当前情况和需求做出灵活的处理。" class="headerlink" title="数据库的设计应该根据当前情况和需求做出灵活的处理。"></a>数据库的设计应该根据当前情况和需求做出灵活的处理。</h4><ul><li>在实际设计中，要整体遵循范式理论。</li><li>大多时候我们是打破这些范式来设计的。</li><li>如果在某些特定的情况下还死死遵循范式也是不可取的，因为可能降低数据库的效率，此时可以适当增加冗余而提高性能。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2022/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/08/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1><center>数据结构与算法</center><hr><h2 id="数据结构与算法的概述"><a href="#数据结构与算法的概述" class="headerlink" title="数据结构与算法的概述"></a>数据结构与算法的概述</h2><h4 id="数据结构与算法的介绍"><a href="#数据结构与算法的介绍" class="headerlink" title="数据结构与算法的介绍"></a>数据结构与算法的介绍</h4><ul><li><p>算法</p><ul><li><p>算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。</p></li><li><p>算法是独立存在的一种解决问题的方法和思想。</p><ul><li>对于算法而言，实现的语言并不重要，重要的是思想。</li></ul></li><li><p>算法可以有不同的语言描述实现版本（如C描述、C++描述、Python描述等）</p></li><li><p>案列一</p><ul><li>有一个背包，背包容量是M&#x3D;150。有7个物品，物品可以分割成任意大小。要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。</li></ul></li><li><p>案列二</p><ul><li>有一对兔子,从出生后第3个月起每个月都生一对兔子,小兔子长到第4个月后,每个月又生一对兔子,假如兔子不死,问每个月的兔子总数为多少?</li></ul></li></ul></li><li><p>数据结构</p><ul><li>数据结构就是把数据组织起来，为了更方便地使用数据我们为了解决问题，需要将数据保存下来，然后根据数据的存储方式来设计算法实现进行处理，那么数据的存储方式不同就会导致需要不同的算法进行处理。我们希望算法解决问题的效率越快越好，于是我们就需要考虑数据究竟如何保存的问题，这就是数据结构。</li><li>数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。</li></ul></li></ul><h4 id="数据结构与算法关系"><a href="#数据结构与算法关系" class="headerlink" title="数据结构与算法关系"></a>数据结构与算法关系</h4><ul><li>程序 &#x3D; 数据结构 + 算法</li><li>数据结构是算法的基础。</li><li>图书馆储藏书籍你肯定见过吧？为了方便查找，图书管理员一般会将书籍分门别类进行“存储”。按照一定规律编号，就是书籍这种“数据”的存储结构。</li><li>那我们如何来查找一本书呢？有很多种办法，你当然可以一本一本地找，也可以先根据书籍类别的编号，是人文，还是科学、计算机，来定位书架，然后再依次查找。笼统地说，这些查找方法都是算法。</li><li>数据结构和算法是相辅相成的。数据结构是为算法服务的，算法要作用在特定的数据结构之上。 因此，我们无法孤立数据结构来讲算法，也无法孤立算法来讲数据结构。</li></ul><h4 id="线性结构和非线性结构"><a href="#线性结构和非线性结构" class="headerlink" title="线性结构和非线性结构"></a>线性结构和非线性结构</h4><ul><li><p>线性结构</p><ul><li>线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系。</li><li>线性结构有两种不同的存储结构，即顺序存储结构(数组)和链式存储结构(链表)。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的。</li><li>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素结点存放数据元素以及相邻元素的地址信息。</li><li>线性结构常见的有：数组、队列、链表和栈。</li></ul><p><img src="/images/DSA/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E5%9B%BE.jpg" alt="线性表的顺序存储图"></p></li><li><p>非线性结构</p><ul><li><p>二维数组、多维数组、广义表、树结构、图结构</p><p><img src="/images/DSA/%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84.jpg" alt="树状结构图"></p></li></ul></li></ul><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h4 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h4><ul><li><p><strong>栈是限制插入和删除只能在一个位置上进行的线性表。</strong></p></li><li><p>其中，允许插入和删除的一端位于表的末端，叫做栈顶（top），不允许插入和删除的另一端叫做栈底（bottom）。对栈的基本操作有 <strong>PUSH（压栈）</strong>和 <strong>POP （出栈）</strong>，前者相当于表的插入操作（向栈顶插入一个元素），后者则是删除操作（删除一个栈顶元素）。栈是一种后进先出（LIFO）**的数据结构，最先被删除的是最近压栈的元素。</p></li><li><p>栈的结构图</p><p><img src="/images/DSA/%E6%A0%88%E5%9B%BE.jpg" alt="栈结构图"></p></li><li><p>压栈图</p><p><img src="/images/DSA/%E5%8E%8B%E6%A0%88%E5%9B%BE.jpg" alt="压栈图"></p></li><li><p>弹栈图</p><p><img src="/images/DSA/%E5%BC%B9%E6%A0%88%E5%9B%BE.jpg" alt="弹栈图"></p></li><li><p>栈实现</p><ul><li>由于栈是一个表，因此任何实现表的方法都可以用来实现栈。主要有两种方式，链表实现和数组实现。</li></ul></li><li><p>链表实现块</p><ul><li>可以使用单链表来实现栈。通过在表顶端插入一个元素来实现 PUSH，通过删除表顶端元素来实现 POP。使用链表方式实现的栈又叫<strong>动态栈</strong>。动态栈有链表的部分特性，即元素与元素之间在物理存储上可以不连续，但是功能有些受限制，动态栈只能在栈顶处进行插入和删除操作，不能在栈尾或栈中间进行插入和删除操作</li></ul></li><li><p>数组实现块</p><ul><li>栈也可以用数组来实现。使用数组方式实现的栈叫<strong>静态栈</strong>。</li></ul></li></ul><h4 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h4><ul><li>子程序的调用，在跳往子程序前，会将下一个指令的地址存到堆栈中，知道子程序执行完后再将地址取出，以回到原来的程序中。</li><li>处理递归调用：和子程序的调用类似，只是除了存储下一个指令的地址外，也将参数，区域变量等数据存入堆栈中。</li><li>表达式的转换：【中缀表达式转后缀表达式】与求值（）实际解决</li></ul><h4 id="栈的快速入门"><a href="#栈的快速入门" class="headerlink" title="栈的快速入门"></a>栈的快速入门</h4><ul><li><p>练习：使用数组来模拟栈</p><pre class="line-numbers language-Java"><code class="language-Java">public class ArrayStack {    //定义栈的大小    private int maxStack;    //定义一个数组来模拟栈    private int[] stack;    //栈帧所在的位置，默认情况下没有数据返回-1    private int top = -1;    //使用构造函数初始化栈的大小    public ArrayStack(int maxStack) {        this.maxStack = maxStack;        stack = new int[maxStack];    }    /**     * 压栈     * 弹栈     * 判断栈中是否为空     * 判断栈中是否已满     */    /**     * 先判断是否为空栈     */    public boolean isNull(){        return this.top == -1;    }    /**     * 判断是否为满栈     */    public boolean isFull(){        return this.top == stack.length-1;    }    /**     * 压栈     */    public void posh(int i){        //先判断栈是否满栈，若满栈则抛出异常        if (isFull()){            throw new RuntimeException("栈已满！！");        }        stack[++top] = i;    }    /**     * 弹栈     */    public int pop(){        //先判断栈是否为空        if (isNull()){            throw new RuntimeException("栈已空！！");        }        int value = stack[top--];        return value;    }    /**     * 查看栈中所有的元素     */    public void list(){        if (isNull()){            throw new RuntimeException("空栈，没有找到数据");        }        for (int i : stack) {            System.out.println(i);        }    }    /**     * 栈中元素的个数     */    public int length(){        return this.top+1;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试：使用模拟的栈来测试一个字符串是否是回文数据。</p><ul><li>回文数据：就是压栈前，与弹栈后的字符串相同</li><li>例如：aba  ,  abcba就是回文数据</li></ul><pre class="line-numbers language-Java"><code class="language-Java">public class TestApp {    public static void main(String[] args) {        /**         * 回文数据         * 回文：aba   abcdcba         * 回文就是正反过来数据不会变         * 下面，由模拟的栈来判断一个字符串是否是回文数据         */        boolean abc = method("aba");        System.out.println(abc);    }    //定义方法，调用栈来测试字符串是否为回文数据    public static boolean method(String s){        /**         * 初始化栈对象         */        ArrayStack arrayStack = new ArrayStack(10);        /**         * 获取字符串         * 将字符串压入栈中         */        for (int i = 0; i < s.length(); i++) {           arrayStack.posh(s.charAt(i));        }        /**         * 获取栈中的数据         */        //定义一个字符串        String s1 = "";        int length = arrayStack.length();        for (int i = 0; i < length; i++) {            if (arrayStack.isNull()){                throw new RuntimeException("空栈");            }            char pop = (char)arrayStack.pop();            s1 += pop;        }        return s.equals(s1);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h4 id="链表（Linked-List）介绍"><a href="#链表（Linked-List）介绍" class="headerlink" title="链表（Linked List）介绍"></a>链表（Linked List）介绍</h4><p>- </p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/08/21/JDBC/"/>
      <url>/2022/08/21/JDBC/</url>
      
        <content type="html"><![CDATA[<h1><center>JDBC</center><hr><h2 id="JDBC的概述"><a href="#JDBC的概述" class="headerlink" title="JDBC的概述"></a>JDBC的概述</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>JDBC（Java DataBase Connectivity）就是Java数据库连接，即一套使用Java语言来操作数据库的编程接口，也可以认为是一组规范。</li></ul><h4 id="JDBC-的原理"><a href="#JDBC-的原理" class="headerlink" title="JDBC 的原理"></a>JDBC 的原理</h4><ul><li>早期SUN公司的天才们想编写一套可以连接天下所有数据库的API，但是当他们刚刚开始时就发现这是不可完成的任务，因为各个厂商的数据库服务器差异太大了。后来SUN开始与数据库厂商们讨论，最终得出的结论是，由SUN提供一套访问数据库的规范（就是一组接口），并提供连接数据库的协议标准，然后各个数据库厂商会遵循SUN的规范提供一套访问自己公司的数据库服务器的API出现。SUN提供的规范命名为JDBC，而各个厂商提供的，遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动！</li></ul><h4 id="程序员，JDBC，JDBC驱动的关系"><a href="#程序员，JDBC，JDBC驱动的关系" class="headerlink" title="程序员，JDBC，JDBC驱动的关系"></a>程序员，JDBC，JDBC驱动的关系</h4><ul><li><p>三方关系</p></li><li><p>SUN公司是规范制定者，制定了规范JDBC（连接数据库规范）</p><p>数据库厂商微软、甲骨文等分别提供实现JDBC接口的驱动jar包</p><p>程序员学习JDBC规范来应用这些jar包里的类。</p><p><img src="/images/JDBC/%E4%B8%89%E8%A7%92%E5%85%B3%E7%B3%BB.png" alt="三角关系"></p></li><li><p>总结：</p></li><li><p>简单地说，JDBC 可做三件事：与数据库建立连接、发送指令操作数据库并处理结果。</p></li></ul><hr><h2 id="JDBC操作数据库的步骤"><a href="#JDBC操作数据库的步骤" class="headerlink" title="JDBC操作数据库的步骤"></a>JDBC操作数据库的步骤</h2><h4 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h4><ol><li><p>官网下载驱动包</p></li><li><p>加载一个Driver驱动</p></li><li><p>创建数据库连接（Connection）</p></li><li><p>创建SQL命令发送器Statement</p></li><li><p>创建SQL</p></li><li><p>通过Statement发送SQL命令并得到结果</p></li><li><p>处理SQL结果（select语句）</p></li><li><p>关闭数据库资源</p><ul><li><p>ResultSet</p></li><li><p>Statement</p></li><li><p>Connection</p></li></ul></li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="创建数据库及数据表"><a href="#创建数据库及数据表" class="headerlink" title="创建数据库及数据表"></a>创建数据库及数据表</h4><ul><li>在navicat Premium 15或者dos窗口中创建一个自己的数据库</li><li>在创建的数据库中创建自己的数据表</li></ul><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ul><li>在idea中新建一个自己的项目</li></ul><h4 id="创建lib目录并引入MySQL驱动包"><a href="#创建lib目录并引入MySQL驱动包" class="headerlink" title="创建lib目录并引入MySQL驱动包"></a>创建lib目录并引入MySQL驱动包</h4><ul><li>在项目下新建一个lib目录</li><li>在目录中引入MySQL驱动包</li><li>在把lib包引入项目环境中</li></ul><hr><h2 id="使用JDBC完成数据的添加操作"><a href="#使用JDBC完成数据的添加操作" class="headerlink" title="使用JDBC完成数据的添加操作"></a>使用JDBC完成数据的添加操作</h2><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>加载MySQL的JDBC驱动</p></li><li><p>建立数据的连接</p></li><li><p>创建SQL命令的发送器</p></li><li><p>编写SQL</p></li><li><p>使用SQL命令发送器发送SQL命令并得到结果</p></li><li><p>处理结果</p></li><li><p>关闭数据库资源</p></li></ol><h4 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h4><ul><li><p>Java</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Test01Add {    // 驱动器路径    private static final String DRIVER = "com.mysql.jdbc.Driver";    //连接数据库地址    private static final String URL = "jdbc:mysql://localhost:3306/whpowernode?useUnicode=true&useSSL=false&characterEncoding=UTF8";    //数据库用户名    private static final String USER_NAME = "root";    //数据库密码    private static final String USER_PASSWORD = "123456";        public static void main(String[] args) throws ClassNotFoundException, SQLException {        // 加载JDBC访问Oracle的驱动        Class.forName(DRIVER);        // 建立和数据库的连接        Connection conn = DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        // 创建SQL命令发送器        Statement stmt = conn.createStatement();        // 使用SQL命令发送器发送SQL命令并得到结果        String sql = "insert into student values(1,'小刚',32,'男','湖北省武汉市')";        int n = stmt.executeUpdate(sql);        // 处理结果        if (n > 0) {            System.out.println("添加成功");        } else {            System.out.println("添加失败");        }        // 关闭数据库资源        stmt.close();        conn.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="URL详解"><a href="#URL详解" class="headerlink" title="URL详解"></a>URL详解</h4><ul><li><p>为什么要定义URL</p><ul><li>Java和MySQL是厂商的，Java程序和MySQL数据库此时不在同一个进程下，此时Java程序需要向MySQL发送请求。</li></ul></li><li><p>如何发送请求</p><pre class="line-numbers language-MYSQL"><code class="language-MYSQL">jdbc:mysql://localhost:3306/whpowernode?useUnicode=true&useSSL=false&characterEncoding=UTF8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="使用JDBC完成更新和删除操作"><a href="#使用JDBC完成更新和删除操作" class="headerlink" title="使用JDBC完成更新和删除操作"></a>使用JDBC完成更新和删除操作</h2><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Test02Update {    // 驱动器路径    private static final String DRIVER = "com.mysql.jdbc.Driver";    //连接数据库地址    private static final String URL = "jdbc:mysql://localhost:3306/whpowernode?useUnicode=true&useSSL=false&characterEncoding=UTF8";    //数据库用户名    private static final String USER_NAME = "root";    //数据库密码    private static final String USER_PASSWORD = "123456";    public static void main(String[] args) throws ClassNotFoundException, SQLException {        // 加载Oracle的JDBC驱动        Class.forName(DRIVER);        // 建立数据的连接        Connection conn=DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        // 创建SQL命令的发送器        Statement stat=conn.createStatement();        // 编写SQL        String sql="update student set name='小明',age=23,sex='女',address='武汉' where id=1";        // 使用SQL命令发送器发送SQL命令并得到结果        int res=stat.executeUpdate(sql);        // 处理结果        if(res>0){            System.out.println("修改成功");        }        else{            System.out.println("处理失败");        }        // 关闭数据库资源        stat.close();        conn.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Test03Delete {    // 驱动器路径    private static final String DRIVER = "com.mysql.jdbc.Driver";    //连接数据库地址    private static final String URL = "jdbc:mysql://localhost:3306/whpowernode?useUnicode=true&useSSL=false&characterEncoding=UTF8";    //数据库用户名    private static final String USER_NAME = "root";    //数据库密码    private static final String USER_PASSWORD = "123456";    public static void main(String[] args) throws ClassNotFoundException, SQLException {        // 加载Oracle的JDBC驱动        Class.forName(DRIVER);        // 建立数据的连接        Connection conn=DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        // 创建SQL命令的发送器        Statement stat=conn.createStatement();        // 编写SQL        String sql="delete from student where id=1";        // 使用SQL命令发送器发送SQL命令并得到结果        int res=stat.executeUpdate(sql);        // 处理结果        if(res>0){            System.out.println("删除成功");        }        else{            System.out.println("删除失败");        }        // 关闭数据库资源        stat.close();        conn.close();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="DBUtils的简单封装"><a href="#DBUtils的简单封装" class="headerlink" title="DBUtils的简单封装"></a>DBUtils的简单封装</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li><p>我们为什么要封装，从以上代码可以看出，每一次写我们创建一个连接，创建一个发送SQL的对象，最后还要关闭，那么我们可以考虑把这重复的代码提取出来!</p></li><li><p>封装代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.utils;import java.io.Closeable;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;public class DBUtils {    // 驱动器路径    private static final String DRIVER = "com.mysql.jdbc.Driver";    // 连接数据库地址    private static final String URL = "jdbc:mysql://localhost:3306/whpowernode?useUnicode=true&useSSL=false&characterEncoding=UTF8";    // 数据库用户名    private static final String USER_NAME = "root";    // 数据库密码    private static final String USER_PASSWORD = "123456";    /**     * 静态加载驱动程序     */    static {        try {            Class.forName(DRIVER);        } catch (ClassNotFoundException e) {            e.printStackTrace();        }    }    /**     * @return 连接对象     */    public static Connection getConn() {        try {            return  DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        } catch (SQLException e) {            e.printStackTrace();            System.out.println("创建连接对象异常");        }        return null;    }    /**     * 关闭资源     */    public static void close(Connection conn,Statement statement) {        try {            if (statement != null) {                statement.close();            }        } catch (Exception e) {            e.printStackTrace();        }        try {            if (conn != null) {                conn.close();            }        } catch (Exception e) {            e.printStackTrace();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用JDBC完成查询"><a href="#使用JDBC完成查询" class="headerlink" title="使用JDBC完成查询"></a>使用JDBC完成查询</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.jdbc;import com.abc.utils.DBUtils;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class Test04Query {    public static void main(String[] args) throws ClassNotFoundException, SQLException {        Connection conn = DBUtils.getConn();        // 创建SQL命令发送器        Statement stmt = conn.createStatement();        // 编写SQL        String sql="select * from student";        // 使用SQL命令发送器发送SQL命令并得到结果        ResultSet rs=stmt.executeQuery(sql);        // 处理结果        while(rs.next()){            int id=rs.getInt(1);            String name=rs.getString(2);            int age=rs.getInt(3);            String sex=rs.getString(4);            String address=rs.getString(5);            System.out.println(id+"  "+name+"  "+age+"   "+sex+"   "+address);        }        // 关闭数据库资源        DBUtils.close(rs);        DBUtils.close(stmt);        DBUtils.close(conn);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="查询的扩展内容"><a href="#查询的扩展内容" class="headerlink" title="查询的扩展内容"></a>查询的扩展内容</h4><ul><li><p>查询多占位符时，使用<strong>非暴力</strong>获取属性</p></li><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">//获取所有成员的名称，封装到beanInfo中 BeanInfo beanInfo = Introspector.getBeanInfo(User.class, Object.class); //从beanInfo中提取出属性成员 PropertyDescriptor[] pd = beanInfo.getPropertyDescriptors(); //创建用户对象 T t = clz.newInstance(); //遍历，取出属性的name，然后通过name取出对应的setter方法 for (PropertyDescriptor descriptor : pd) {     //取出字段的名称     String name = descriptor.getName();     //通过字段名，获取对应的值     Object value = rs.getObject(name);     //获取set方法的方法对象     Method method = descriptor.getWriteMethod();     //执行set方法     method.invoke(t,value); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="分页查询案例"><a href="#分页查询案例" class="headerlink" title="分页查询案例"></a>分页查询案例</h4><ul><li><p>代码：封转分页类</p><pre class="line-numbers language-Java"><code class="language-Java">/** * 封装分页类 */public class Paging {    private int pageSize;//每页显示的条数    private int currentPage;//当前页    private List<?> listData;//当前页显示的数据    private int totalSize;//总条数    private int prePage;//上一页(计算)    private int nextPage;//下一页(计算)    private int totalPage;//总页数(计算)    //重载构造方法，用于没有数据的时候    public Paging(int currentPage,int pageSize) {        this(currentPage,0,pageSize,null);    }    public Paging(int currentPage,int totalSize,int pageSize,List<?> listData) {        this.pageSize = pageSize;        this.currentPage = currentPage;        this.listData = listData;        this.totalSize = totalSize;        //如果总条数为0，那么就不用计算了        if (totalSize == 0){            this.totalPage = 1;            this.prePage = 1;            this.nextPage = 1;            return;        }        //将需要计算的数据先算出来        //计算上一页        this.prePage = currentPage - 1 > 0 ? currentPage - 1 : currentPage;        //计算总页数        this.totalPage = totalSize % pageSize > 0 ? totalSize /pageSize + 1 : totalSize /pageSize;        //计算下一页        this.nextPage = currentPage + 1 > totalPage ? totalPage : currentPage + 1;    }    public int getPageSize() {        return pageSize;    }    public int getCurrentPage() {        return currentPage;    }    public List<?> getListData() {        return listData;    }    public int getPrePage() {        return prePage;    }    public int getNextPage() {        return nextPage;    }    public int getTotalPage() {        return totalPage;    }    public int getTotalSize() {        return totalSize;    }    @Override    public String toString() {        return "Paging{" +                "pageSize=" + pageSize +                ", currentPage=" + currentPage +                ", listData=" + listData +                ", totalSize=" + totalSize +                ", prePage=" + prePage +                ", nextPage=" + nextPage +                ", totalPage=" + totalPage +                '}';    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现分页</p><pre class="line-numbers language-Java"><code class="language-Java">public Paging pagingSelect(PagingObject pag) {        //先查询总条数        String sql = "select * from t_student";        List<User> users = DMLUtil.executeDql(sql, User.class);        if (users.size() == 0){            return new Paging(pag.getCurrentPage(),pag.getPageSize());        }        //如果有数据，开始查询        sql = "select * from t_student limit ?,?";        List<User> list = DMLUtil.executeDql(sql, User.class,pag.getindex(),pag.getPageSize());        return new Paging(pag.getCurrentPage(),users.size(),pag.getPageSize(),list);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具类</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.util;//执行查询的sql工具类public static <T> List<T> executeDql(String sql,Class<T> clz, Object...objs){        List<T> list = new ArrayList<>();        try {            conn = ds.getConnection();            ps = conn.prepareStatement(sql);            for (int i = 0; i < objs.length; i++) {                ps.setObject(i+1,objs[i]);            }            rs = ps.executeQuery();            while (rs.next()){                //获取所有成员的名称，封装到beanInfo中                BeanInfo beanInfo = Introspector.getBeanInfo(User.class, Object.class);                //从beanInfo中提取出属性成员                PropertyDescriptor[] pd = beanInfo.getPropertyDescriptors();                //创建用户对象                T t = clz.newInstance();                //遍历，取出属性的name，然后通过name取出对应的setter方法                for (PropertyDescriptor descriptor : pd) {                    //取出字段的名称                    String name = descriptor.getName();                    //通过字段名，获取对应的值                    Object value = rs.getObject(name);                    //获取set方法的方法对象                    Method method = descriptor.getWriteMethod();                    //执行set方法                    method.invoke(t,value);                }                list.add(t);            }            return list;        } catch (Exception throwables) {            throwables.printStackTrace();        } finally {            dqlRelease(conn,ps,rs);        }        return null;    }//分页查询用户操作的工具类package com.abc.paging;public class PagingObject {    private int currentPage = 1;//用户操作的当前页    private int pageSize = 3;//用户操作的每页显示条数    public int getindex(){        return (currentPage - 1 ) * pageSize;    }    public int getCurrentPage() {        return currentPage;    }    public void setCurrentPage(int currentPage) {        this.currentPage = currentPage;    }    public int getPageSize() {        return pageSize;    }    public void setPageSize(int pageSize) {        this.pageSize = pageSize;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><ul><li>事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</li></ul><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><ul><li>事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li></ul><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><ul><li>一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li></ul><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><ul><li>也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li></ul><h4 id="事务的运用"><a href="#事务的运用" class="headerlink" title="事务的运用"></a>事务的运用</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">public class Test08Transaction {    public static void main(String[] args) {        //声明连接对象        Connection conn=null;        //声明发送SQL的接口对象        Statement stmt=null;        try {            //创建连接对象            conn = DBUtils.getConn();            // 开启事务，关闭自动提交事务            conn.setAutoCommit(false);            // 编写SQL            String sql1 = "update account set amount = amount-1000 where aid=1";            String sql2 = "update account set amount = amount+1000 where aid=2";            // 创建SQL命令发送器            stmt = conn.createStatement();            stmt.executeUpdate(sql1);            stmt.executeUpdate(sql2);            conn.commit();//手动提交        }catch (Exception e){            e.printStackTrace();            try {                //回滚事务                conn.rollback();            } catch (SQLException e1) {                e1.printStackTrace();            }        }finally {            // 关闭数据库资源            DBUtils.close(stmt);            DBUtils.close(conn);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意：</strong>不管事务是否成功，最后都需要回滚。当执行中报异常使代码无法手动提交事务时，也需要回滚，此时回滚是起到<strong>释放锁</strong>的作用。</li></ul></li></ul><hr><h2 id="JDBC批处理"><a href="#JDBC批处理" class="headerlink" title="JDBC批处理"></a>JDBC批处理</h2><h4 id="什么是批处理"><a href="#什么是批处理" class="headerlink" title="什么是批处理"></a>什么是批处理</h4><ul><li><p>批处理是建立一次连接(创建一个Connection对象)的情况下批量执行多个DML语句，这些DML语句要么全部成功要么全部失败。如何确保全部成功or全部失败呢？在JDBC中开启事务，使用事务管理DML语句。</p></li><li><p>例如：使用批处理根据id批量的删除student表中的数据</p><ol><li>定义SQL配置文件</li><li>创建Connection对象</li><li>创建PreparedStatement对象</li><li>将提交方式设置为手动提交，开启事务</li><li>设置占位符</li><li>将占位符添加到批处理中（相当于收集若干个本子，放入包包中）</li><li>执行批处理</li><li>提交事务</li><li>如果批处理失败，在catch块中回滚事务</li><li>关闭资源</li></ol><pre class="line-numbers language-Java"><code class="language-Java">public class Test09Batch {    public static void main(String[] args) {        //模拟要删除的数据        List<Integer> ids= Arrays.asList(1,2,3,4,5);        //声明连接对象        Connection conn=null;        //声明发送SQL的接口对象        PreparedStatement pstmt=null;        try {            //创建连接对象            conn = DBUtils.getConn();            // 关闭自动提交事务            conn.setAutoCommit(false);            // 编写SQL            String sql = "delete from student where id = ?;";            // 创建SQL命令发送器            pstmt = conn.prepareStatement(sql);            for (Integer id : ids) {                pstmt.setInt(1,id);                pstmt.addBatch();            }            int[] rows = pstmt.executeBatch();            System.out.println("受影响的行数为:"+Arrays.toString(rows));            conn.commit();        }catch (Exception e){            e.printStackTrace();            try {                conn.rollback();            } catch (SQLException e1) {                e1.printStackTrace();            }        }finally {            // 关闭数据库资源            DBUtils.close(pstmt);            DBUtils.close(conn);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h4 id="连接池概念"><a href="#连接池概念" class="headerlink" title="连接池概念"></a>连接池概念</h4><ul><li><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p><p>连接池是装有连接的容器，使用连接的话，可以从连接池中进行获取，使用完成之后将连接归还给连接池。</p></li></ul><h4 id="为什么使用连接池"><a href="#为什么使用连接池" class="headerlink" title="为什么使用连接池"></a>为什么使用连接池</h4><ul><li>连接对象创建和销毁是需要耗费时间的，在服务器初始化的时候就初始化一些连接。把这些连接放入到内存中，使用的时候可以从内存中获取，使用完成之后将连接放入连接池中。从内存中获取和归还的效率要远远高于创建和销毁的效率。（提升性能）。</li></ul><h4 id="创建一个连接池"><a href="#创建一个连接池" class="headerlink" title="创建一个连接池"></a>创建一个连接池</h4><ul><li><p>代码</p><pre class="line-numbers language-Java"><code class="language-Java">//创建连接池对象DruidDataSource ds = new DruidDataSource();//从连接池中获取驱动ds.setDriverClassName(properties.getProperty("driverClassName"));//从连接池中获取链接ds.setUrl(properties.getProperty("url"));ds.setUsername(properties.getProperty("username"));ds.setPassword(properties.getProperty("password"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用配置文件封装连接池"><a href="#使用配置文件封装连接池" class="headerlink" title="使用配置文件封装连接池"></a>使用配置文件封装连接池</h4><ul><li><p>代码</p></li><li><p>编写配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///test</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：使用配置文件封装连接池时，配置名必须是以上名称，否则，连接池读取不到配置信息</li></ul></li><li><p>完整封装代码</p><pre class="line-numbers language-Java"><code class="language-Java">package com.abc.util;import com.alibaba.druid.pool.DruidDataSource;import java.io.IOException;import java.io.InputStream;import java.util.Properties;public class DruidUtil {    private DruidUtil() {    }    private static DruidDataSource ds = null;    /**     * 获取驱动，链接的方法     */    static{        InputStream is = Thread.currentThread().getContextClassLoader()                .getResourceAsStream("db.properties");        Properties properties = new Properties();        //创建连接池对象        ds = new DruidDataSource();        try {            properties.load(is);            //从连接池中获取驱动            ds.setDriverClassName(properties.getProperty("driverClassName"));            //从连接池中获取链接            ds.setUrl(properties.getProperty("url"));            ds.setUsername(properties.getProperty("username"));            ds.setPassword(properties.getProperty("password"));        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * 返回一个Druid的方法     */    public static DruidDataSource druidDS(){        return ds;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注：以上代码中的<strong>连接池部分</strong>可以继续封装成<strong>工厂</strong>来调用</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/15/hello-world/"/>
      <url>/2022/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 世界 ！你好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaSE</title>
      <link href="/2022/08/14/javase/"/>
      <url>/2022/08/14/javase/</url>
      
        <content type="html"><![CDATA[<h1><center>javase</center></h1><hr><h2 id="编程语法及规则与规范"><a href="#编程语法及规则与规范" class="headerlink" title="编程语法及规则与规范"></a>编程语法及规则与规范</h2><h4 id="编辑阶段的整体注意点"><a href="#编辑阶段的整体注意点" class="headerlink" title="编辑阶段的整体注意点"></a>编辑阶段的整体注意点</h4><ul><li><p>见名知意、注意缩进、成对编程；</p></li><li><p>严格区分大小写，英文大写字母与小写字母意义不一样；</p></li><li><p>都是英文标点符号；</p><p>–&gt; 经典错误：”非法字符”：’\uff09’ –&gt; 使用了中文的标点符号；</p></li><li><p>main方法写法固定，是程序的入口，能被虚拟机识别并执行。</p></li></ul><h4 id="关于定义类的注意点？"><a href="#关于定义类的注意点？" class="headerlink" title="关于定义类的注意点？"></a>关于定义类的注意点？</h4><ul><li><p>使用public修饰的类，该类的名字必须和源文件名字保持一致，否则就会编译错误；</p></li><li><p>在源文件中，我们可以使用class来定义任意多个类，编译后就会生成任意多个字节码文件。</p><p>–&gt; 编译后，没有类都会生成一个字节码文件，并且字节码文件名字就是类名。</p></li><li><p>在源文件中，我们可以定义多个类，但是最多只能有一个类使用public修饰（0或1）。</p></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ol><li>单行注释<ul><li>快捷键：ctrl + &#x2F;</li><li>语法：&#x2F;&#x2F;</li></ul></li><li>多行注释<ul><li>快捷键：ctrl + shift + &#x2F;</li><li>语法：&#x2F;* 注释内容 *&#x2F;</li></ul></li><li>文档注释<ul><li>语法：&#x2F;** 注释内容 *&#x2F;</li></ul></li></ol><h4 id="常见的转义字符"><a href="#常见的转义字符" class="headerlink" title="常见的转义字符"></a>常见的转义字符</h4><ul><li>\t –&gt; 制表符。作用：显示多个空格，并且还有对齐的功能；</li><li>\n –&gt; 换行符。作用：具有换行功能。</li><li>\“，编译时，把它当成一个整体，不作为字符串结束的标记；运行时，会忽略反斜杠，只会展示出一个双引号。</li><li>\‘，编译时会把它当成一个整体，运行时只会展示出一个单引号。</li></ul><h4 id="关于字符的使用"><a href="#关于字符的使用" class="headerlink" title="关于字符的使用"></a>关于字符的使用</h4><ol><li><p>方式一：把字符放在字符串内部使用！</p><ul><li>System.out.println(“hello\tworld”);</li></ul></li><li><p>方式二：把字符串单独使用，然后再使用+来拼接。</p><ul><li>System.out.println(“hello” + ‘\t’ + “world”);</li></ul><p><strong>注意：</strong></p><ul><li>int类型和char类型做“+”运算，则做的是“加法操作”。</li><li>String类型和char类型做“+”运算，则做的是“连接符操作”。</li></ul></li><li><p>关于Unicode值得补充</p><ul><li>因为java语言默认采用Unicode编码表，因此每个”字符”都对应一个Unicode值，其中一个Unicode值我们必须掌握</li><li>‘\u0000’代表的是空格字符</li></ul></li></ol><h4 id="理解编译和反编译"><a href="#理解编译和反编译" class="headerlink" title="理解编译和反编译"></a>理解编译和反编译</h4><p>编译：把源文件编译为字节码文件，也就是把”*.java”文件编译为”.class”文件</p><p>反编译：把字节码文件编译为源文件。</p><p><strong>反编译的实现方式：</strong></p><p><strong>方式一：提供javap.exe来实现</strong></p><ul><li>实现：在字节码文件所在目录中，我们通过javap.exe来实现反编译，例如:javap HelloWorld04</li><li>优点：能看到编译时期默认做的操作，例如<strong>能看到编译时期默认提供的无参构造方法</strong>。</li><li>缺点：反编译之后，我们无法看到方法内部的具体实现，也就是看不到方法体。</li></ul><p><strong>方法二：通过jd-gui.exe来实现</strong></p><ul><li>实现：打开jd-gui.exe程序，然后把需要反编译的字节码文件拖拽进入jd-gui.exe程序中即可。</li><li>优点：反编译之后，<strong>我们能够看到方法内部的具体实现，也就是能看到方法体。</strong></li><li>缺点：不能看到编译时期默认做的操作，例如无法看到编译时期默认提供的无参构造方法。</li></ul><p><strong>方法一与方法二可以看作是互补的。</strong></p><h4 id="文件存储的的单位"><a href="#文件存储的的单位" class="headerlink" title="文件存储的的单位"></a>文件存储的的单位</h4><p>实际开发中，我们把字节称之为文件存储的最小单位。</p><p>开发中，<strong>字节有两种表示方式</strong>，分别为：</p><ol><li><p>无符号表示</p><p>（只能表示正数，不能表示负数）</p><ul><li>1个字节无符号表示的数值范围在【0,2^8-1】之间，也就是表示范围在【0,255】之间。</li><li>作用：基本数据类型中，char类型采用的就是无符号来表示。</li></ul></li><li><p>有符号表示</p><p>（不但能表示正数，还能表示负数）</p><ul><li>1个字节有符号表示的数值范围在[-2^ 7,2^7-1]之间，也就是表示范围在[-128,127]之间。</li><li>作用：基本数据类型中，byte、short、int和long类型采用的就是有符号来表示。</li></ul></li><li><p>常见的文件存储单位及其换算公式</p><ul><li>1KB &#x3D; 1024Byte</li><li>1MB &#x3D; 1024KB</li><li>1GB &#x3D; 1024MB</li></ul></li><li><p>问题</p><p>：长度单位的换算使用的是1000，为什么文件存储单位换算使用的是1024呢？</p><ul><li>答：二进制早期有电信号开关演变而来，也就是意味着文件存储的换算肯定使用的是2的多少次方，而2的10次方结果就是1024，也就是2^10是最接近于1000的整数，因此就使用了1024来作为文件存储的换算值。</li></ul></li></ol><h4 id="标识符的作用"><a href="#标识符的作用" class="headerlink" title="标识符的作用"></a>标识符的作用</h4><ul><li>标识符就是给类名、方法名、变量名、常量名和包名命名的规则。</li></ul><h4 id="标识符的规则"><a href="#标识符的规则" class="headerlink" title="标识符的规则"></a>标识符的规则</h4><ol><li>必须由数字、字母、下划线和&amp;组成，并且开头不能是数字。</li><li>标识符不能是关键字或保留字，因为关键字和保留字是给编程语言使用。</li><li>在java语言中，对于标识符的长度没有任何限制，也就是标识符可以任意长。<ul><li>补充：java语言默认采用Unicode编码表，而Unicode编码表几乎包含了全世界所有的文字。</li><li>注意：此处的“字母”我们应该广义地去理解，也就是此处“字母”可以是“英文”，也可以是“中文”。</li><li>建议：给标识符进行命名的时候，我们不建议使用“中文汉字”来进行命名。</li></ul></li></ol><h4 id="命名规范的讲解"><a href="#命名规范的讲解" class="headerlink" title="命名规范的讲解"></a>命名规范的讲解</h4><p>明确：命名的时候不建议使用”中文汉字“，并且还必须做到“见名知意”的要求。</p><p>类名：必须遵守“大驼峰”的命名规范，大驼峰：每个单词首字母都大写。</p><ul><li>例如：HelloWorld、VariableDemo</li></ul><p>方法名、变量名：必须遵守“小驼峰”的命名规则，小驼峰：第一个单词首字符小写，从第二个单词起首字母都大写。</p><ul><li>例如：userName、maxValue</li></ul><p>常量名：必须遵守“字母全部大写，多个单词之间以下划线连接”的命名规范。</p><ul><li>例如：USER、NAME</li></ul><p>包名：必须遵守“单词全部小写，多个单词之间以 ‘.’ 连接，并且必须做到顶级域名倒着写”的命名规范。</p><hr><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h4><ol><li><p><strong>基本数据类型【八大基本数据类型】</strong></p><ul><li><p>整数型：byte、short、int、long</p></li><li><p>浮点数：float、double</p></li><li><p>布尔型：boolean</p></li><li><p>字符型：char</p></li></ul></li><li><p><strong>引用数据类型</strong></p><ul><li>数组、字符串、类和接口等等</li></ul></li><li><p><strong>整数型（有符号表示）</strong></p><ul><li><p>byte，占用1个字节，则表示范围在[-2^7, 2^7-1]之间，–&gt; [-128, 127]。</p></li><li><p>short, 占用2个字节，[-2^15, 2^15-1], –&gt; [-32768,32767]。</p></li><li><p>int, 占用4个字节，[-2^31, 2^31-1], –&gt; 大概在正负21亿之间。</p></li><li><p>long, 占用8个字节，[-2^63, 2^63]。</p></li><li><p><strong>注意：</strong></p><ul><li><p>占用的字节数越大，则表示的数值范围也就越大，开发中我们需要根据存储数值的大小来选择合适的数据类型。</p><p>–&gt; 存储的数值大小不能超出其数据类型的表示范围，否则就会编译错误。</p><p>–&gt; 实际开发中，byte和short几乎不会使用。存储较小的数值使用int，存储较大的数值使用long。</p></li><li><p>开发中，只能使用八进制、十进制、十六进制来表示整数，不能“直接”使用二进制来表示整数。</p><ol><li>int num1 &#x3D; 017：八进制；</li><li>int num1 &#x3D; 23：十进制；</li><li>int num1 &#x3D; 0x2B：十六进制；</li></ol></li><li><p>整数固定值常量默认为int类型,在整数固定值常量的末尾添加”L”【推荐】或”l”，则该常量就变为Long类型。</p></li></ul></li></ul></li><li><p><strong>浮点型（小数）</strong></p><ul><li>float，占用4个字节，我们称之为“单精度类型”，理论上能精确到小数点后7位。</li><li>double，占用8个字节，我们称之为“双精度类型”，理论上精确度是float的两倍。</li></ul><p><strong>注意：</strong></p><ul><li><p>占用的字节数越大，则表示小数的精确度就越高，开发中我们建议使用double类型。</p><p>–&gt; 开发中，float类型很少使用，因为精确度太低，而double类型很常用。</p></li><li><p>小数的表示方式有：1）生活中的表示小数；2）使用科学计数法来表示小数。</p><p>–&gt; 3.14E3，等效于：3140.0 –&gt; “乘以10的3次方”</p><p>–&gt; 3.14E-3，等效于：0.00314 –&gt; “除以10的3次方”</p></li><li><p>注意：使用科学计数法来表示小数的时候，此处的英文字母不区分大小写（E或e）。</p></li><li><p>因为小数存储的区别，因此不建议使用小数来做特别精确的运算，因为得到结果可能不精确。</p><p>–&gt; double sum &#x3D; 0.001 + 0.0002; 理论结果是：0.0003 实际结果：0.000300000000000000000003</p></li><li><p>小数固定值常量默认为double类型，在小数固定值常量末尾添加”F”【推荐】或”f”，则该常量就变为：float类型。</p></li><li><p>浮点型占用的字节数，强调的是存储”小数部分”占用的字节数，并不是强调存储”整数部分”占用的字节数。</p><p> <strong>–&gt; float类型存储”整数部分占用8个字节”，存储”小数部分占用4个字节”，总计至少占用12个字节。</strong>【底层（科学计数法）】</p></li></ul></li><li><p><strong>布尔型(boolean)</strong></p><ul><li><p>明确：布尔类型的固定值常量只有true和false，并且true和false都是关键字。</p><p>–&gt; true：表示为真或条件成立</p><p>–&gt; flase：表示为假或条件不成立</p></li><li><p>使用场合：常用于条件判断，条件成立则返回true，条件不成立则返回false。</p></li><li><p><strong>面试题：请问boolean类型占用几个字节？</strong></p><p>–&gt; 在java规范中，没有明确boolean类型占用几个字节。我个人觉得boolean类型占用x个字节，并说出理由！</p></li></ul></li><li><p><strong>字符型(char，无符号表示)</strong></p><ul><li>明确：字符型占用2个字节数，表示的数值范围在[0,2^16-1]之间，也就是表示范围在[0,65535]之间。</li><li>注意：使用单引号包裹的一个字符串，我们就称之为字符固定值常量。</li></ul></li><li><p><strong>字符串类型？</strong></p><ul><li><p>明确：字符串类型的名字叫做String类型，并且String类型属于”引用数据类型”。</p></li><li><p>注意：使用双引号包裹的任意多个字符，我们就称为“字符串固定值常量”。</p><p>–&gt; 双引号包裹的0个字符，我们就称之为”空字符串”。</p></li></ul></li><li><p><strong>关于”+”的作用</strong></p><ul><li>表示正数。eg:int num &#x3D; +8;</li><li>加法运算，要求两个操作数都必须是数值型。eg:int sum &#x3D; 5 + 8;</li><li>连接符，要求其中一个操作数必须是字符串类型。eg:”hello” + true;</li><li>结论：字符串的连接符操作，则运算完毕后返回的结果肯定属于String类型。</li></ul></li></ol><h4 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h4><ol><li><p>为什么需要学习数据类型的转换?</p><ul><li>因为java是强类型的语言，因此参与“赋值运算”和“算数运算”的时候，要求参与运算的数据类型必须保持一致，否则就需要做数据类型转换。</li></ul></li><li><p>基本数据类型转换的方式有哪些？</p><ul><li>隐式类型转换（自动）</li><li>强制类型转换（手动）</li></ul></li><li><p>哪些基本数据类型可以相互转换？</p><ul><li>除了boolean类型外，其余的基本数据类型都可以相互转换。</li></ul></li><li><p>隐式类型转换（自动）</p><ul><li>原则：低字节向高字节自动提升。</li><li>byte –&gt; short –&gt; int –&gt; long –&gt; float –&gt; double</li><li>char –&gt; int</li></ul><p>赋值运算：</p><ul><li><p>原则：低字节向高字节自动提升。</p></li><li><p>特例：把int类型的常量，赋值给byte、short和char类型的变量或final修饰的常量时，则就是属于隐式类型转换的特例。只需赋值的数据没有超出其数据类型的表示范围即可。</p><p>–&gt; 赋值的数据应该是什么？赋值的数据应该是int类型的常量！</p><p>–&gt; 赋值数据的大小是什么？赋值数据的大小不能超出其数据类型的表示范围。</p></li></ul><p>算术运算</p><p> 原则：两个操作数做运算，如果其中一个操作数为double类型，则另外一个操作数也会隐式转化为double类型；<strong>否则</strong>，如果其中一个操作数为float类型，则另外一个操作数也会隐式转化为float类型，最终计算结果就是float类型；<strong>否则</strong>，如果其中一个操作数为long类型，则另外一个操作数也会隐式转化为long类型，最终计算结果就是long类型;<strong>否则</strong>，这两个操作数都会隐式转化为int类型，最终计算的结果就是int类型。</p></li></ol><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li><p>当隐式类型转换无法解决问题时，我们要采用强制类型转换。</p></li><li><p>语法：目标类型 变量 &#x3D; （目标类型） 数据；</p><p>eg: int num &#x3D; (int) 3.14; –&gt; 可以用来小数取整。【<strong>一、想要的精度丢失</strong>】</p></li><li><p><strong>底层：只保留低位字节的二进制，高位字节的二进制就丢弃。</strong></p></li><li><p>注意：使用强制类型转换的时候，可能就丢失精度，使用的时候切记。【<strong>二、不想要的精度丢失</strong>】</p><p>–&gt; int num &#x3D; (int) 3.14; 只保留了整数位，丢失了小数位。</p></li><li><p><strong>强制类型转换后，被强制转换的变量还是原来的数据类型。</strong></p><p>eg: int num; byte num1 &#x3D; (int) num; –&gt; num (int类型)</p></li><li><p>使用强制类型转换的时候，我们必须明确强制转换数据的范围，否则得到的结果就不准确。</p></li></ul><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li>“&#x3D;”，作用：把等号右边表达式的结果赋值给等号左边的变量或final修饰的常量保存。</li></ul><h4 id="算法运算符的分类"><a href="#算法运算符的分类" class="headerlink" title="算法运算符的分类"></a>算法运算符的分类</h4><ol><li><p>一元运算符（只需要一个操作数参与运算）</p><p>包含：++、–</p></li><li><p>二元运算符（需要两个操作数来参与运算）</p><ul><li><p>包含：+ 、-、*、&#x2F;、%</p></li><li><p>+：表示正数，加法运算，连接符操作；</p></li><li><p>-：表示负数，减法运算；</p></li><li><p>*：乘法运算</p></li><li><p>&#x2F;：除法运算</p></li><li><p>%：取模运算或取余运算</p><p>–&gt; 作用：获得两个整数相除的余数</p><p>eg：0 % 3 &#x3D; 0 –&gt; <strong>注意：0能被任何数整除。</strong></p><p> 1 % 3 &#x3D; 1</p><p>注意：”除法运算”是获得两个整数相除的”整数位结果”，”取模运算”是获得两个整数相除的”余数”。</p><p>使用场合：</p><ul><li><p>判断m能否被n整除，如果m%n的结果为0，则意味着m能被n整除；如果m%n的结果不为0，则意味着m不能被n整除。</p></li><li><p>“任意数 % m”，则得到的结果肯定在[0,m - 1]之间，例如：”任何数 % 3”，则得到的结果肯定是在[0, 2]之间。</p></li></ul></li></ul></li></ol><h4 id="除法运算符的注意事项"><a href="#除法运算符的注意事项" class="headerlink" title="除法运算符的注意事项"></a>除法运算符的注意事项</h4><ul><li>在java语言中，两个整数做除法运算，则得到的结果肯定为整数。</li><li>在java语言中，做除法运算的时候，分母不能为0，否则就会抛出算数异常（ArithmeticException）。</li></ul><h4 id="比较运算的概述"><a href="#比较运算的概述" class="headerlink" title="比较运算的概述"></a>比较运算的概述</h4><ul><li><p>明确：比较运算符返回的结果肯定是boolean类型。</p></li><li><p>如果条件成立，则返回true；如果条件不成立，则返回false。</p></li><li><p>包含：&gt; 、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</p></li><li><p>&#x3D;&#x3D;（等于），判断左右两边的结果是否相等。</p><p>–&gt; 如果左右两边属于“基本数据类型”，则比较左右两边的“数据值”是否相等（掌握）。</p><p>–&gt; 如果左右两边属于“引用数据类型”，则比较左右两边的“地址值”是否相等（了解）。</p></li><li><p>!&#x3D;（不等于），判断左右两边的结果是否不相等。</p><p>–&gt; 如果左右两边属于“基本数据类型”，则比较左右两边的“数据值”是否不想等（掌握）。</p><p>–&gt; 如果左右两边属于“引用数据类型”，则比较左右两边的“地址值”是否不相等（了解）。</p></li><li><p>注意点：</p><ol><li>比较运算符是一个整体，中间不允许条件空格！</li><li>注意区分“&#x3D;”和“”的区别，“&#x3D;”属于赋值运算符，“”属于比较运算符。</li></ol></li></ul><h4 id="逻辑运算符的概述"><a href="#逻辑运算符的概述" class="headerlink" title="逻辑运算符的概述"></a>逻辑运算符的概述</h4><ul><li><p>明确：参与逻辑运算的数据必须是boolean类型，并且逻辑运算符返回的结果肯定是boolean类型。</p></li><li><p>包含：&amp;、|、^、&amp;&amp;、||、!</p></li><li><p>&amp;（与运算符），属于二元运算符</p><p>–&gt; 结论：只要两边都为true，则结果就是true。</p><p> 只要有一边为false，则结果就是false。</p><p><strong>辅助记忆</strong>：小明“与”小红来一趟办公室。</p></li><li><p>|（或运算符），属于二元运算符</p><p>–&gt; 结论：只要两边都为false，则结果就是false。</p><p> 只要有一边为true，则结果就是true。</p><p>辅助记忆：小明“或”小红来一趟办公室。</p></li><li><p>^：异或运算，相同为false，不同为true。</p><p>———————–以上三个开发中不常用，但是结论很重要———————-</p><p>———————–以下三个开发中常用，并且结论也很重要———————-</p></li><li><p>&amp;&amp;（短路与），属于二元运算符</p><ol><li><p>结论1：&amp;和&amp;&amp;的执行结果一样。</p></li><li><p>结论2：&amp;&amp;当左侧表达式为false时，右边不执行，结果直接原样返回左侧结果为false。</p><p> &amp;&amp;当左侧表达式为true时，右边执行，结果直接原样返回右侧结果。</p></li></ol><p>||（短路或），属于二元运算符</p><ol><li><p>结论1：|和||的执行结果一模一样；</p></li><li><p>结论2：如果左侧表达式的结果为true，则右边表达式肯定不会执行，并且原样返回左侧表达式的结果(true)。</p><p> 如果左侧表达式的结果为false，则右侧表达式肯定会去执行，并且原样返回右侧表达式的结果(true|false)。</p></li></ol><p>!（非运算），属于一元运算符。</p><p><strong>使用场合：</strong></p><ul><li>如果<strong>两个条件必须成立才能满足需求</strong>，则这两个条件之间使用“&amp;&amp;”来组织关系；</li><li>如果<strong>两个条件其中一个成立既能满足需求</strong>，则这两个条件之间使用”||”来组织关系。</li></ul></li></ul><h4 id="位运算（了解，建议掌握）"><a href="#位运算（了解，建议掌握）" class="headerlink" title="位运算（了解，建议掌握）"></a>位运算（了解，建议掌握）</h4><ul><li><p>明确：参与位运算的数据应该是整数型，并且位运算返回的结果也是整数。</p></li><li><p>包含：&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</p></li><li><p>&amp;（与位运算），属于二元运算符</p><p>结论：位都为1，则结果就是1；位有一个为0，则结果就是0</p><p>使用场合：学习HashMap集合的时候，验证为啥底层的数组空间长度必须为2的整数次幂。</p></li><li><p>|（或为运算），属于二元运算符</p><p>结论：位都为0，则结果就是0；位有一个为1，则结果就是1</p></li><li><p>^（异或位运算），属于二元运算符</p><p>结论：位相同，则为0；位不同，则为1</p><p>特点：对m连续异或n两次，得到的结果依旧为m</p><p> –&gt; m^n ^ n 的结果为m，n^m ^n的结果为m，n ^ n ^ m的结果为m</p></li></ul><p>使用场合：</p><ol><li>使用异或位运算，我们可以实现对数据的”加密”和”解密”操作。<ul><li>加密：对需要加密的数据异或m，则就得到了加密后的结果。</li><li>解密：对加密后的数据继续异或m，则就得到了解密后的结果。</li></ul></li><li>使用异或位运算，用于交换两个变量的值。<ul><li>优点：效率非常高；</li><li>缺点：复杂、不好理解。</li></ul></li></ol><p>~（非位运算符），属于一元运算符</p><p>结论：二进制位取反的含义。0取反的结果就是1，1取反的结果就是0。</p><p>&lt;&lt; （左移位运算）</p><ul><li><p>结论：对m左移n位，则等效于：m * 2n</p><p>–&gt; 此处m可以是正数，也可以是负数！</p><p>特点：左移运算之后，则低位永远补0即可。</p><p>使用场合：对m做乘以2的操作，则最高效的方式为：m &lt;&lt; 1</p><p>(&gt;&gt;右移位运算)</p><ul><li><p>结论：对m右移n位，则等效于：m&#x2F;2n</p><p>–&gt; 此处m必须是正数，不能为负数！</p><p>特点：正数右移，则高位补0；负数右移，则高位补1</p><p>使用场合：对m做除以2的操作，则最高效的方式为：m&gt;&gt;1</p><p>–&gt; 此处m必须有正好，不能为负数！</p></li></ul><p>(&gt;&gt;&gt;无符号右移)</p><ul><li>无论对正数还是负数做无符号右移的操作，则高位永远补0即可。</li></ul></li></ul><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><ul><li><p>语法：数据类型 变量名 &#x3D; 条件表达式？表达式1 : 表达式2；</p></li><li><p>执行：如果”条件表达式”的结果为true，则执行”表达式1“，也就是”把表达式1*的结果赋值给等号左边的变量来保存。</p><p> 如果”条件表达式“的结果flase，则执行“表达式2”，也就是把“表达式2”的结果赋值给等号左边的变量来保存。</p></li><li><p>注意：if…else选择结构在某些情况下可以被三目运算符代替，毕竟这两者都是做的“二选一”的操作。</p></li></ul><hr><h2 id="循环选择结构"><a href="#循环选择结构" class="headerlink" title="循环选择结构"></a>循环选择结构</h2><h4 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h4><ul><li>代码自上而下，依次执行。</li></ul><h4 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h4><ul><li><p><strong>if选择结构</strong></p><ol><li>if单选结构<ul><li>概述：if(条件表达式){ &#x2F;&#x2F;当“条件表达式”的结果为true，则执行此处的代码。}</li><li>注意：<ol><li>此处的“条件表达式”返回的结果必须时Boolean型。</li><li>if选择结构依旧包含在顺序执行中，也就是顺序执行中包含了选择执行。</li></ol></li></ul></li><li>if双选结构</li><li>if多选结构<ul><li>在完整的if多选结构中，有且只能执行一个大括号中的代码（多选一）。</li><li>if，最前面，有且只能有一个（1）</li><li>else if，中间位置，可以有任意多个（0，1，2，…，n）</li><li>else，最后面，最多只能有一个（0或1）</li></ul></li><li>if选择结构的总结<ol><li>如果if选择结构中只有一行代码，则我们还可以省略大括号！省略大括号之后，则编译时会默认添加一个大括号，用于包裹if结构中的第一行代码。</li><li>建议：对于初学者而言，不建议省略if选择结构中的大括号，省略大括号之后可能会带来额外的问题。</li></ol></li></ol></li><li><p><strong>switch选择结构</strong></p><ul><li><p>关于switch关键字的注意点：</p><ul><li>此处“表达式”的结果必须是byte、short、int、char、String和枚举(后面学习)类型 ，别的类型都会编译错误！</li><li>“表达式”的结果不能是boolean类型，因此switch选择结构就不能对布尔类型的数据进行匹配！</li></ul></li><li><p>关于case关键字</p><ul><li><p>case关键字后面必须是“常量”,不能为“变量”，从而保证匹配的安全性！</p></li><li><p>在switch选择结构中，case后面不允许有多个“相同的”常量值，否则就会编译错误！</p></li><li><p>在此处“表达式”结果的类型和case后面“常量值”的类型必须保持一致，否则就会编译错误！</p><p>–&gt; 此处的数据类型必须“保持一致”，包含了“隐式类型转换”之后能保持一致。</p><p>–&gt; 因为“表达式”结果不支持boolean类型，因此case后面就不能为boolean类型的数据，也就是不支持区间判断。</p></li></ul></li><li><p>关于break关键字的注意点：</p><ul><li><p>一旦执行break关键字，则就会跳出switch选择结构，执行switch选择结构之后代码。</p></li><li><p>在switch选择结构中，我们可以省略break关键字，省略break关键字之后，则就会发生“穿透”，直到遇到下一个break才会结束“穿透”。</p></li></ul></li><li><p>关于default关键字的注意点：</p><ul><li>当switch选择结构中的所有case都无法匹配成功，则那么才会去执行default中的代码，此处的default类似于if选择结构中的else代码块。</li><li>在switch选择结构中，虽然可以省略default关键字，但是我们不建议省略，除非case都匹配所有的问题。</li></ul></li><li><p>强调：在某个case中定义的变量，则该变量就只能在当前作用域中使用，不能在别的case中使用！</p></li></ul></li></ul><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li><strong>for循环</strong><ul><li>for循环结构，我们也称为“带名字的代码块”或“带条件的代码块”，因此在“循环体”中定义的变量不能再循环之外使用。</li><li>在循环体定义的变量，每次执行循环体该变量都“出生”，每次循环体执行完毕该变量都“死亡”。</li><li>问题：想要在循环体中，每次操作的都是同一个变量，则该变量应该定义在哪里？–&gt; 必须定义在循环之前！</li><li>“循环条件表达式”返回的结果必须是boolean类型，但是“循环初始化表达式”和“循环后的操作表达式”没有特殊要求</li></ul></li><li><strong>while循环</strong><ul><li>while循环结构：先进行判断，若返回值为true则进行循环，反之则跳过循环</li></ul></li><li><strong>do…while循环</strong><ul><li>do…while循环：先将方法体执行一遍，然后进行判断，若返回值为true则进入循环，反之则跳过循环</li></ul></li></ul><hr><h2 id="方法的调用及内存分析"><a href="#方法的调用及内存分析" class="headerlink" title="方法的调用及内存分析"></a>方法的调用及内存分析</h2><h4 id="调用方法的内存分析（重点）"><a href="#调用方法的内存分析（重点）" class="headerlink" title="调用方法的内存分析（重点）"></a>调用方法的内存分析（重点）</h4><ol><li>栈内存的特点？<ul><li>栈内存具备“先进后出，后进先出”的特点，类似于生活中的“子弹夹”。</li></ul></li><li>调用方法的内存分析？<ul><li>调用方法的时候，则自动就会在栈内中开辟一个“栈帧”，用于执行该方法体中的代码。–&gt;入栈操作</li></ul></li><li>方法调用完毕的内存分析<ul><li>在方法体中一旦执行“return”关键字，则就证明方法调用完毕，那么调用方法时所开辟的“栈帧”就会被摧毁。–&gt; 弹栈操作</li></ul></li><li>问题：调用方法的时候，实参num1和num2与形参num1和num2是否有关系？<ul><li>答案：此处的“实参”和”形参”没有任何关系，仅仅是”名字”相同而已。</li></ul></li></ol><h4 id="方法的使用（重点）"><a href="#方法的使用（重点）" class="headerlink" title="方法的使用（重点）"></a>方法的使用（重点）</h4><ol><li><p>方法的使用原则</p><ul><li>先声明，后调用。</li></ul></li><li><p>方法声明的难点</p><ol><li>明确1：完成该功能，是否需要返回值。–&gt; 返回值类型</li><li>明确2：完成该功能，是否需要外部参数参与方法内部的运算。 –&gt; 形参列表</li></ol></li><li><p><strong>方法的分类</strong></p><ol><li><p>无参无返回值方法</p><ul><li><p>需求：在方法中输出“hello world”。</p></li><li><p>分析：完成该功能，无需返回值，因此返回值类型为void。</p><p> 完成该功能，无需外部参数参与方法内部运算，因此没有形参。</p></li></ul></li><li><p>无参有返回值方法</p><ul><li><p>需求：调用方法获得常量3+4的和。</p></li><li><p>分析：完成该功能，需要返回值，因此返回值类型为int。</p><p> 完成该功能，无需外部参数参与方法内部的运算，因此没有参数</p></li></ul></li><li><p>有参无返回值方法</p><ul><li><p>需求：在方法中输出指定两个int数据之和。</p></li><li><p>分析：完成该功能，无需返回值，因此返回值类型为void。</p><p> 完成该功能，需要外部参数参与内部的运算，也就是需要两个int类型的形参。</p></li></ul></li><li><p>有参有返回值方法</p><ul><li><p>需求：调用方法获得指定两个double数据之和。</p></li><li><p>分析：完成该功能，需要返回值，因此返回值类型为double。</p><p> 完成该功能，需要外部参数参与方法内部的运算，也就是需要两个double类型的形参。</p></li></ul></li></ol></li></ol><h4 id="方法的重载（overload）重点"><a href="#方法的重载（overload）重点" class="headerlink" title="方法的重载（overload）重点"></a>方法的重载（overload）重点</h4><ol><li><p>方法重载的定义</p><ul><li><p>同一个类中，具有相同的方法名，但是参数个数不同或参数类型不同，这就构成了方法的重载！</p></li><li><p>核心：两同，两不同</p><p>–&gt; 两同：同一个类中，具有同名的方法。</p><p>–&gt;两不同：参数个数不同，参数个数不同 或 参数类型不同。</p></li></ul></li><li><p>方法重载的特点</p><ul><li>修饰符不同，没有构成方法重载；</li><li>形参名字不同，没有构成方法重载；</li><li>返回值类型不同，没有构成方法重载。</li></ul></li><li><p>方法重载的好处</p><ul><li>官方：方法重载的出现，使其同一个类中允许定义多个同名的方法，从而避免了方法名被污染。</li><li>通俗：学习方法重载之后，如果同一个类中多个同名的方法发生了编译错误，则首先考虑这些方法是否满足方法重载!</li></ul></li><li><p>重载方法的调用</p><ul><li>调用重载方法的时候，会根据实参的“个数”和“类型”来选择调用合适的方法。</li></ul></li><li><p>目前已经用过的重载方法有哪些？</p><ul><li>print()、println()等等</li><li>问题：通过IDEA工具，如何查看底层的API源码？</li><li>实现：按下Ctrl键，然后鼠标左键单击即可。</li></ul></li></ol><h4 id="调用方法时，实参传递给形参的过程-超级重点"><a href="#调用方法时，实参传递给形参的过程-超级重点" class="headerlink" title="调用方法时，实参传递给形参的过程(超级重点)"></a>调用方法时，实参传递给形参的过程(超级重点)</h4><ol><li><strong>调用方法时，基本数据类型的传递</strong><ul><li>结论：”基本数据类型”的传递，属于”数据值”的传递。</li><li>解释：”实参”赋值给”形参”之后，则”实参”和”形参”就没有任何联系了，我们在方法中修改”形参”的值，则”实参”的值不会改变。</li></ul></li><li><strong>调用方法时，引用数据类型的传递</strong><ul><li><strong>结论：”引用数据类型”的传递，属于”地址值”的传递。</strong></li><li>解释：”实参”赋值给”形参”之后，则”实参”和”形参”保存的地址值就相同，也就意味着”实参”和”形参”指向了同一块存储空间，<strong>我们在方法中修改”形参”指向存储空间的数据，则”实参”指向该存储空间的数据也被修改了。</strong></li></ul></li></ol><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h4><ul><li>数组就是一个存储“相同数据类型”的“有序”集合（容器）。</li><li>明确：所谓数组的声明，指的就是给数组取一个名字，类似于变量的声明。</li><li>语法1：数据类型[] 数组名;</li><li>语法2：数据类型 数组名[];</li><li>注意：开发中，建议使用“语法1”来声明数组，因为“数据类型[]”代表的是“数组类型”。</li></ul><h4 id="数组的创建"><a href="#数组的创建" class="headerlink" title="数组的创建"></a>数组的创建</h4><ol><li><p>明确：所谓数组的创建，指的就是在内存中为数组开辟存储空间。</p></li><li><p>方式一：动态创建数组（仅仅在内存中开辟存储空间，但没有给数组元素指定赋值）</p><ul><li>语法：数据类型[] 数组名 &#x3D; new 数据类型[空间长度];</li></ul></li><li><p>方式二：静态创建数组（不但在内存中开辟存储空间，并且还给数组元素指定赋值）</p><ul><li><p>语法1：数据类型[] 数组名 &#x3D; {数据1,数据2,数据3,…};</p></li><li><p>语法2：数据类型[] 数组名 &#x3D; new 数据类型[]{数据1,数据2,数据3,…};</p></li></ul></li></ol><h4 id="操作数组元素"><a href="#操作数组元素" class="headerlink" title="操作数组元素"></a>操作数组元素</h4><ul><li><p>明确：想要操作数组元素，则必须通过“索引”来实现，因为通过“索引”就能找到元素对应的存储空间，然后就能做出“赋值”和“取值”的操作。</p></li><li><p><strong>数组的注意点</strong></p><ul><li><p>数组存储的是相同数据类型的元素，则意味着每个元素占用的字节数相同。</p></li><li><p>数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着的。</p></li><li><p>创建数组的时候，我们必须明确数组的空间长度，并且数组一旦创建成功，则数组的空间长度就不能改变了。</p></li><li><p>给数组元素赋值的时候，赋值“元素的类型”必须和“声明数组的数据类型”保持一致，否则就会编译错误！</p><pre class="line-numbers language-Java"><code class="language-Java">int[] arr = new int[5];arr[0] = 11;  //没问题arr[1] = "abc";  //编译错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>声明数组的时候，我们可以使用“基本数据类型”来声明数组，也可以使用“引用数据类型”来声明数组。</p><pre class="line-numbers language-Java"><code class="language-Java">int[] arr1；    //基本数据类型String[] arr2;   //引用数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过索引来操作数组元素的时候，操作的索引值必须合法，如果索引值不合法就会抛出数组索引越界异常。</p><p>明确：数组索引的合法取值范围在[0,数组长度-1]之间，如果索引越界就会抛出数组索引越界异常（ArrayIndexOutOfBoundsException）。</p></li></ul></li></ul><h4 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h4><ul><li>明确：基本数据类型没有属性和方法，但是引用数据类型有属性和方法。</li><li>强调：通过数组的“length”属性，我们可以动态的获得数组的空间长度。</li></ul><h4 id="数组元素的默认值"><a href="#数组元素的默认值" class="headerlink" title="数组元素的默认值"></a>数组元素的默认值</h4><p>明确：通过“动态创建数组”的方式，则数组中每个元素都有默认值，并且元素的默认值规则如下：</p><ul><li>整数型（byte、short、int和long）数组元素的默认值为：0</li><li>浮点型（float和double）数组元素的默认值为：0.0</li><li>布尔型（boolean）数组元素的默认值为：false</li><li>字符型（char）数组元素默认值为：’\u0000’ –&gt; 代表空格字符</li><li>引用数据类型（数组、字符串、类和接口）数组元素的默认值为：Null –&gt; 此处是null关键字，代表的是空对象。</li></ul><h4 id="数组元素的遍历"><a href="#数组元素的遍历" class="headerlink" title="数组元素的遍历"></a>数组元素的遍历</h4><ol><li><p>使用普通for循环来实现</p><ul><li>思路：通过普通for循环，获得[0, 数组长度-1]的合法索引取值，然后再通过索引获得数组元素</li><li>优势：遍历的过程中，可以获得数组的合法索引值，因此遍历过程中我们可以操作数组中的元素。</li><li>劣势：语法复杂，效率较低。</li><li>使用场合：遍历数组的过程中，如果想要获得数组的合法索引取值，或者想要在遍历过程中操作数组元素，则“必须”通过普通for循环来实现。</li></ul></li><li><p>使用增强for循环来实现</p><ul><li><p>语法：</p><pre class="line-numbers language-Java"><code class="language-Java">/*for(数据类型 变量名 : 数组或集合){    //循环体}*/int[] arr = {1,23,4,5};//增强for循环for(int element : arr){   System.out.println(element); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优势：语法简洁，效率较高。</p></li><li><p><strong>劣势：遍历的过程中，不能获得数组的合法索引值，因此遍历过程中我们无法操作数组中的元素。</strong></p></li><li><p>使用场合：遍历数组的过程中，如果<strong>无需获得数组的合法索引取值</strong>，也就是遍历数组过程中<strong>无需操作数组元素，</strong>则建议通过增强for循环来实现。</p></li><li><p><strong>快速使用增强for循环来遍历数组：数组名.for + enter</strong></p></li><li><p><strong>强调：通过length属性获得数组空间长度，则该操作的效率是非常低，因此在循环中切记不要使用length属性来获得数组空间长度。</strong></p></li><li><p>**建议定义一个数组长度变量来循环</p></li></ul></li></ol><h4 id="栈内存的概述"><a href="#栈内存的概述" class="headerlink" title="栈内存的概述"></a>栈内存的概述</h4><ul><li><p>存储：局部变量</p><p>–&gt; “基本数据类型”的局部变量，则在栈内存中存储的是”数据值”。</p><p>–&gt; “引用数据类型”的局部变量，则在栈内存中存储的是”地址值”。</p><p>特点：</p><ul><li>栈内存具备”先进后出”或”后进先出”的特点，类似于生活中的”子弹夹”。</li><li>栈内存是一块连续的存储空间，由虚拟机分配，效率高！</li><li>栈内存由虚拟机来管理，也就是无需程序员来手动管理内存。</li><li>虚拟机会为每个线程创建一个栈内存，用于存放该线程执行方法的信息。</li></ul></li><li><p>存储：对象（数组）</p><p>特点：</p><ul><li>堆内存不是一块连续的存储空间，分配灵活，但是效率低。</li><li>堆内存理论上需要程序员来手动管理，但是实际上交由”垃圾回收机制”来管理。</li><li><strong>虚拟机中只有一个堆内存，被所有的线程共享。</strong></li></ul></li></ul><h4 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h4><p>需求：将数组元素反转，原数组{5, 12, 54,7676,9}，反转后为：{9, 676, 54, 12, 5}。</p><p>要求：使用两种方式来实现</p><ol><li>方式一：<strong>创建一个新的数组，用于保存反转之后的结果。</strong><ul><li>缺点：<ul><li>需要创建新的数组，浪费了存储空间。</li><li>需要完整遍历整个数组，浪费了执行时间。</li></ul></li></ul></li><li>方式二：<strong>使用“首尾元素交换位置”的思路来实现。</strong><ul><li>优点：<ul><li>无需创建新的数组，节约了存储空间。</li><li>只需遍历数组长度的一半，节约了执行时间。</li></ul></li></ul></li></ol><h4 id="数组工具类"><a href="#数组工具类" class="headerlink" title="数组工具类"></a>数组工具类</h4><ul><li>问题：在前面的学习中，我们把操作数组的静态方法放到了不同的类中，因此想要调用这些静态方法的时候，我们首先得明确该方法在那个类中，然后才能通过“类名”来调用这些静态方法，因此调用这些方法的时候非常不方便。</li><li>解决：定义一个“数组工具类”，然后把操作数组的静态方法都放到该“数组工具类”中。</li></ul><ol><li><p>Arrays工具类的概述</p><ul><li>Arrays工具类在”java.util”包中，因此我们使用Arrays工具类的时候，必须通过import关键字导入Arrays类，然后才能使用Arrays工具类。</li><li>Arrays工具类我们称之为“数组相关的工具类”，在Arrays类中提供了很多操作数组的“静态方法”，因此我们调用这些方法的时候，直接通过类名.来调用。</li></ul></li><li><p>Arrays工具类的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：把数组转换为字符串并返回，也就是获得数组中的元素，然后把这些元素拼接成字符串并返回。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：数组的填充操作，把arr数组中的所有元素设置为val</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：给数组元素执行“排序”操作，默认为“升序”排序</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：对“指定范围”的数组元素执行“升序”排序</span><span class="token comment" spellcheck="true">//范围：从fromIndex索引位置开始（包含），到toIndex索引位置结束（不包含）。</span><span class="token comment" spellcheck="true">//注意：fromIndex取值范围在[0,数组长度-1]之间，toIndex取值范围在[0,数组长度]之间，并且必须满足toIndex大于fromIndex</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    作用：二分查找，查询key在arr数组中的索引位置。    返回值：如果查询元素在数组中存在，则返回该元素在数组中的索引位置；如果查询的元素在数组中不存在，则返回负数即可。*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    作用：对“指定范围”的数组元素执行二分查找操作，此处要求arr数组为升序排序。    范围；从fromIndex索引位置开始（包含），到toIndex索引位置结束（不包含）。    注意：fromIndex取值范围在[0, 数组长度-1]，toIndex取值范围在[0,数组长度]之间，并且必须满足toIndex大于fromIndex。    返回值：如果查询元素在数组中存在，则返回该元素在数组中的索引位置；如果查询的元素在数组中不存在，则返回负数即可。*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    作用：从索引为0的位置开始拷贝，一共拷贝newLength个数组元素并返回。    注意：此处newLength取值范围在[0,数组长度]之间。*/</span>Public <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOfRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    作用：拷贝指定索引范围的数组元素    范围：从from索引位置开始（包含），到to索引位置结束（不包含）。    注意：from取值范围在[0,数组长度 - 1]之间，to取值范围在[0,数组长度]之间，并且必须满足to大于from*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    作用：判断arr1和arr2两个数组是否相等。    返回值：如果arr1和arr2的地址值相等或arr1和arr2的数组元素一一对应，则都返回true，否则一律返回false。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="方法的可变参数（掌握）"><a href="#方法的可变参数（掌握）" class="headerlink" title="方法的可变参数（掌握）"></a>方法的可变参数（掌握）</h4><p>1、可变参数的引入</p><ul><li><p>需求：定义一个方法，用于获得指定两个int类型数据之和。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="可变参数的语法"><a href="#可变参数的语法" class="headerlink" title="可变参数的语法"></a>可变参数的语法</h4><ul><li><p>语法：数据类型 … 可变参数名</p></li><li><p>eg：int … arr</p></li><li><p><strong>可变参数的注意点</strong></p></li><li><p>“可变参数”必须存在于“形参列表”中，并且“可变参数”必须在形参列表“最末尾”。</p><p>–&gt; 也就是说，方法的形参列表中最多只能定义一个可变参数（0或1）</p></li><li><p>在方法体中，我们可以把可变参数当成“数组”来使用，本质上可变参数就是数组的另外一种语法表现形式。</p><p>–&gt; eg：调用方法的是，实参为”int类型的数组”，则方法的形参可以为“int类型的可变参数”。</p></li><li><p><strong>可变参数的使用场合</strong></p><ul><li>定义一个方法的时候，参数的类型都相同，但是参数的个数不确定时。</li></ul></li></ul><h4 id="数组的核心特点"><a href="#数组的核心特点" class="headerlink" title="数组的核心特点"></a>数组的核心特点</h4><ul><li><p>数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着的。</p></li><li><p>数组存储的是相同数据类型的元素，则意味着每个元素占用的字节数相同。</p></li><li><p>常见数组则必须明确数组的空间长度，数组一旦创建成功，则数组的空间长度就不能改变。</p></li><li><p><strong>根据索引操作【改和查】</strong></p><ul><li><p>结论：根据索引操作元素效率非常高，甚至是所有数据结构中效率最高的。</p></li><li><p>依据：数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着。</p><p>–&gt; 数组存储的是相同数据类型的元素，则意味着每个元素占用的字节数相同。</p><p>–&gt; <strong>寻址公式：首地址 + 索引值 * 每个元素占用的字节数</strong></p></li></ul></li><li><p><strong>根据索引删除元素【删】</strong></p><ul><li><p>结论：根据索引删除元素的效率非常低，因为需要大量的挪动数组元素。</p></li><li><p>依据：数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着。</p><p>–&gt; 常见数组则必须明确数组的空间长度，数组一旦创建成功，则数组的空间长度就不能改变了</p></li></ul></li><li><p><strong>根据索引插入元素【增】</strong></p><ul><li><p>结论：根据索引插入元素的效率非常低，因为需要大量挪动数组元素+扩容操作。</p></li><li><p>依据：数组时一块连续的存储空间，则意味着相邻两个元素的存储空间时紧挨着。</p><p>–&gt; 常见数组则必须明确数组的空间长度，数组一旦创建成功，则数组的空间长度就不能改变啦。</p></li></ul></li><li><p><strong>手写冒泡排序</strong></p><pre class="line-numbers language-Java"><code class="language-Java">public static void bubbleSort(int[] arr){        //外部共需要排序length-1次        for (int i = 0; i < arr.length-1; i++) {            boolean b = true;            //内部比较第一次比较length-1次，随后逐次减一            for (int j = 0; j < arr.length-1-i; j++) {                if (arr[j] > arr[j+1]){                    int num = arr[j];                    arr[j] = arr[j+1];                    arr[j+1] = num;                    b = false;                }            }            if (b){                return;            }        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="二维数组（矩阵，较难）"><a href="#二维数组（矩阵，较难）" class="headerlink" title="二维数组（矩阵，较难）"></a>二维数组（矩阵，较难）</h4><ol><li><p>二维数组的定义</p><ul><li>数组中的每个元素都是一堆数组，这样的数组我们就称之为“二维数组”。</li></ul></li><li><p>二维数组的声明</p><ul><li><p>明确：所谓二维数组的声明，指的就是给二维数组取一个名字，类似于“变量的声明”。</p></li><li><p>语法1：</p><pre class="line-numbers language-Java"><code class="language-Java">//数据类型[][] 数组名；int[][] arr1;String[][] arr2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>语法2：</p><pre class="line-numbers language-Java"><code class="language-Java">//数据类型[] 数组名[];int[] arr1[]String[] arr2[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意：实际开发中，我们建议使用”语法1”来声明二维数组，因为“数据类型 [ ] [ ] ”代表的是“二维数组类型”。</p></li></ul></li><li><p>二维数组的创建</p><ul><li><p>明确：所谓二维数组的创建，指的就是在堆内存中为二维数组开辟存储空间。</p></li><li><p><strong>方式一：创建“等长”的二维数组（动态）</strong></p><pre class="line-numbers language-Java"><code class="language-Java">//语法：数据类型[][] 数组名 = new 数据类型[m][n];// m: 设置二维数组得空间长度//n：设置一维数组的空间长度int[][] arr1 = new int[3][3];String[][] arr2 = new String[3][4];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>方式二：创建“不等长”的二维数组（动态）</strong></p><pre class="line-numbers language-Java"><code class="language-Java">//语法：数据类型[][] 数组名 = new 数据类型[m][];//m:设置二维数组的空间长度int[][] arr1 = new int[3][];String[][] arr2 = new String[4][];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>方式三：静态创建的二维数组（静态）(等长|不等长)</strong></p><pre class="line-numbers language-Java"><code class="language-Java">//数据类型[][] 数组名 = {{数据1,数据2}, {数据3,数据4},...}     int[][] arr1 = {{11,22,33},{55,66,77},{13,56,78}};String[][] arr2 = {{"aa","bb"},{"cc","dd","yt"}};//数据类型[][] 数组名 = new 数据类型[][]{{数据1,数据2}, {数据3,数据4},...};     int[][] arr1 = new int[][]{{11,22,33},{55,66,77},{13,56,78}};String[][] arr2 = new String[][]{{"aa","bb"},{"cc","dd","yt"}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意：通过大括号创建出来的二维数组，我们无法直接作为方法的”实参”和”返回值”，因为编译器不认识大括号创建的二维数组。</strong></p></li></ul></li></ol><hr><h2 id="异常及断点调试"><a href="#异常及断点调试" class="headerlink" title="异常及断点调试"></a>异常及断点调试</h2><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><ol><li><p><strong>debug调试的作用</strong></p><ul><li>查看代码的执行顺序，分析变量值的变化，从而找到问题的并解决问题。</li></ul></li><li><p><strong>debug的调试步骤</strong></p><ul><li><p>第一步：在代码可能出现问题的位置，我们在该位置打一个断点。</p><p>–&gt; 在该代码行号左侧位置，我们单击打一个断点（红色圆圈）</p></li><li><p>第二步：开启debug调试来执行程序，则代码就会停留在打断点的位置。</p><p>–&gt;方式一： 点击类名或main方法左侧绿色按钮，然后选中”Debug Xxx.main()”即可。</p><p>–&gt; 方式二：在代码编辑区域，我们鼠标右键然后选中”Debug Xxx.main()”即可。</p><p>–&gt; 方式三：已经执行程序后，我们点击工具栏或控制台左侧的”debug按钮”。</p></li><li><p>明确：开启debug调试之后，则就会出现debug窗口，debug窗口的作用如下：</p><p><strong>Debugger</strong></p><ul><li>Frames：显示代码停留的位置（包、类、方法和行号）</li><li>Variables：显示当前方法已经执行过的变量的值</li></ul><p><strong>Console</strong></p><ul><li>显示输出的内容或获取输入的内容。</li></ul></li><li><p>第三步：控制代码的执行，也就是通过Debug窗口来控制代码的执行。</p><ol><li>F8：执行下一行代码。</li><li>F7：进入执行方法体中的代码。</li><li>shift + F8：结束当前方法，回到方法的调用位置。</li><li>Alt + F9：直接执行到下一个断点的位置。</li><li>Alt + F8：计算并执行某行未执行代码的运算结果。</li></ol></li><li><p>第四步：结束debug调试。</p><p>首先，取消断点（单击取消）；然后，结束程序（点击红色按钮）；最后，关闭debug窗口。</p></li></ul></li></ol><h4 id="异常的概述"><a href="#异常的概述" class="headerlink" title="异常的概述"></a>异常的概述</h4><ol><li>什么是异常？<ul><li>程序在执行过程中，发生的各种不正常情况，我们就称之为“异常”。</li><li>例如：算数异常、数组索引越界异常、空指针异常和类型转换异常等等</li></ul></li><li>什么是异常类？<ul><li>用于封装和描述各种不正常情况的类，我们就称之为“异常类”。</li><li>例如：ArithmeticException、ArrayIndexOutOfBoundsException、NullPointerException和ClassCastException等等。</li></ul></li><li>学习异常的好处？<ul><li><strong>a)学习异常之后，就能够实现把“正常逻辑代码”和“错误逻辑代码”相分离。</strong></li><li>b)没有学习异常，则某些情况下无论我们如何处理，则都可能无法满足需求。</li></ul></li><li><strong>异常的处理机制？</strong><ul><li>在java语言中，使用面向对象的思想来处理异常。在可能出现问题的位置，我们创建并抛出一个异常对象，该异常对象中封装了异常的详细描述信息（异常类名、异常位置和异常原因），从而实现“正常逻辑代码”和“错误逻辑代码”相分离。</li></ul></li></ol><h4 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h4><ol><li>算数异常（ArithmeticException）<ul><li>原因：做除法操作的时候，如果分母为零，则就会抛出算数异常。</li></ul></li><li>数组索引越界异常（ArrayIndexOutOfBoundsException）<ul><li>原因：根据索引操作数组元素的时候，如果操作的索引值越界，则就会抛出数组索引越界异常。</li></ul></li><li>空指针异常（NullPointerException）<ul><li>原因：我们对空对象做操作，则就会抛出空指针异常。</li></ul></li></ol><h4 id="异常的体系"><a href="#异常的体系" class="headerlink" title="异常的体系"></a>异常的体系</h4><ol><li><p>异常体系的引入</p><ul><li>在程序执行的过程中，可能会发生各种各样的不正常情况，因此我们就需要很多的异常类来封装和描述这些不正常情况，我们对这些异常类进行“向上提取”，那么就得到了异常的继承体系。</li></ul></li><li><p>异常体系的概述</p><ul><li><p><strong>所有Java类的老祖宗为Object类，所有不正常情况类的老祖宗就是Throwable类，那么Throwable类的继承体系如下：</strong></p><pre class="line-numbers language-Java"><code class="language-Java">/*Throwable          --> 所有不正常情况类的老祖宗 |-- Error         --> 所有错误类的老祖宗 |-- Exception     --> 所有异常类的老祖宗 *///注意：a)如何查看某个类的继承体系呢？？？选中该类，然后使用“ctrl + h”来查看继承体系。    // b)所有错误类的后缀都以“Error”来结尾，所有异常类的后缀都以“Exception”来结尾。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Throwable的概述</p><ul><li><strong>Throwable类是所有不正常情况类的老祖宗，Error类和Exception类都属于Throwable的子类，因此Error类和Exception类都能使用Throwable提供的方法。</strong></li></ul></li><li><p>Error类的概述</p><ul><li><strong>Error类是所有“错误类”的老祖宗，并且Error类继承于Throwable类，因此Error类能使用Throwable类提供的所有方法。</strong></li><li><strong>Error描述的是“资源耗尽”或“虚拟机内部错误”等不正常情况，因此开发中遇到这样的不正常情况，我们程序员是无法解决的（不结束程序的前提来解决），也就是程序员只能先结束程序，然后再去重新修改代码来搞定这种不正常情况</strong>。</li></ul></li><li><p>Exception类的概述</p><ul><li>Exception类是所有“异常类”的老祖宗，并且Exception类继承于Throwable类，因此Exception类能使用Throwable类提供的所有方法。</li><li><strong>Exception类描述的是“程序员能够解决”的不正常情况，开发中我们遇到了Exception异常，则需要拼尽全力去解决该异常（不结束程序的前提来解决）。</strong></li><li><strong>Error属于程序员无法解决的不正常情况，而Exception属于程序员能够解决的不正常情况。</strong></li></ul></li><li><p><strong>Error与Exception的区别</strong></p><ul><li>我开着车走在路上，一头猪冲在路中间，我刹车，这叫一个异常。</li><li>我开着车在路上，发动机坏了，我停车，这叫错误。</li><li>发动机什么时候坏？我们普通司机能管吗？不能。发动机什么时候坏是汽车厂发动机制造商的事。</li></ul></li></ol><h4 id="自定义异常类（掌握）"><a href="#自定义异常类（掌握）" class="headerlink" title="自定义异常类（掌握）"></a>自定义异常类（掌握）</h4><ol><li><p>自定义异常类的引入</p><ul><li>问题：给学生年龄复制的时候，则赋值的年龄不能为负数。</li><li>解决：如果赋值的年龄为负数，则无论我们给年龄赋值任何数据都不合理，那么最好的方案就是如果年龄不合法就抛出异常。</li><li>问题：如果赋值的年龄不合法，则应该抛出“学生年龄不合法异常”，该如何实现？？？</li><li><strong>解决：使用“自定义异常类”来解决。</strong></li></ul></li><li><p>什么时候使用自定义异常类</p><ul><li>当Java语言提供的异常类无法满足我们的需求，则我们就可以使用“自定义异常类”来满足需求。</li></ul></li><li><p>自定义异常类的要求</p><ul><li><p><strong>要求1：自定义异常类必须继承于异常体系中的类，一般继承于Exception类或RuntimeException类。</strong></p><p>–&gt; <strong>只有继承于异常体系的中的类，该类才具备可抛型，也就是才能使用throw和throws关键字。</strong></p></li><li><p>要求2：自定义异常类必须提供两个构造方法，其中一个为无参构造方法，<strong>另外一个为字符串参数的有参构造方法。</strong></p><p> –&gt; <strong>使用字符串参数的有参构造方法，我们可以用于封装和保存异常出现的原因，从而传递给父类的异常来保存。</strong></p></li></ul></li></ol><h4 id="异常产生的过程"><a href="#异常产生的过程" class="headerlink" title="异常产生的过程"></a>异常产生的过程</h4><ul><li>如果在方法体中抛出了异常，而我们在方法体中又没有处理该异常，则就会把该异常继续抛给方法的上层调用者，也就是抛给方法的上层调用者来处理。</li><li>如果方法的上层调用者依旧没有处理该异常，那么就会继续把该异常抛给方法的上层调用者来处理，以此类推，如果方法的上层调用者都没有处理该异常，那么最终就把该异常抛给了main方法的调用者（虚拟机），而虚拟机也不会处理该异常，那么程序就终止啦。</li></ul><h4 id="手动抛出异常（throw）"><a href="#手动抛出异常（throw）" class="headerlink" title="手动抛出异常（throw）"></a>手动抛出异常（throw）</h4><ol><li>在可能出现异常的位置，我们创建并抛出一个异常对象，该异常对象中包含了异常的详细描述信息（异常类名、异常位置和异常原因），从而实现了“正常逻辑代码”和“错误逻辑代码”相分离。</li><li>注意：throw关键字只能在方法体中使用，也就是我们只能在方法体中来手动抛出一个异常。</li></ol><h4 id="异常的分类（重点）"><a href="#异常的分类（重点）" class="headerlink" title="异常的分类（重点）"></a>异常的分类（重点）</h4><ol><li><p>异常的分类的引入？</p><ul><li><p>问题：“学生年龄越界异常类”继承于Exception类和RuntimeException类的区别?</p></li><li><p>答案：“学生年龄越界异常类”继承于Exception类，则抛出“学生年龄越界异常”就会出现<strong>编译错误。</strong></p><p> “学生年龄越界异常类”继承于RuntimeException类，则抛出 “学生年龄越界异常”就<strong>不会出现编译错误。</strong></p></li></ul></li><li><p>异常的分类的概述</p><ul><li><p><strong>运行时异常</strong></p><p>–&gt; 包含：RuntimeException类及其所有子类。</p><p>–&gt; 特点：程序编译时，不强制我们对抛出的异常进行处理（可以处理，也可以不处理）</p></li><li><p>编译时异常</p><p>–&gt;包含：Exception类及其所有子类（排除运行时异常）。</p><p>–&gt;特点：程序编译时，强制我们对抛出的异常进行处理（必须处理，否则就会编译错误）。</p></li></ul></li><li><p>异常的处理的方式</p><ul><li><p><strong>声明异常（throws）</strong></p><p>–&gt; 属于“消极”的处理方式，本质上并没有处理该异常。</p></li><li><p><strong>捕捉异常（try…catch…finally）</strong></p><p>–&gt;属于“积极”的处理方式，本质上已经解决了该异常。</p></li></ul></li><li><p>不正常情况的分类补充</p><ul><li><p><strong>可检查异常（CheckedException）</strong></p><p>–&gt;包含：编译时异常</p><p>–&gt;特点：<strong>程序在编译时期，能够检查出程序中出现的不正常情况。</strong></p></li><li><p><strong>不可检查异常（UnCheckedException）</strong></p><p>–&gt;包含：Error和运行时异常</p><p>–&gt;特点：<strong>程序在编译时期，不能够检查出程序中出现的不正常情况。</strong></p></li></ul></li></ol><h4 id="声明异常（throws）"><a href="#声明异常（throws）" class="headerlink" title="声明异常（throws）"></a>声明异常（throws）</h4><ol><li><p>声明异常的概述</p><ul><li>声明异常属于“消极”的处理方式，本质上并没有解决该异常。</li><li>程序中出现了异常，此时我们又无法处理该异常，那么就使用声明异常来处理。</li></ul></li><li><p>声明异常的使用？</p><ul><li>当方法中“可能”会出现异常，此时我们又无法处理该异常，那么就可以使用“声明异常”来处理。也就是在方法声明的末尾，使用throws关键字将方法体中可能抛出的异常声明出来，然后报告给方法的调用者，交给方法的调用者来处理。</li></ul></li><li><p>声明异常的语法</p><pre class="line-numbers language-Java"><code class="language-Java">[修饰符] 返回值类型 方法名(形参列表) throws 异常类1, 异常类2, 异常类3, ... {    // 方法体     return [返回值];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="捕捉异常类（try…catch…finally）"><a href="#捕捉异常类（try…catch…finally）" class="headerlink" title="捕捉异常类（try…catch…finally）"></a>捕捉异常类（try…catch…finally）</h4><ol><li><p>捕捉异常的概述</p><ul><li>捕捉异常属于“积极”的处理方式，本质上就已经处理了该异常。</li><li>当程序中可能出现异常，此时我们恰好能解决该异常，则就使用捕捉异常来处理。</li></ul></li><li><p>try…catch组合</p><ul><li><p>语法</p><pre class="line-numbers language-Java"><code class="language-Java">try{    //书写可能出现异常的代码}catch(异常类 对象){    //用于处理捕获到的异常。}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行：如果try代码块中没有出现异常，则try代码块中的代码正常执行完毕，然后就直接执行try…catch之后的代码。 <strong>如果try代码块中出现了异常，则catch代码块就会立刻捕获到该异常，然后就执行catch代码中的代码，最后再执行try…catch之后的代码。</strong></p></li></ul></li><li><p>try…多catch组合</p><ul><li><p>语法：</p><pre class="line-numbers language-Java"><code class="language-Java">try{    //书写可能出现异常的代码}catch(异常类 对象){    //用于处理捕获到的异常}catch(异常类 对象){    //用于处理捕获到的异常}...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用：<strong>使用try…多catch组合，我们可以实现对try代码块中出现的异常进行“针对性”的处理。</strong></p></li><li><p>注意：</p><ol><li><p><strong>使用捕捉异常的时候，建议使用“Ctrl + Alt + T”快捷键来生成try…catch…finally代码。</strong></p><ul><li>选择中可能出现异常的代码，然后使用使用“Ctrl + Alt + T”快捷键来捕捉异常的代码。</li></ul></li><li><p>在JDK1.8之后，则我们还以可以这样来处理：</p><pre class="line-numbers language-Java"><code class="language-Java">catch (NullPointerException | ArrayIndexOutOfBoundsExceptionexception) {    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>以上操作不建议使用，因为使用以上操作无法实现对try代码块中出现的异常进行针对性的处理。</strong></li></ul></li><li><p>使用try…多catch组合的时候，建议把子类异常catch放在前面，把父类异常catch放在后面，否则就会编译错误。</p><ul><li><strong>捕获异常的时候，属于“从上往下”来顺序匹配，如果父类异常catch放前面，则后面的子类异常catch将永远无法执行。</strong></li></ul></li><li><p>try…多catch…finally组合</p><ul><li><p>语法：</p><pre class="line-numbers language-Java"><code class="language-Java">try{    //书写可能出现异常的代码}catch(异常类 对象){// 用于处理捕获到的异常}catch(异常类 对象){// 用于处理捕获到的异常}…finally{// 无论是否出现异常，则都会执行finally中代码}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol></li></ul></li></ol><h4 id="方法重写之异常（掌握）"><a href="#方法重写之异常（掌握）" class="headerlink" title="方法重写之异常（掌握）"></a>方法重写之异常（掌握）</h4><ol><li><p>原则：子类重写方法声明的异常类型必须小于等于父类被重写方法声明的异常类型【辈分】。</p><p>–&gt;此处说的异常，指的是编译时异常，而运行时异常不用管！</p></li><li><p>要求：a)如果父类被重写方法没有声明异常，则子类重写方法也不能声明异常。</p><p>b)如果父类被重写方法声明了异常，则子类重写方法声明的异常类型必须小于等于父类被重写方法声明的异常类型（辈分）。</p></li></ol><h4 id="异常链（了解）"><a href="#异常链（了解）" class="headerlink" title="异常链（了解）"></a>异常链（了解）</h4><ol><li><p>解释：在catch代码块中，我们抛出一个描述更加详细的异常，这就是异常链。</p><pre class="line-numbers language-Java"><code class="language-Java">// 分母为零异常类class DenominatorZeroException extends Exception {    public DenominatorZeroException() { }    public DenominatorZeroException(String message) {        super(message);    }}public class Test03 {    /**     * 功能：获得两个数相除的结果     * 问题：a)除法运算，如果分母为0，则不应该返回任何结果，而此处却返回了结果为0。     *      b)除法运算，如果分母为0，则抛出算数异常，那么意味着异常描述不够清晰。     * 解决：使用“异常链”来解决。     */    public static int division(int fenZi, int fenMu) throws DenominatorZeroException {        // 1.定义一个变量，用于保存运算的结果        int result = 0;        // 2.执行除法运算，并处理了可能出现的算数异常        try {            result = fenZi / fenMu;        }        catch (ArithmeticException exception) {            // 需求：在此处，我们需要抛出一个描述更加详细的异常            throw new DenominatorZeroException("分母为零异常，fenMu：" + fenMu);        }        // 3.返回除法运算的结果        return result;    }    public static void main(String[] args) {        try {            int result = division(5, 0);            System.out.println(result);        } catch (DenominatorZeroException e) {            e.printStackTrace();        }        System.out.println("over");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><ul><li><p>封装（堆功能method的封装）</p></li><li><p>典型：c语言</p></li><li><p>特点：以线性的思维来思考解决问题，强调一步一步的实现。</p><p>–&gt; 强调程序员是一个“实施者”，类似于公司中的“小职员”。</p></li><li><p><strong>优点：效率高。</strong></p></li><li><p><strong>缺点：程序的复用性、可维护性和可扩展性较低</strong>。</p></li><li><p>使用场合：适用于“小型”的程序，例如：计算器、嵌入式开发等等</p></li></ul><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li><p>封装（对数据field和功能method做的封装）、继承和多态。</p></li><li><p>典型：C++、C#、java等。</p></li><li><p>特点：以非线性的思维来思考解决问题，强调宏观上的把控。</p><p>–&gt; 强调程序员是一个“指挥官”，类似于公司中的“小老板”。</p></li><li><p><strong>优点：程序的复用性、可维护性和可扩展性较高。</strong></p></li><li><p><strong>缺点：效率低。</strong></p></li><li><p>使用场合：适用于“大型”的程序，例如：京东、淘宝、微信等等。</p></li></ul><h4 id="面向对象编程的特点"><a href="#面向对象编程的特点" class="headerlink" title="面向对象编程的特点"></a>面向对象编程的特点</h4><ul><li><strong>宏观</strong>上采用面向对象的思维来把控，<strong>微观</strong>实施上依旧采用的是面向过程，即<strong>：面向对象中包含了面向过程。</strong></li></ul><h4 id="类和对象（理解）"><a href="#类和对象（理解）" class="headerlink" title="类和对象（理解）"></a>类和对象（理解）</h4><ol><li><p>对象（instance）</p><ul><li>从编程的角度来理解：万物皆对象。</li><li>eg：教室里面的每个学生、每个凳子、每张椅子。。。</li><li><strong>每个对象都是“独一无二”的，类似于每个同学都是“独一无二”的。</strong></li></ul></li><li><p>类（class）</p><ul><li>从编程的角度来理解：类就是对一类事物的抽象，抽象就是提取这一类事物的共同属性和行为，这样就形成了类。</li><li>eg:班上的每个同学都有姓名、年龄和成绩等属性，每个同学都有吃饭、睡觉和学习等行为，则我们对班上的同学进行向上提取，那么就得到了学生类。</li></ul></li><li><p>类和对象</p><ul><li><p>从编程的角度来分析：我们以类为模板，然后实例化出对象。</p><p>–&gt; <strong>先有类，后有对象。</strong></p><p>–&gt; <strong>类是对象的模板，对象是类的实例。</strong></p><p>eg：我们以小汽车图纸（类）为模板，然后生产出一辆一辆的小汽车（对象）。</p></li></ul></li></ol><h4 id="如何定义类"><a href="#如何定义类" class="headerlink" title="如何定义类"></a>如何定义类</h4><p>语法：[修饰类] class类名{ &#x2F;&#x2F;书写的代码 }</p><p>注意：</p><ul><li>使用class关键字修饰的就是类，也就是类必须使用class来修饰。</li><li><strong>类名必须满足“标识符”的命名规则，必须满足“大驼峰”的命名规范，并且最好“见名知意”。</strong></li><li>使用“public”关键字修饰的类，则类名必须和源文件名字保持一致，否则就会出现编译错误。</li></ul><h4 id="类中的组成"><a href="#类中的组成" class="headerlink" title="类中的组成"></a>类中的组成</h4><ul><li>数据（属性），我们使用“变量”来存储类中封装的数据，类中的变量有：<ol><li>成员变量：又称之为“实例变量”或“非静态变量”，因为是从属于“对象”的。</li><li>静态变量：又称之为“类变量”，从属于“类”的。</li></ol></li><li>功能（行为），我们使用“方法”来封装类中的功能。<ol><li>成员方法，又称之为“实例方法”或“非静态方法”，从属于“对象”的。</li><li>静态方法，又称之为“类方法”，从属于“类”的。</li></ol></li></ul><h4 id="成员变量的概述"><a href="#成员变量的概述" class="headerlink" title="成员变量的概述"></a>成员变量的概述</h4><ul><li><p><strong>定义位置：在类中，代码块和方法体之外。</strong></p></li><li><p>定义语法：[修饰符] 数据类型 变量名；</p><p>–&gt;定义成员变量的时候，则不允许使用static关键字来修饰。</p></li><li><p>操作成员变量的语法：对象.成员变量名</p><p>–&gt; 通过 “对象.成员变量名” 就能找到该成员变量的存储空间，然后就能对该成员变量取值和赋值的操作。</p><p>–&gt; 在成员方法中，想要操作当前类的成员变量，则我们可以直接通过“成员变量名”来操作。</p><p>–&gt; 定义成员方法的时候，则不允许使用static关键字来修饰。</p><p><strong>调用成员方法的语法：对象.成员变量名(实参列表);</strong></p><p> –&gt; 注意：<strong>在成员方法中，想要调用当前类的成员方法，则我们可以直接通过“成员变量名(实参列表);”来实现。</strong></p></li></ul><h4 id="实例化对象的概述"><a href="#实例化对象的概述" class="headerlink" title="实例化对象的概述"></a>实例化对象的概述</h4><ul><li><p>语法</p><pre class="line-numbers language-Java"><code class="language-Java">类型 对象 = new 类名(实参列表);Student stu = new Student();Scanner input = new Scanner(System.in);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h4><ul><li>明确：“成员变量”和“数组元素”都有默认值，并且默认值规则一样。</li><li>整数型（byte、short、int和long）成员变量的默认值为：0；</li><li>浮点型（float和double）成员变量的默认值为：0.0;</li><li>布尔型（boolean）成员变量的默认值为：false；</li><li>字符型（char）成员变量的默认值为：’\u0000’ –&gt; 代表的是空格字符</li><li>引用数据类型（数组、字符串、类和接口等等）成员变量的默认值为：null</li></ul><h4 id="成员变量的初始化"><a href="#成员变量的初始化" class="headerlink" title="成员变量的初始化"></a>成员变量的初始化</h4><ul><li><strong>最先执行“默认初始化”，然后执行“显示初始化”，最后执行“指定初始化”。</strong></li></ul><h4 id="创建对象时的内存分析"><a href="#创建对象时的内存分析" class="headerlink" title="创建对象时的内存分析"></a>创建对象时的内存分析</h4><ul><li><strong>结论：</strong>以类为模板来创建对象，则只需要为类中的成员变量在堆内存中开辟存储空间，<strong>而成员方法是调用的时候自动在栈内存中开辟栈帧。</strong></li><li><strong>注意：</strong>每个对象都是“独一无二”的，<strong>因为每次创建对象都会在堆内存中开辟存储空间。</strong></li></ul><h4 id="成员变量和局部变量的对比"><a href="#成员变量和局部变量的对比" class="headerlink" title="成员变量和局部变量的对比"></a>成员变量和局部变量的对比</h4><ol><li>定义位置区别<ul><li>成员变量：在类中，代码块和方法体之外。</li><li>局部变量：在类中，代码块或方法体之内。</li></ul></li><li>存储位置区别<ul><li>成员变量：存储在“堆内存”中。</li><li>局部变量：存储在“栈内存”中。</li></ul></li><li>生命周期区别<ul><li>成员变量：随着对象的创建而“出生”，随着对象的销毁而“死亡”。</li><li>局部变量：定义变量的时候“出生”，所在作用域执行完毕就“死亡”。</li></ul></li><li>默认值的区别<ul><li>成员变量：成员变量有默认值，并且默认值规则和数组元素默认值规则一模一样。</li><li>局部变量：局部变量没有默认值，因为只声明未赋值的局部变量，则不能做取值操作。</li></ul></li><li>修饰符的区别<ul><li>成员变量：可以被public、protected、private、static、final等修饰符修饰。</li><li>局部变量不能被public、protected、private、static修饰，只能被final修饰。</li></ul></li></ol><h4 id="成员变量和局部变量的使用"><a href="#成员变量和局部变量的使用" class="headerlink" title="成员变量和局部变量的使用"></a>成员变量和局部变量的使用</h4><ul><li>明确：当成员变量和局部变量同名的时候，则默认采用的是“就近原则”，也就是“谁离的近，就执行谁”。</li><li>问题：当成员变量和局部变量同名的时候，我们该如何区分？</li><li>解决：局部变量采用“就近原则”来区分，成员变量使用“this”关键字来区分。</li></ul><h4 id="通过new关键字来创建对象，则创建出来的对象分为两种"><a href="#通过new关键字来创建对象，则创建出来的对象分为两种" class="headerlink" title="通过new关键字来创建对象，则创建出来的对象分为两种"></a>通过new关键字来创建对象，则创建出来的对象分为两种</h4><ol><li>匿名对象，指的就是“没有名字的对象”，例如：new Tiger();</li><li>非匿名对象，指的就是“有名字的对象”，例如：Tiger tiger &#x3D; new Tiger();</li><li>开发中，匿名对象很少使用，但是以下两种场合建议使用匿名对象来实现。<ul><li>创建出来的对象，仅仅只调用一次成员方法，则该对象就建议使用匿名对象来实现。</li></ul></li></ol><h4 id="构造方法（构造器或构造函数）"><a href="#构造方法（构造器或构造函数）" class="headerlink" title="构造方法（构造器或构造函数）"></a>构造方法（构造器或构造函数）</h4><ul><li><p>语法</p><pre class="line-numbers language-Java"><code class="language-Java">[修饰符] 类名(形参列表){    //方法体}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意：【构造方法的特点】</strong></p><ol><li><p>构造方法中没有“返回值类型”，因为在构造方法中不允许有“返回值”。</p><p>–&gt; 构造方法中没有“返回值”，则构造方法中只有“return;”，那么我们就省略”return;”。</p></li><li><p>构造方法的名字必须为“类名”，也就是构造方法名采用”大驼峰”来命名。</p><p>–&gt; 构造方法名采用“大驼峰”，而成员方法名和静态方法名采用“小驼峰”。</p></li><li><p>构造方法就是一个“特殊”的方法，并且构造方法应该通过new关键字来调用。</p></li><li><p><strong>构造方法专门给成员变量做初始化，也就是构造方法不为静态变量做初始化。</strong></p></li><li><p>构造方法可以没有（默认一个无参构造方法），也可以有多个构造方法，他们之间构成重载关系。</p></li><li><p>如果定义有参构造方法，则无参构造方法被自动屏蔽。</p></li><li><p>构造方法不能被继承。</p></li><li><p>构造方法不能手动调用，在创建类实例的时候自动调用构造方法。</p></li></ol></li><li><p><strong>创建对象的步骤</strong></p><p>分析“new Student();”的执行顺序，也就是分析创建对象的执行步骤：</p><ol><li>创建对象，并给成员变量开辟存储空间；</li><li>给成员变量做“默认初始化”；</li><li>给成员变量做“显式初始化”；</li><li>调用构造方法，给成员变量做“指定初始化”。</li></ol></li><li><p><strong>创建对象的时候，是谁来完成的呢？</strong></p><ul><li>new关键字负责创建对象，构造方法负责给成员变量做指定初始化操作，创建对象的时候new关键字和构造方法缺一不可。</li></ul></li><li><p><strong>构造方法的作用</strong></p><ol><li>创建对象的时候new关键字和构造方法缺一不可（了解）。</li><li><strong>通过构造方法来给成员变量做指定初始化操作，从而实现代码的复用【核心】。</strong></li></ol></li><li><p><strong>无参构造方法的概述</strong></p><ul><li>作用：用于给成员变量做初始化操作，例如在无参构造方法中给int类型数组做开辟存储空间的操作。</li><li>注意：<strong>如果某个类中没有显式地提供构造方法，则程序编译时会默认为这个类提供一个无参构造方法。</strong></li></ul></li><li><p><strong>有参构造方法的概述</strong></p><ul><li>作用：用于给成员变量做初始化操作，例如<strong>在有参构造方法中我们将形参的值赋值给成员变量来保存。</strong></li><li>注意：<ol><li>建议形参的名字和成员变量名保持一致，然后在构造方法中通过this来操作成员变量。</li><li>如果一个类显式地提供了构造方法，则程序编译时就不会为该类提供默认的无参构造方法了。</li><li>建议每个类都应该提供无参构造方法，避免在继承体系中子类找不到父类的无参构造方法。</li></ol></li></ul></li><li><p><strong>构造方法的重载</strong></p><ul><li>构造方法依旧可以实现方法的重载，<strong>调用构造方法的时候会根据实参的“个数”和“类型”来选中调用合适的构造方法。</strong></li></ul></li></ul><h4 id="this关键字（重点）"><a href="#this关键字（重点）" class="headerlink" title="this关键字（重点）"></a>this关键字（重点）</h4><ol><li><p><strong>this关键字的概述</strong></p><ul><li>创建一个对象成功之后，则<strong>虚拟机</strong>就会<strong>动态地创建一个引用</strong>，该引用<strong>指向的就是新创建出来的对象</strong>，并且该引用的名字就是this。</li></ul></li><li><p><strong>this关键字指的是什么？</strong></p><ul><li><p>在构造方法中，this指的是什么？</p><p><strong>在构造方法中，this指的是“新创建出来的对象”。</strong></p></li><li><p>在成员方法中，this指的是什么？</p><p>在成员方法中，this指的是“方法的调用者对象”。</p></li></ul></li><li><p><strong>this关键字的作用</strong></p><ol><li><p><strong>操作成员变量，语法：对象.成员变量名</strong></p><ul><li>如果成员变量和局部变量的名字相同，则我们必须通过this关键字来操作成员变量，使用就近原则来操作局部变量。</li><li>如果成员变量和局部变量的名字不同，则我们可以通过this关键字来操作成员变量，也可以忽略this关键字来操作成员变量。<ul><li>–&gt; 忽略this关键字来操作成员变量，则编译时会默认添加this关键字来操作。</li></ul></li></ul></li><li><p><strong>调用成员方法，语法：对象.成员变量名(实参列表);</strong></p><ul><li><p>调用当前类的别的成员方法时，我们可以通过this关键字来调用，也可以忽略this关键字来调用。</p><p>–&gt; 忽略this关键字来调用成员方法，则编译时会默认添加this关键字来操作。</p></li></ul></li><li><p><strong>调用构造方法，语法：this(实参列表);</strong></p><ul><li><p>作用：调用“当前类”的别的构造方法，此处仅仅调用方法并不创建对象，从而实现了代码的复用。</p></li><li><p>注意：</p><ol><li><p><strong>“this(实参列表)”只能存在于构造方法中，并且必须在构造方法有效代码的第一行。</strong></p><p>–&gt; “this(实参列表)”必须在构造方法有效代码的第一行，则意味着一个构造方法中最多只能有一个“this(实参列表)”。（0或1）</p></li><li><p><strong>构造方法切记不能“递归”调用，否则就会陷入死循环，从而造成程序编译错误！</strong></p><p>–&gt; 在构造方法中，我们不允许通过“this(实参列表)”来自己调用自己，否则就会编译错误！</p></li><li><p><strong>在一个类中，不可能所有的构造方法中都存在“this(实参列表)”,因为这样肯定会陷入死循环。</strong></p><p><strong>–&gt; 一个类中，可以定义多个构造方法，但是至少有一个构造方法中没有“this(实参列表)”。</strong></p></li></ol></li></ul></li></ol></li></ol><h4 id="静态变量（重点）"><a href="#静态变量（重点）" class="headerlink" title="静态变量（重点）"></a>静态变量（重点）</h4><ol><li><p><strong>静态变量的引入</strong></p><ul><li>需求：班上所有同学的姓名、年龄和成绩等属性，并且所有的学生都共享同一个教室和饮水机。</li><li>解决：定义一个Student类，然后在Student类中定义姓名、年龄、成绩、教室和饮水机等成员变量即可。</li></ul></li><li><p><strong>静态变量的概述</strong></p><ul><li>在类中，代码块和方法体之外，使用static关键字修饰的变量，我们就称之为“静态变量”。</li></ul></li><li><p><strong>静态变量的特点</strong></p><ol><li><p>静态变量优先于对象存在，随着类的加载就已经存在了。</p></li><li><p>一个类中，每个静态变量都只有一份，为类和对象所共享。</p></li><li><p>我们可以通过“类名”来操作静态变量，也可以通过“对象”来操作静态变量。</p><p><strong>语法1：类名.静态变量 –&gt; 建议</strong></p><p>语法2：对象.静态变量 –&gt; 不建议</p></li></ol></li><li><p><strong>类的加载过程分析</strong></p><ul><li><p>第一次使用某个类的时候，就会加载该类的信息进入方法区，如果该类中存在静态变量，则还会在方法区中为该静态变量开辟存储空间并设置默认值。</p></li><li><p><strong>问题1：什么时候执行加载类的操作呢？</strong></p><p>–&gt; 第一次使用某个类的时候，则就会执行加载类的操作。</p></li><li><p><strong>问题2：一个类会加载几次呢？</strong></p><p>–&gt; 每个类都只会加载一次，因为第一次使用某个类的时候就执行加载类的操作。</p></li><li><p><strong>问题3：什么是方法区？方法区存储的内容是什么？？</strong></p><p> <strong>–&gt; 方法区就是一块存储空间，并且方法区属于堆内存中的一部分，方法区用于存储类的信息、静态变量等等内容。</strong></p></li><li><p><strong>问题4：静态变量什么时候开辟存储空间呢？</strong></p><p>–&gt; 加载类的时候，则就会把该类中的静态变量在方法区中开辟存储空间，<strong>也就意味着静态变量优先于对象存在。</strong></p></li><li><p><strong>问题5：一个类中的静态变量，会开辟几次存储空间？</strong></p><p>–&gt; 因为类只会加载一次，<strong>因此每个类中的静态变量就只有一份，也就是每个静态变量只会开辟一次存储空间。</strong></p></li><li><p><strong>问题6：静态变量的默认值是什么？</strong></p><p>–&gt; 静态变量和成员变量都有默认值，并且他们的默认值规则一模一样。</p></li></ul></li></ol><h4 id="成员变量和静态变量的对比"><a href="#成员变量和静态变量的对比" class="headerlink" title="成员变量和静态变量的对比"></a>成员变量和静态变量的对比</h4><ol><li>存储位置区别<ul><li>成员变量：存储在堆内存中。</li><li>静态变量：存储在方法区中。</li></ul></li><li>生命周期<ul><li>成员变量：随着对象的创建而“出生”，随着对象的销毁而”死亡”。</li><li>静态变量：随着类的加载而“出生”，随着程序执行完毕而“死亡”。</li></ul></li><li>创建次数的区别：<ul><li>成员变量：对象创建多少次，则成员变量就创建多少次。</li><li>静态变量：因为类只会加载一次，因次静态变量就只会创建一次。</li></ul></li><li>调用语法区别<ul><li>成员变量：必须通过”对象”来调用。</li><li>静态变量：可以通过“类名”来调用，也可以通过“对象”来调用。</li></ul></li></ol><h4 id="成员变量和静态变量的使用"><a href="#成员变量和静态变量的使用" class="headerlink" title="成员变量和静态变量的使用"></a>成员变量和静态变量的使用</h4><ul><li>成员变量：如果存储的是“特有数据”，则就使用成员变量来存储。</li><li>静态变量：如果存储的是“共享数据”，则就是用静态变量来存储。</li></ul><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><ol><li><p><strong>代码块的分类</strong></p><ul><li>局部代码块</li><li>静态代码块</li><li>构造代码块(非静态代码块)</li></ul></li><li><p><strong>局部代码块的概述</strong></p><ul><li>定义位置：在类中，代码块或方法体的内部。</li><li>定义个数：任意多个。</li><li>执行顺序：从上往下，顺序执行。</li><li>注意事项：<ol><li>在局部代码块中定义的变量，则该变量就只能在当前作用域中使用，不能在代码块之外使用。</li></ol></li></ul></li><li><p><strong>静态代码块的概述</strong></p><ul><li><p>定义位置：在类中，代码块和方法体之外（必须使用static来修饰）。</p></li><li><p>定义个数：任意多个</p></li><li><p>执行顺序：从上往下，顺序执行</p></li><li><p>注意事项：a）加载某个类的时候，就会执行该类中的静态代码块，并且静态代码块只会执行一次。</p><p> –&gt;执行时间：加载类的时候，就会执行该类中的静态代码块。</p><p> –&gt; 执行次数：因为类只会加载一次，因此静态代码块就只会执行一次。</p><p> b）在静态代码块中，我们可以直接操作当前类的静态内容，但是不能直接操作当前类的成员内容和this。</p><p> –&gt; 原因：加载类的时候，就会执行该类中的静态代码块，则执行静态代码块的时候对象都还未创建。</p><p> c）加载类的时候，静态变量和静态代码块属于“从上往下，顺序执行”，建议把静态变量定义在静态代码块之前。</p><p> –&gt; 注意：在静态代码块中，我们“未必”能直接操作当前的静态变量。</p><p> d）在静态代码块中定义的变量，则该变量就只能在当前作用域中使用，不能再代码块之外使用。</p><p>使用场合：<strong>开发中，我们经常再静态代码块中完成对静态变量的初始化操作（常见）。</strong></p><p> –&gt;例如：创建工厂、加载数据库初始信息等等。</p></li></ul></li><li><p><strong>构造代码块的概述</strong></p><ol><li>定义位置：在类中，代码块和方法体之外（不能使用static来修饰）</li><li>定义个数：任意多个</li><li>执行顺序：从上往下，顺序执行。</li><li>注意事项：<ul><li>创建对象的时候，则就会执行该类中的构造代码块，对象创建了多少次则构造代码块就执行多少次。<ul><li>执行时间：创建对象的时候，则就会执行该类中的构造代码块。</li><li>执行次数：对象创建了多少次，则该类中的构造代码块就执行多少次。</li></ul></li><li>在构造代码块中，我们不但能直接操作当前类的静态内容，并且还能直接操作当前类的成员内容和this。<ul><li>原因：执行代码块的时候，此时对象都已经创建完毕，因此就能操作当前类的成员内容和this。</li></ul></li><li>创建对象的时候，成员变量和构造代码块属于“从上往下，顺序执行”，建议把成员变量定义在构造代码块之前。<ul><li>注意：在构造代码块中，我们“未必”能直接操作当前类的成员变量。</li></ul></li><li><strong>在构造代码块中定义的变量，则该变量就只能在当前作用域中使用，不能在代码块之外使用。</strong></li><li>使用场合：开发中，我们偶尔会在构造代码块中完成对成员变量的初始化操作。（不常见）<ul><li>可以将各个构造方法中公共的代码提取到构造代码块。</li><li>匿名内部类不能提供构造方法，此时初始化操作可以放到构造代码块中。</li></ul></li></ul></li></ol></li><li><p><strong>静态代码块、构造代码块和构造方法执行顺序？</strong></p><p>–&gt; 静态代码块 &gt; 构造代码块 &gt; 构造方法</p></li></ol><h4 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h4><ol><li><p>包的作用</p><ul><li>我们使用包来管理类，也就是类应该放在包中。</li><li><strong>包的出现，为类提供了多层的命名空间，也即是类的完整名字为”包名.类名”。</strong></li><li>注意：不同的包中，我们可以定义同名的类；同一个包中，我们不允许定义同名的类。</li></ul></li><li><p>如何定义包</p><ul><li><p>包名必须满足“标识符”的命名规则，必须满足<strong>“单词全部小写，多个单词之间以’.’链接，并且做到顶级域名倒着写”</strong>的命名规范。</p></li><li><p><strong>问题：以下两个包是否存在父子关系？【没有】</strong></p><p>–&gt; com.bjpowernode.demo com.bjpowernode.demo.test</p></li></ul></li><li><p>如何使用包</p><p>–&gt; <strong>在源文件有效代码第一行，使用package关键字来声明当前源文件中的类在那个包中。</strong></p><p>注意：通过IDEA新建的源文件，则源文件有效代码的第一行默认就有包声明；<strong>如果通过DOS命令来运行IDEA创建的源文件，则必须删除源文件中的包声明。</strong></p></li><li><p>java语言提供的包</p><ul><li><strong>java.lang 包含一些java语言的核心类，如String、Math、System等；</strong></li><li>java.awt 包含了构成抽象窗口工具集(abstract window toolkits)的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)；</li><li>java.net 包含执行与网络相关的操作的类；</li><li>java.io 包含能提供多种输入、输出功能的类；</li><li>java.util 包含一些实用工具类，如定义系统特性、使用与日期日历相关的函数。</li></ul></li><li><p><strong>类的访问方式</strong></p><ul><li><p><strong>简化访问</strong></p><ul><li><p>解释：当我们需要访问“java.lang”或“当前包”中的类时，则就可以直接使用“类名”来实现简化访问。</p></li><li><p>例如：访问“当前包”中的类</p><p>–&gt; Tiger tiger &#x3D; new Tiger(“老虎”, 18);</p></li><li><p>例如：访问“java.lang”中的类</p><p>–&gt; String str &#x3D; “hello world”;</p></li></ul></li><li><p><strong>带包名访问</strong></p><ul><li><p>解释：当我们需要访问“当前包”之外的类时（排除java.lang包中的类），则我们就必须通过“包名.类名”的方式来访问。</p></li><li><p>例如：访问”p1包”中的类</p><p>–&gt; com.bjpowernode.p1.staticblock.student stu &#x3D; new com.bjpowernode.p1.staticblock.student();</p></li><li><p>例如：访问“java.util”中的类</p><p>–&gt; java.util.Scanner input &#x3D; new java.util.Scanner(System.in);</p></li></ul></li></ul></li><li><p><strong>import关键字的概述</strong></p><ul><li><p><strong>解释：当我们需要访问“当前包”之外的类（排除java.lang包中的类），则必须通过“带包名”的方式来访问，则此访问方式太麻烦，想要实现简化访问，则就可以先通过import关键字导入需要访问的类，然后再通过“类名”来实现简化访问。</strong></p></li><li><p>例如：访问“p1包”中的类</p><p>–&gt; import com.bjpowernode.p1.staticblock.student;</p><p>–&gt; Student stu &#x3D; new Steudent();</p></li><li><p>例如：访问”java.util”中的类</p><p>–&gt; import java.util.Scanner;</p><p>–&gt; Scanner input &#x3D; new Scanner(System.in);</p></li></ul></li><li><p><strong>import关键字的注意点</strong></p><ul><li><p><strong>如果需要使用某个包中的多个类时，则我们可以通过”*”通配符来导入这个包中的所有类。</strong></p><p>–&gt; 注意：开发中，不建议使用“*”来导入某个包中的所有类，因此此方式效率非常低。</p></li><li><p><strong>如果需要使用不同包中的同名类时，则其中一个类必须通过“带包名”的方式来访问。</strong></p><p>–&gt; 原因：通过import关键字导入多个不同包的同名类，则在源文件中使用导入的类时，无法区分。</p></li><li><p><strong>在JDK1.5之后，还新增了静态导入，也就是能导入某个类中的静态属性和静态方法。</strong></p><p>–&gt; 例如：导入Math类中的静态属性</p><ol><li>第一步：import static java.lang.Math.PI;</li><li>第二步：System.out.println(PI);</li></ol><p>–&gt; 例如：导入Math类中的静态属性和静态方法</p><ol><li>第一步：import static java.lang.Math.*;</li><li>第二部：System.out.println(PI);</li></ol></li></ul></li></ol><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ol><li><p>问题：具备那三大特性的编程语言，我们才称之为面向对象语言？</p><p><strong>–&gt; 封装、继承、多态</strong></p></li><li><p><strong>封装的引入</strong></p><ul><li><p>问题1：给学生年龄赋值的时候，赋值的年龄不能为负数！</p><p>–&gt; 使用“setter和getter”方法来解决</p></li><li><p>问题2：<strong>相同的代码在不同的包中，可能会发生编译错误！</strong></p><p>–&gt; 使用“权限修饰符”来解决</p></li></ul></li><li><p><strong>编程中的封装</strong></p><ul><li><strong>核心：对于使用者而言，只需掌握其公开的访问方式，无需了解内部的具体实现细节。</strong></li></ul></li><li><p><strong>封装的层次</strong></p><ul><li>面向过程：对功能做的封装，也就是使用方法来完成的封装。</li><li><strong>面向对象：对数据和功能做的封装，也就是使用类来完成的封装。</strong></li></ul></li><li><p><strong>封装的好处</strong></p><ul><li>封装的出现，提高了代码的安全性【了解】。</li><li><strong>封装的出现，提高了代码的复用性【核心】。</strong></li></ul></li></ol><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><ol><li><p>private，私有的，权限：只能在“<strong>当前类</strong>”中访问，因此我们称之为“类可见性”。</p></li><li><p>default，<strong>默认的，权限：</strong>只能在“<strong>当前类 + 当前包</strong>”中访问，因此我们称之为“包可见性”。</p><p>–&gt; 注意：在权限修饰符中，没有default关键字，省略权限修饰符默认就是包可见性。</p></li><li><p>protected，受保护的，权限：只能在“<strong>当前类 + 当前包 + 别的包中的子类包</strong>”中访问，因此我们称之为“子类可见性”。</p></li><li><p>public，公开的，权限：只能在“<strong>当前类 + 当前包 + 加别的包</strong>”中访问，因此我们称之为“项目可见性”。</p></li></ol><ul><li><strong>权限大小【由低到高】：private &lt;&lt; default &lt;&lt; protected &lt;&lt; public</strong></li></ul><h4 id="权限修饰符的使用"><a href="#权限修饰符的使用" class="headerlink" title="权限修饰符的使用"></a>权限修饰符的使用</h4><ul><li><p><strong>明确：实际开发中，“默认的”和“受保护的”很少使用，但是“私有的”和“公开的”却很常用。</strong></p></li><li><p><strong>private：default、protected和public都能修饰”成员变量”和“静态变量”。</strong></p><p>–&gt; 成员变量：因为存储都是“特殊数据”，因此使用private修饰。</p><p>–&gt; 静态变量：因为存储是“共享数据”，因此使用public来修饰。</p></li><li><p><strong>private：default、protected和public都能修饰”成员方法”和“静态方法”。</strong></p><p>–&gt; 如果该方法需要外界访问，则就把该方法使用public来修饰。</p><p>–&gt; 如果该方法无需外界访问，也就是只为当前类服务，那么久把该方法使用private来修饰。</p></li><li><p><strong>private：default、protected和public都能修饰“构造方法”。</strong></p><p>–&gt; 如果该类需要被外界实例化，则该类的构造方法就采用public来修饰;</p><p>–&gt; 如果该类无需被外界实例化，则该类的构造方法就采用private来修饰。</p><p><strong>注意：工具类中只有静态内容，因此工具类就无需被实例化，那么工具类的构造方法都采用了private修饰，eg：Arrays和Math等等。</strong></p></li><li><p><strong>定义类的时候，类只允许使用public和default，不允许使用private和protected来修饰。</strong></p><p>–&gt;使用public修饰的类（公开权限），则该类就能在整个项目中使用。</p><p>–&gt; 使用default修饰的类（默认权限），则该类就只能在当前包中使用。</p></li><li><p><strong>使用权限修饰符，则不允许修饰局部变量、局部代码块、静态代码块和构造代码块。</strong></p></li></ul><h4 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h4><ol><li>setter和getter方法的概述<ul><li>成员变量一律私有化（private），避免外界直接去访问成员变量，然后提供公开的setter和getter方法来操作私有的成员变量。</li></ul></li><li><strong>setter方法的概述</strong><ul><li>作用：用于给私有的成员变量做<strong>赋值操作</strong>，<strong>并且还能对赋值的数据做检查和处理。</strong></li></ul></li><li><strong>getter方法的概述</strong><ul><li>作用：<strong>用于获取私有成员变量的值（取值操作），并且还能对获得的数据做统一的处理。</strong></li></ul></li><li><strong>setter和getter的注意点</strong><ul><li>通过构造方法给成员变量赋值，如果赋值的数据需要做检查和处理，则在构造方法中就必须调用setter方法来实现赋值操作。</li><li><strong>给boolean类型成员变量提供getter方法的时候，此时getter方法的名字前缀必须是“is”开头，而不是能以“get”来开头。</strong></li><li><strong>给类提供“构造方法”和“setter和getter方法”的时候，则建议使用“alt + insert”快捷键来实现，而不建议手动写代码来实现。</strong></li></ul></li></ol><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ol><li><p><strong>继承的引入</strong></p><ul><li>问题：讲师类和学生类中都有相同的name和age两个成员变量，都有相同的eat()和sleep()两个成员方法，因此需要实现代码的复用。</li><li>解决：使用“继承”来实现。</li></ul></li><li><p><strong>继承的本质</strong></p><ul><li>就是提取一系列类中相同的成员变量和成员方法，这样就得到了一个父类，从而形成了继承关系。</li><li>即：<strong>向上提取。</strong></li></ul></li><li><p><strong>继承语法</strong></p><pre class="line-numbers language-Java"><code class="language-Java">[修饰符] class 父类{}[修饰符] class 子类 extends 父类{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>继承的特点</strong></p><ul><li>子类不但能继承父类的成员变量和成员方法，并且子类还可以有自己特有的成员变量和成员方法。</li><li>即：<strong>子类对父类做的扩展。</strong></li></ul></li><li><p><strong>继承的好处</strong></p><ul><li>继承的出现，提高了代码的复用性，从而提高了开发的效率。</li><li>继承的出现，让类与类之间产生了联系，为后面学习“多态”打下了技术铺垫。</li><li><strong>强调：继承是一把“双刃剑”，父类代码一旦发生了变化，则就会影响所有的子类，使用继承的时候慎重。【高耦合】</strong></li></ul></li><li><p><strong>哪些内容子类不能继承</strong></p><ul><li>父类私有的内容，子类不能继承。</li><li>父类的构造方法，子类不能继承。</li><li><strong>父类静态的内容，虽然子类能够使用，但父类静态内容“不参与”继承。</strong></li><li><strong>强调：继承强调的是“对象”之间的关系，因此成员内容能参与继承，但是静态内容不参与继承。</strong></li></ul></li><li><p><strong>继承的注意点</strong></p><ul><li><p><strong>java语言采用的是“单继承”，C++语言采用的是“多继承”。</strong></p><ul><li><strong>单继承：</strong>一个子类只能有一个直接父类。</li><li><strong>多继承：</strong>一个子类可以有多个直接父类。</li></ul></li><li><p>AA类继承于BB类，BB类继承于CC类，CC类继承于DD类，。。。，从而就形成了“继承链”。</p><p>–&gt; 此处BB类，CC类和DD类都是AA类的“父类”，<strong>只有BB类属于AA类的“直接父类”。</strong></p></li><li><p><strong>java语言中，一个子类只能有一个直接父类，但是一个父类可以有多个直接子类。</strong></p></li><li><p><strong>如果一个类没有显式地使用extends关键字，则该类就默认继承于”java.lang.Object”类。</strong></p><p>–&gt; <strong>所有的java类都可以使用object类提供的方法。【最终继承的都是object类】</strong></p></li></ul></li></ol><h4 id="方法重写（方法复写，override）"><a href="#方法重写（方法复写，override）" class="headerlink" title="方法重写（方法复写，override）"></a>方法重写（方法复写，override）</h4><ol><li><p><strong>方法重写的引入</strong></p><ul><li>eg：智能机是对功能机做的扩展，也就是应该让“智能机类”继承于“功能机类”，也就意味着“父类”和“子类”中都有show()方法，从而就形成了“方法重写”。</li></ul></li><li><p><strong>什么是方法重写呢？</strong></p><ul><li>在子类中，我们定义一个和父类“几乎”一模一样的方法，这就形成了“方法重写”。</li></ul></li><li><p><strong>什么时候使用方法重写？</strong></p><ul><li>当父类提供的方法无法满足子类的需求，则在子类中就可以重写父类提供的方法，从而满足开发的需求。</li></ul></li><li><p><strong>父类的哪些方法子类不能重写？</strong></p><ul><li>父类的构造方法，子类不能重写。</li><li>父类的静态方法，子类不能重写。</li><li>父类私有的成员方法，子类不能重写。</li></ul></li><li><p><strong>方法重写的注意点</strong></p><ul><li><p>通过子类对象来调用重写方法，则默认调用的是子类重写的方法，而不是调用父类被重写的方法。</p></li><li><p>保证子类的某个方法肯定是重写方法，则可以在该方法声明之前添加“@Override”注解，从而保证该方法肯定是重写方法。</p><p>–&gt; 如果某个方法声明之前添加了“@Override”注解，则该方法就必须是重写方法，否则就会编译错误。</p></li><li><p><strong>在子类重写方法中，如果想要调用父类被重写的方法，则必须通过super关键字来调用（this和super使用类似）</strong></p></li></ul></li><li><p><strong>方法重写的具体要求</strong></p><ul><li><p><strong>&#x3D;&#x3D;，子类重写方法的“方法名”和“形参列表”必须和父类被重写方法的“方法名”和“形参列表”相同。</strong></p><p>–&gt; 此处“形参列表”必须相同，指的是“形参个数”和“形参类型”必须相同，<strong>形参名字不同不影响。</strong></p></li><li><p><strong>“&gt;&#x3D;”，子类重写方法的修饰符权限必须大于等于父类被重写方法的修饰符权限【权限】。</strong></p><p>–&gt; 修饰符权限：public &gt; protected &gt; default &gt; private</p><p><strong>–&gt; 注意：子类就不能重写父类采用了static或private来修饰的方法。</strong></p></li><li><p><strong>“&lt;&#x3D;”，子类重写方法的“返回值类型”必须小于等于父类被重写方法的“返回值类型”【辈分】。</strong></p><p>–&gt; 如果父类被重写方法的返回值类型为void、基本数据类型和String类型，则子类重写方法的返回值类型必须和父类被重写方法的返回值类型保持一致（&#x3D;&#x3D;）。</p><p>–&gt; 如果父类被重写方法的返回值类型为引用数据类型（排除String类型），则子类重写方法的返回值必须小于等于被重写方法的返回值类型。（&lt;&#x3D;，辈分）。</p></li></ul></li></ol><h4 id="方法重载和方法重写的区别"><a href="#方法重载和方法重写的区别" class="headerlink" title="方法重载和方法重写的区别"></a>方法重载和方法重写的区别</h4><ol><li><p><strong>整体区别</strong></p><ul><li><p>英文名字区别</p><p>方法重载：overload</p><p>方法重写：override</p></li><li><p>使用位置区别</p><p>方法重载：同一个类中使用。</p><p>方法重写：<strong>必须在继承体系中使用。</strong></p></li><li><p>具体作用区别</p><p>方法重载：允许在同一类中定义多个同名的方法，从而避免了方法名被污染。</p><p>方法重写：父类提供的方法如果无法满足子类需求，则子类就可以重写父类提供的方法。</p></li><li><p>修饰符的区别</p><p>方法重载：修饰符不同，不构成方法重载。</p><p>方法重写：<strong>子类重写方法的“修饰符权限”必须大于等于父类被重写方法的“修饰符权限”【权限】。</strong></p></li><li><p>返回值类型的区别</p><p>方法重载：返回值类型不同。不构成方法重载。</p><p>方法重写：<strong>子类重写方法的“返回值类型”必须小于等于父类被重写方法的“返回值类型”【辈分】。</strong></p></li><li><p>方法名的区别</p><p>方法重载：方法名必须相同。</p><p>方法重写：方法名必须相同。</p></li><li><p><strong>形参列表的区别</strong></p><p>方法重载：<strong>形参个数不同 或 形参类型不同，形参名字不同不影响。</strong></p><p>方法重写：<strong>形参个数 和 形参类型必须相同。</strong></p></li></ul></li></ol><h4 id="重写toString-方法（理解）"><a href="#重写toString-方法（理解）" class="headerlink" title="重写toString()方法（理解）"></a>重写toString()方法（理解）</h4><ol><li><strong>请问print()和println()方法的作用</strong><ul><li><strong>通过输出语句，都能把输出的内容转化为字符串类型，然后把转化为字符串类型的结果输出到控制台。</strong></li></ul></li></ol><h4 id="super关键字-重点"><a href="#super关键字-重点" class="headerlink" title="super关键字(重点)"></a>super关键字(重点)</h4><ol><li><p><strong>super关键字的概述</strong></p><ul><li>创建一个对象成功之后，则虚拟机就会动态地创建一个引用，该引用指向的就是“新创建出来的对象”，并且该引用的名字就是this。</li><li>创建一个子类对象成功之后，则虚拟机还会动态创建一个引用，该引用指向的就是“当前对象的直接父类对象”，并且该引用的名字就是super。</li><li>总结：this指的就是“当前对象”，super指的就是“当前对象的直接父类对象”。并且this可以单独使用，但是super不能单独使用。</li></ul></li><li><p><strong>super关键字的作用</strong></p><ul><li><strong>强调：this和super指的都是“对象”，并且this和super使用场合是相同的（构造方法、成员方法和构造代码块）。</strong></li><li>操作父类的成员变量，语法： super.父类成员变量名</li><li>调用父类的成员方法，语法：super.父类成员方法(实参列表);</li><li>调用父类的构造方法，语法：super(实参列表);</li></ul></li><li><p><strong>this和super的区别</strong></p><ul><li>this的特点：先在当前类找，找不到再去父类找。</li><li>super的特点：直接去父类找，而不会在当前类找。</li></ul></li><li><p><strong>super关键字的注意点</strong></p><ul><li><p>在子类重写方法中，如果想要调用父类被重写的方法，则必须通过super关键字来实现。</p></li><li><p>当局部变量，子类的成员变量和父类的成员变量同名的时候，则该如何去区分呢？</p><p><strong>局部变量采用“就近原则”，子类成员变量通过“this”来操作，父类成员变量通过“super”来操作。</strong></p></li><li><p><strong>父类私有的成员变量，在子类中即使使用super关键字也无法操作，只能通过setter和getter方法来操作父类私有成员变量。</strong></p></li></ul></li></ol><h4 id="super-实参列表-的概述"><a href="#super-实参列表-的概述" class="headerlink" title="super(实参列表)的概述"></a>super(实参列表)的概述</h4><ul><li><strong>在子类构造方法中，如果想要显式地调用父类的某个构造方法，则必须通过“super(实参列表)”来实现，从而实现了代码的复用。</strong></li><li><strong>在子类构造方法中，如果没有显式地调用别的构造方法，则默认就会调用父类的无参构造方法，也就是编译时会默认添加“super();”语句。</strong></li></ul><h4 id="super-实参列表-的注意点"><a href="#super-实参列表-的注意点" class="headerlink" title="super(实参列表)的注意点"></a>super(实参列表)的注意点</h4><ul><li><strong>“super(实参列表)”只能存在于构造方法中，并且必须在构造方法有效代码的第一行。</strong></li><li><strong>建议每个类都应该有自己的无参构造方法，避免在继承体系中子类找不到父类的无参构造方法。</strong></li></ul><h4 id="this-实参列表-和super-实参列表-的区别"><a href="#this-实参列表-和super-实参列表-的区别" class="headerlink" title="this(实参列表)和super(实参列表)的区别"></a>this(实参列表)和super(实参列表)的区别</h4><ul><li>this(实参列表)的特点：<strong>调用“当前类”的别的构造方法，并且必须在构造方法有效代码的第一行。</strong></li><li>super(实参列表)的特点：<strong>调用“父类”中的某个构造方法，并且必须在构造方法有效代码的第一行。</strong></li><li>结论：<strong>因为“this(实参列表)”和“super(实参列表)”都必须在构造方法有效代码的第一行，因此构造方法中不允许同时存在“this(实参列表)”和“super(实参列表)”。</strong></li></ul><h4 id="继承体系下，创建子类对象的步骤分析"><a href="#继承体系下，创建子类对象的步骤分析" class="headerlink" title="继承体系下，创建子类对象的步骤分析"></a>继承体系下，创建子类对象的步骤分析</h4><ol><li>第一步：加载类（先加载父类，后加载子类）<ul><li>先执行父类的静态代码块，然后执行子类的静态代码块。</li></ul></li><li>第二步：创建对象（先创建父类对象，后创建子类对象）<ul><li>首先，执行父类的构造代码块，接着执行父类的构造方法。</li><li>然后，执行子类的构造代码块，接着执行子类的构造方法。</li></ul></li></ol><h4 id="继承体系下，创建子类对象的内存分析"><a href="#继承体系下，创建子类对象的内存分析" class="headerlink" title="继承体系下，创建子类对象的内存分析"></a>继承体系下，创建子类对象的内存分析</h4><ul><li><strong>创建一个子类对象，则默认还会创建他的父类对象，并且创建的这些对象之间属于“包含”关系。</strong></li><li><strong>也就是说，子类对象中包含了父类对象，那么子类对象和父类对象的“首地址”肯定是相同的。</strong></li></ul><h4 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h4><ol><li>组合的引入<ul><li>需求：有一台电脑，电脑中包含鼠标、键盘和CPU等。</li><li>实现：定义电脑类（Computer），然后再定义鼠标类（Mouse）、键盘类（KeyBoard）和CPU类（CPU），然后把鼠标、键盘和CPU作为电脑类的“成员变量”即可，这就形成了“组合”关系。</li></ul></li><li>继承和组合<ul><li>相同点<ul><li><strong>都能让类与类之间产生联系，都能实现代码的复用。</strong></li></ul></li><li>不同点<ul><li><strong>继承描述的是“is a”的关系</strong>，例如：Tiger is Animal, Student is a Person等等。</li><li><strong>组合描述的是“has a”的关系</strong>，例如：Computer has a Mouse,Computer has a keyBoard等等。</li></ul></li></ul></li></ol><h4 id="final关键字的概述"><a href="#final关键字的概述" class="headerlink" title="final关键字的概述"></a>final关键字的概述</h4><ol><li>final关键字的含义<ul><li>最终的、不可变的</li></ul></li><li>final关键字能修饰的内容？<ul><li>final关键字能修饰类、变量（局部变量、成员变量和静态变量）和方法（成员方法和静态方法），但是不能修饰构造方法和代码块。</li></ul></li></ol><h4 id="final关键字的特点"><a href="#final关键字的特点" class="headerlink" title="final关键字的特点"></a>final关键字的特点</h4><ol><li><p>使用final关键字修饰的类，</p><p>则该类就不能被继承。</p><ul><li>使用final修饰的类，则改类肯定是一个子类，例如String、Math和System都采用了final修饰。</li></ul></li><li><p>使用final关键字修饰的方法（成员方法和静态方法），则该方法就不能被重写。</p><ul><li>如果某个成员方法不想被子类重写，则该方法就采用final来修饰即可，例如Object类中的很多方法都采用了final修饰。</li></ul></li><li><p>使用final关键字修饰的变量（局部变量、成员变量和静态变量），则该变量就变为常量了。</p><ul><li>常量名必须符合“标识符”的命名规则，必须符合“字母全部大写，多个单词之间以下划线连接”的命名规范。</li><li>使用final修饰的静态变量，要么做显式初始化，要么在静态代码块中初始化，否则就会编译错误。</li><li>使用final修饰的成员变量，要么做显式初始化，要么在构造代码块中初始化，要么在构造方法中初始化，否则就会编译错误。</li></ul></li><li><p><strong>使用final关键字，我们不能修饰构造方法、局部代码块、构造代码块和静态代码块。</strong></p></li></ol><h4 id="final修饰引用数据类型变量的特点"><a href="#final修饰引用数据类型变量的特点" class="headerlink" title="final修饰引用数据类型变量的特点"></a>final修饰引用数据类型变量的特点</h4><ul><li><strong>引用数据类型的变量采用final修饰后，则该变量就变为常量了，因此常量保持的地址值不能更改，但是该常量指向堆内存中的成员变量值可以更改。</strong></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li><p><strong>使用多态的前提？</strong></p><ul><li><p><strong>前提1：继承是实现多态的前提。</strong></p><p>–&gt; 让所有的动物类都继承于Animal类，也就是Animal类是所有动物类的父类！</p></li><li><p><strong>前提2：子类必须重写父类方法。</strong></p><p>–&gt; 所有的动物类都重写了Animal类的eat()方法，毕竟每个动物吃的东西都不同。</p></li><li><p><strong>前提3：父类引用指向子类对象。</strong></p><p>–&gt; Admin类中的feedAnimal()方法的形参为“Animal”类型，调用该方法时的实参为“Animal类的子类对象”，此处就用到了“父类引用指向子类对象”。</p><p>–&gt; 调用feedAnimal()方法的代码为“admin.feedAnimal(new Dog());”，则实现赋值给形参的操作就等效于：Animal animal &#x3D; new Dog();</p></li></ul></li><li><p><strong>使用多态的场合</strong></p><ul><li><p><strong>场合一：方法的形参为父类类型，则实参就可以是该父类的任意子类对象。</strong></p><p>–&gt; 例如：管理员给动物们喂食的案例</p></li><li><p><strong>场合二：返回值类型为父类类型，则返回值就可以是该父类的任意子类对象。</strong></p><p>–&gt; 例如：简单工厂模式的案例</p></li></ul></li></ul><h4 id="多态情况下，操作成员变量的特点"><a href="#多态情况下，操作成员变量的特点" class="headerlink" title="多态情况下，操作成员变量的特点"></a>多态情况下，操作成员变量的特点</h4><ol><li>编译时：检查“编译时类型”，也就是检查编译时类型中是否有该成员变量。</li><li>运行时：检查“编译时类型”，也就是操作了编译时类型中的成员变量。</li><li><strong>总结：多态情况下操作成员变量，则编译和运行都检查“编译时类型”。</strong></li></ol><h4 id="abstract的引入"><a href="#abstract的引入" class="headerlink" title="abstract的引入"></a>abstract的引入</h4><ol><li>需求：在教师职业中，有讲师和助教两个工种，他们都具备工作的能力。</li><li>实现：定义讲师类（Teacher）和助教类（Assistant），然后分别提供work()的方法。</li><li>问题：讲师类和助教类都有work()方法，也就是讲师类和助教类都有相同的代码，因此我们需要实现代码的复用。</li><li>解决：使用“继承”来实现。定义一个员工类（Employee），并且给员工类提供work()方法，然后让讲师类和助教类继承于员工类，并重写员工类中的work()方法。</li><li>问题1：世界上没有任何一个工种就叫做员工，因此员工类不应该被实例化！<ul><li>–&gt; 使用“抽象类”来解决，也就是把员工类设置为抽象类即可。</li></ul></li><li>问题2：为了避免讲师和助教偷懒，因为要求讲师类和助教类必须重写员工类的work()方法！<ul><li>–&gt; 使用“抽象方法”来解决，也就是把员工类的work()方法设置为抽象方法。</li></ul></li></ol><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ol><li><p>什么是抽象类</p><ul><li><strong>使用abstract关键字修饰的类，则我们就称之为“抽象类”。</strong></li></ul></li><li><p><strong>抽象类的组成</strong></p><ul><li>a)在抽象类中，依旧可以拥有成员变量和静态变量。</li><li>b)在抽象类中，依旧可以拥有成员方法和静态方法，<strong>并且还可以有任意多个抽象方法。</strong></li><li>c)在抽象类中，依旧可以拥有构造方法，该构造方法用于给抽象类中的成员变量做指定初始化操作。</li><li>d)在抽象类中，依旧可以拥有构造代码块和静态代码块。</li><li><strong>总结：抽象类就是一个特殊的类，抽象类对比普通类新增了任意多个抽象方法。</strong></li></ul></li><li><p><strong>抽象类的特点</strong></p><ul><li><p><strong>a)抽象类不能被实例化，因为抽象类中包含了抽象方法。</strong></p></li><li><p>b)抽象类肯定是一个父类，<strong>只有实现类“实现”了抽象类中的所有抽象方法，则该实现类才能被实例化，否则该实现类就是一个抽象类。</strong></p><p><strong>实现：子类重写父类的抽象方法，我们就称之为“实现”。</strong></p><p>重写：子类重写父类的普通方法，我们就称之为“重写”。</p></li><li><p><strong>c)抽象类可以作为方法的“形参类别”和“返回值类型”，也就是抽象类也可以实现多态。</strong></p></li><li><p><strong>d)实现类与抽象类之间属于“extends”的关系，并且属于“单继承”。</strong></p></li></ul></li></ol><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ol><li>什么是抽象方法？<ul><li><strong>使用abstract关键字修饰的方法，我们就称之为“抽象方法”。</strong></li></ul></li><li>抽象方法的特点<ul><li>a)抽象方法<strong>只有方法声明</strong>，没有方法内部的具体实现，也就是<strong>没有方法体。</strong></li><li><strong>b)抽象方法只能存在于“抽象类”和“接口”中，不能存在于“普通类”中。</strong></li></ul></li><li>关于abstract关键字的补充？<ul><li>a)<strong>请问abstract关键字和哪一个关键字是反义词？</strong>？？final</li><li>b)<strong>请问abstract关键字不能和哪些关键字共存呢？</strong>？？final、private、static</li></ul></li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h4 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h4><ol><li>接口的引入<ul><li>需求：让飞机、炮弹、小鸟和超人进行飞行表演！</li><li>实现：定义飞机类（Plane）、炮弹类（Peng）、小鸟类（Bird）和超人类（SuperMan），然后为每个类提供showFly()的方法。</li><li>问题：飞机类、炮弹类、小鸟类和超人类都有showFly()方法，也就是这些类中有相同的代码，那么我们就需要实现代码的复用，如何实现？</li><li>解决：使用“继承”来解决。定义一个Flyable类，然后给Flyable类提供showFly()的方法，接着让飞机类、炮弹类、小鸟类和超人类“继承”于Flyable类，并重写Flyable类中的showFly()方法。</li><li>问题：继承描述的是“is a”的关系，也就是描述“相同体系”的基本行为，此处飞机、炮弹、小鸟和超人属于不同体系，因此使用继承不合适</li><li>解决：使用“接口”来解决。定义一个Flyable接口，然后给Flyable接口提供showFly()方法，接着让飞机类、炮弹类、小鸟类和超人类“实现”于Flyable接口，并实现Flyable接口中的showFly()方法。</li><li><strong>总结：接口描述的是“is like a”的关系，也就是描述“不同体系”的相同行为，此处飞机、炮弹、小鸟和超人属于不同体系，因此使用接口很合适。</strong></li></ul></li></ol><h4 id="接口的概述"><a href="#接口的概述" class="headerlink" title="接口的概述"></a>接口的概述</h4><ol><li><p>接口的定义</p><ul><li><strong>明确：接口使用interface关键字来修饰，并且interface和class属于平级的，因此interface和class不能共存！</strong></li></ul></li><li><p>接口的组成</p><ul><li><p>a)接口中的<strong>属性</strong>，<strong>默认全部是“全局静态常量”，也就是默认使用了“public static final”来修饰。</strong></p></li><li><p>b)接口中的<strong>方法，默认全部是“全局抽象方法”，也就是默认使用了“public abstract”来修饰。</strong></p><p><strong>在JDK1.8之后，接口中还新增了“全局静态方法”和“default修饰的全局默认方法”。</strong></p></li><li><p>c)<strong>在接口中，不允许存在构造方法，因为接口中都没有成员变量，因此就无需存在构造方法。</strong></p></li><li><p><strong>d)在接口中，不允许存在静态代码块和构造代码块。</strong></p></li></ul></li><li><p>接口的特点</p><ul><li>a)<strong>接口不能被实例化，因为接口中存在抽象方法，并且接口中没有构造方法。</strong></li><li>b)<strong>接口可以作为方法的“形参类型”和“返回值类型”</strong>，也就是<strong>接口能够实现多态。</strong></li><li>c)接口与接口之间属于“extends”的关系，并且<strong>接口还属于“多继承”。</strong></li><li>d)<strong>抽象方法只能存在于“抽象类”和“接口”中，不能存在于“普通类”中。</strong></li></ul></li></ol><h4 id="实现类的概述"><a href="#实现类的概述" class="headerlink" title="实现类的概述"></a>实现类的概述</h4><ol><li><p>实现类的定义</p><ul><li>明确：<strong>实现类和接口之间属于“implements”的关系，而不是属于“extends”的关系。</strong></li></ul></li><li><p>实现类的特点</p><ul><li>a)<strong>实现类只有“实现”了接口中的所有抽象方法，则该实现类才能被实例化，否则该实现类就是一个抽象类。</strong></li><li>b)<strong>实现类可以先继承一个父类，然后再去实现多个接口，实现多个接口的操作我们就称之为“接口的多实现”。</strong></li></ul></li><li><p>抽象类和接口的总结</p><ol><li><p>普通类、抽象类和接口的特点</p><ul><li><strong>接口的抽象程度最高，抽象类的抽象程度次之，普通类的抽象程度最低。</strong></li></ul></li><li><p>抽象类和接口的对比</p><ul><li><p>相同点</p><ol><li>都是向上提取的结果，因此都不能被实例化。</li><li>都是向上提取的结果，因此都包含了抽象方法。</li></ol></li><li><p>不同点</p><ol><li><p>接口与接口之间属于“extends”的关系，并且属于“多继承”。</p><p>抽象类与抽象类之间属于“extends”的关系，并且属于“单继承”。</p></li><li><p>实现类与接口之间属于“implements”的关系，并且属于“多实现”。</p><p>实现类与抽象类之间属于“extends”的关系，并且属于“单继承”。</p></li><li><p>接口描述的是“is like a”的关系，也就是描述“不同体系”的相同行为。</p><p>抽象类描述的是“is a”的关系，也就是描述“相同体系”的基本行为。</p></li><li><p>接口中只有“全局静态常量”和“全局抽象方法”，JDK1.8之后新增了“全局静态方法”和“default修饰的全局默认方法”。</p><p>抽象类就是一个特殊类，抽象类对比普通类新增了任意多个抽象方法。</p></li></ol></li></ul></li></ol></li></ol><h4 id="单继承和多继承的概述？"><a href="#单继承和多继承的概述？" class="headerlink" title="单继承和多继承的概述？"></a>单继承和多继承的概述？</h4><ol><li>单继承：java、C#等等<ul><li>解释：一个子类只能有一个直接父类，类似于一个儿子只有一个亲爹。</li><li>优势：简单、安全。</li><li>劣势：只能继承一个父类的内容，则子类功能不够强大。</li></ul></li><li>多继承：C++<ul><li>解释：一个子类可以有多个直接父类，类似于一个儿子可以有多个亲爹。</li><li>优势：可以继承多个父类的内容，则子类功能非常强大。</li><li>劣势：复杂、不安全。</li></ul></li></ol><h4 id="接口的多实现的概述"><a href="#接口的多实现的概述" class="headerlink" title="接口的多实现的概述"></a>接口的多实现的概述</h4><ol><li>需求：要求子类不但简单又安全，同时还要求子类功能非常强大，如何实现？<ul><li>不但要集合单继承和多继承的优势，并且还要摒弃单继承和多继承的劣势。</li><li><strong>实现：先让子类继承于某个父类，然后再让该子类实现多个接口，实现多个接口的操作就称之为“接口的多实现”。</strong></li><li>通过以上的实现方式，我们就模拟了C++的多继承操作，并且还摒弃了C++多继承的劣势。</li></ul></li></ol><h4 id="内部类的概述"><a href="#内部类的概述" class="headerlink" title="内部类的概述"></a>内部类的概述</h4><ol><li><p>什么是内部类</p><ul><li><strong>在OutClass类的内部，我们再定义InnerClass类就是内部类。</strong></li></ul></li><li><p>内部类的定义位置？</p><ul><li>位置一：在类中，代码块或方法体的内部。</li><li>位置二：在类中，代码块和方法体的外部。</li></ul></li><li><p>什么时候使用内部类？</p><ul><li>描述一个事物的时候，我们发现该事物内部还有别的事物，此时就可以使用内部类来实现。</li><li>例如：描述小汽车的时候，我们发现小汽车内部还有发动机，此时的发动机就是一个内部类。</li></ul></li><li><p>内部类的分类？</p><ul><li><strong>成员内部类（掌握）</strong>、<strong>静态内部类（掌握）</strong>、局部内部类（了解）和<strong>匿名内部类（重点）</strong>。</li></ul></li><li><p>内部类编译的特点？</p><ul><li><p>在OuterClass类的内部，我们再定义InnerClass类，此时我们对程序进行编译，<strong>则就会获得两个字节码文件</strong></p><p>–&gt; <strong>OuterClass.class</strong> 外部类的字节码文件，也就是OuterClass类的字节码文件</p><p>–&gt; <strong>OuterClass$InnerClass.class</strong> 内部类的字节码文件，也就是InnerClass类的字节码文件</p></li></ul></li><li><p>操作内部类的特点？</p><ul><li>想要操作内部类，则必须通过外部类来实现，也就是内部类是依附于外部类的。</li></ul></li></ol><h4 id="成员内部类（掌握）"><a href="#成员内部类（掌握）" class="headerlink" title="成员内部类（掌握）"></a>成员内部类（掌握）</h4><p>明确：学习成员内部类的时候，我们建议<strong>把“成员内部类”当成“成员变量”来理解。</strong></p><ol><li><p>定义位置</p><ul><li>在类中，代码块和方法体之外。</li></ul></li><li><p>定义语法</p><ul><li><pre class="line-numbers language-Java"><code class="language-Java">[修饰符] class 外部类{    //成员内部类    [修饰符] class 内部类{    //内部类中的代码    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>成员内部类的实例化方式？</p><ul><li>情况一：<strong>在外部类的内部，我们实例化成员内部类对象（掌握）</strong></li><li>情况二：<strong>在外部类的外部，我们实例化成员内部类对象。（了解）</strong></li></ul></li></ol><h4 id="静态内部类-掌握"><a href="#静态内部类-掌握" class="headerlink" title="静态内部类(掌握)"></a>静态内部类(掌握)</h4><p>明确：学习静态内部类的时候，我们把“静态内部类”当成“静态变量”来理解。</p><ol><li><p>定义位置</p><ul><li>在类中，代码块和方法之外。</li></ul></li><li><p>语法</p><pre class="line-numbers language-Java"><code class="language-Java">[修饰符] class 外部类{    //静态内部类    [修饰符] static class 内部类{        //书写静态内部类的代码    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ul><li><p>a)定义静态内部类的时候，我们可以使用private、protected、public、final和abstract来修饰，并且还<strong>必须使用static来修饰</strong></p></li><li><p>b)在静态内部类中，我们不但能定义成员变量、成员方法、构造方法和构造代码块，并且还<strong>能定义静态变量、静态方法和静态代码块。</strong></p></li><li><p>c)<strong>想要操作静态内部类，则直接通过外部类名来操作即可</strong>，因为静态内部类是依附于外部类的，此处联想“静态变量”来理解即可。</p><p><strong>在外部类的成员位置，我们可以直接操作当前类中的静态内部类；在外部类的静态位置，我们可以直接操作当前类中的静态内部类。</strong></p></li><li><p>d)<strong>在静态内部类中，我们可以直接操作外部类的静态变量和静态方法，但是不能直接操作外部类的成员变量和成员方法。</strong></p><p>静态内部类是依附于外部类的，也就是<strong>只要外部类加载完毕，则就能操作当前类中静态内部类。</strong></p></li><li><p>e)想要操作静态内部类中的静态变量和静态方法，则我们还可以通过以下方式来直接操作：</p><ol><li><strong>操作静态变量</strong>：外部类.静态内部类.静态变量名；</li><li><strong>操作静态方法</strong>：外部类.静态内部类.静态方法名(实参列表);</li></ol></li></ul></li><li><p><strong>静态内部类的实例化方式？</strong></p><ul><li><strong>情况一：在外部类的内部，我们实例化静态内部类对象（掌握）</strong></li><li>情况二：在外部类的外部，我们实例化静态内部类对象（了解）</li></ul></li><li><p><strong>成员内部类和静态内部类的总结</strong></p><ul><li><strong>成员内部类：如果内部类需要依附于外部类对象，则该内部类就必须为成员内部类。</strong></li><li><strong>静态内部类：如果内部类只需依附于外部类即可，并且需要在该内部类中定义静态内容，则该内部类就必须定义为静态内部类。</strong></li></ul></li></ol><h4 id="局部内部类（了解）"><a href="#局部内部类（了解）" class="headerlink" title="局部内部类（了解）"></a>局部内部类（了解）</h4><p>明确：学习局部内部类，则我们把“局部内部类”当成“局部变量”来理解。</p><ol><li><p>定义位置</p><ul><li>在类中，代码块或方法体的内部。</li></ul></li><li><p>注意事项</p><ul><li><p>a)定义局部内部类的时候，我们不能使用private、protected、public和static修饰，但是<strong>可以使用final和abstract来修饰。</strong></p></li><li><p>b)在局部内部类中，我们<strong>只能定义成员变量、成员方法、构造方法和构造代码块</strong>，但是<strong>不能定义静态变量、静态方法和静态代码块。</strong></p></li><li><p>c)局部内部类只能在“当前作用域”中使用，不能在代码块或方法体之外使用，此处我们可以联想局部变量的“生命周期”来理解。</p></li><li><p>d)<strong>在局部内部类中，我们“肯定”能操作外部类的静态变量和静态方法，但是“未必”能操作外部类的成员变量和成员方法。</strong></p><p>在局部内部类中，是否能操作外部类的成员变量和成员方法，<strong>关键是看该局部内部类在哪个位置中定义的。</strong></p></li><li><p>e)<strong>在局部内部类中，想要操作外部的局部变量，则该局部变量必须采用final来修饰，从而保证数据的安全性。</strong></p><p><strong>在局部内部类中，如果操作了外部的局部变量，则该局部变量的生命周期就延长了，也就是该局部变量的生命周期和局部内部类对象的生命周期保持一致了。</strong></p></li><li><p><strong>补充：在JDK1.8之后，如果在局部内部类中使用了外部的局部变量，则该局部变量默认就会采用final来修饰，从而保证数据的安全性。</strong></p></li></ul></li></ol><h4 id="匿名内部类（重点）"><a href="#匿名内部类（重点）" class="headerlink" title="匿名内部类（重点）"></a>匿名内部类（重点）</h4><ol><li><p>匿名内部类的概述</p><ul><li><strong>匿名内部类本质就是一个“局部内部类”，也就是一个“没有名字”的局部内部类，也就是一个特殊的局部内部类。</strong></li></ul></li><li><p>匿名内部类的语法</p><pre class="line-numbers language-Java"><code class="language-Java">[修饰符] class 外部类 {       {            // 位置一：创建一个继承于某个父类的局部内部类对象，该局部内部类没有名字。            // 第一步：定义了一个继承于某个父类的局部内部类，并且该局部内部类没有名字。            // 第二步：创建该局部内部类对象，也就是常见了一个没有名字的局部内部类对象。            new 父类名() {               // 书写匿名内部类中的代码            };       }        [修饰符] 返回值类型 方法名(形参列表) {            // 位置二：创建一个实现于某个接口的局部内部类对象，该局部内部类没有名字。           // 第一步：定义一个实现于某个接口的局部内部类，并且该局部内部类没有名字           // 第二步：创建该局部内部类对象，也就是常见了一个没有名字的局部内部类对象            new 接口名() {                // 书写匿名内部类中的代码            };        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>匿名内部类的注意点</p><ul><li>a)匿名内部类就是一个特殊的局部内部类，因此局部内部类的要求对于匿名内部类依旧生效。</li><li>b)<strong>在匿名内部类中，我们不能定义构造方法，因为匿名内部类都没有类名，而构造方法名必须为类名。</strong></li><li>c)<strong>在匿名内部类中，我们不建议定义自己“特有”的成员变量和成员方法，因为这样不方便我们去操作。</strong></li><li><strong>注意：在匿名内部类中，我们一般用于重写父类或接口中的抽象方法。</strong></li></ul></li></ol><hr><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ol><li><p>包装类的引入</p><ul><li><strong>世界上没有任何一门语言是完全面向对象的，因为面向对象语言中都包含了“基本数据类型”，为了方便“基本数据类型”和“引用数据类型”之间的转换，因此就诞生了“包装类”。</strong></li></ul></li><li><p>包装类的概述？</p><ul><li><p>明确：每一种基本数据类型都对应一个包装类，因此Java语言中提供的包装类至少有8种。</p><pre class="line-numbers language-Java"><code class="language-Java">byte        Byteshort        Shortint          Integerlong        Longfloat        Floatdouble        Doublechar        Characterboolean    Boolean//注意：除了int类型和char类型之外，其余基本数据类型对应的包装类名都是“首字母大写”即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Number类的概述</p><ul><li><p>java.lang.Number属于一个抽象类，所有的“数值型包装类”都属于Number的实现类，也就意味着所有的数值型包装类都能使用Number抽象类所提供的方法，并且Number抽象类常见的方法如下：</p><pre class="line-numbers language-Java"><code class="language-Java">public byte byteValue() { ... }       --> 把数值型包装类对象转化为byte类型public short shortValue() { ... }     --> 把数值型包装类对象转化为short类型public abstract int intValue();       --> 把数值型包装类对象转化为int类型public abstract long longValue();     --> 把数值型包装类对象转化为long类型public abstract float floatValue();   --> 把数值型包装类对象转化为float类型public abstract double doubleValue(); --> 把数值型包装类对象转化为double类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>包装类的作用</p><ul><li><p>作为和基本数据类型对应的类型存在，方便涉及到对象的操作，如Object[]、集合等的操作。</p></li><li><p>包含每种基本数据类型的相关属性如最大值、最小值等，以及相关的操作方法(这些操作方法的作用是在基本数据类型、包装类对象、字符串之间提供相互之间的转化)。</p><pre class="line-numbers language-Java"><code class="language-Java">public class Test01 {    public static void main(String[] args) {        System.out.println("int类型表示的最大值：" + Integer.MAX_VALUE);        System.out.println("int类型表示的最小值：" + Integer.MIN_VALUE);        System.out.println("byte类型表示的最大值：" + Byte.MAX_VALUE);        System.out.println("byte类型表示的最小值：" + Byte.MIN_VALUE);        /*// 问题：数组的定义？？？数组就是一个存储“相同数据类型”的“有序”集合（容器）。        // 涉及到的技术：向上转型+自动装箱        Object[] arr = {123, 3.14, true, 'a', "abc", new Test01()};        System.out.println(Arrays.toString(arr));*/    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h4 id="基本数据类型和包装类之间的转换"><a href="#基本数据类型和包装类之间的转换" class="headerlink" title="基本数据类型和包装类之间的转换"></a>基本数据类型和包装类之间的转换</h4><ol><li><p><strong>包装类的底层</strong></p><ul><li><strong>所谓的包装类，则底层中定义了一个对应基本数据类型的“私有常量”来保存数据，包装类其实就是对基本数据类型的数据执行封装的操作。</strong></li><li>例如：在Integer包装类中，其底层定义了一个int类型的“私有常量”来保存数据，也就是Integer包装类就是对int类型数据执行的封装操作。</li></ul></li><li><p><strong>基本数据类型转化为包装类</strong></p><ul><li><p>方式一：通过构造方法来实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：把基本数据类型转化为包装类对象。</span><span class="token keyword">public</span> <span class="token function">Integer</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> NumberFormatException <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//作用：把字符串的内容转化为包装类对象。</span>          <span class="token comment" spellcheck="true">//注意：当字符串存储的内容和对应的基本数据类型的数据格式不匹配的时候，则就会抛出“数值格式化异常”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：通过valueOf()静态方法来实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//作用：把基本数据类型转化为包装类对象。</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> NumberFormatException <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//作用：把字符串的内容转化为包装类对象。</span>          <span class="token comment" spellcheck="true">//注意：当字符串存储的内容和对应的基本数据类型的数据格式不匹配的时候，则就会抛出“数值格式化异常”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意事项</strong></p><ol><li><p><strong>针对Character类型，字符串不能转化为Character类型的包装类对象，因为Character类没有提供字符串参数的构造方法和字符串参数的valueOf()方法。</strong></p></li><li><p>针对Boolean类型，只有字符串为“true”（不区分大小写）的时候，转化为包装对象的值才为true，否则一律都为false。</p></li><li><p><strong>数值型的包装类中（不包含Character和Boolean），形参字符串的内容为必须为数值型，否则抛出NumberFormatException异常。</strong></p></li></ol></li></ul></li><li><p><strong>包装类转化为基本数据类型？</strong></p><ul><li><p><strong>情况一：数值型包装类</strong></p><p>–&gt; 数值型包装类都是Number抽象类的实现类，因此数值型包装类使用Number抽象类提供的方法，我们就可以实现把“数值型包装类对象”转化为“数值型”。</p></li><li><p><strong>情况二：非数值型包装类</strong></p><p>–&gt; 针对Character类型，我们可以使用Character类中提供的charValue()方法，从而将“Character对象”转化为对应的“char类型”。</p><p>–&gt; 针对Boolean类型，我们可以使用Boolean类中提供的booleanValue()方法，从而将“Boolean对象”转化为对应的“boolean类型”。</p></li></ul></li></ol><h4 id="自动装箱和自动拆箱（超级重点）"><a href="#自动装箱和自动拆箱（超级重点）" class="headerlink" title="自动装箱和自动拆箱（超级重点）"></a>自动装箱和自动拆箱（超级重点）</h4><ol><li><p><strong>自动装箱和自动拆箱的概述</strong></p><ul><li>在JDK1.5之前，想要实现“基本数据类型”和“包装类”之间的转换，则必须通过调用包装类的方法来手动完成，此操作比较麻烦。</li><li>在JDK1.5之后，想要实现“基本数据类型”和“包装类”之间的转换，则我们可以通过自动装箱和自动拆箱来完成，此操作非常简单。</li></ul></li><li><p><strong>自动装箱机制的概述？</strong></p><ul><li>解释：当基本数据类型处于需要对象的环境中，则就会触发自动装箱机制，也就是自动会把基本数据类型转化为对应的包装类对象。</li><li>底层：当触发自动装箱机制的时候，则默认就会调用包装类的valueOf(xxx x)静态方法，从而将基本数据类型转化为包装类对象。</li></ul></li><li><p><strong>自动拆箱机制的概述？</strong></p><ul><li>解释：当包装类对象处于需要基本数据类型的环境中，则就会触发自动拆箱机制，也就是自动会把包装类对象转化为对应的基本数据类型。</li><li>底层：当触发自动拆箱机制的时候，则默认就会调用包装类的xxxValue()成员方法，从而将包装类对象转化为对应的基本数据类型。</li><li>例如：int num &#x3D; new Integer(123); –底层–&gt; int num &#x3D; new Integer(123).intValue();</li></ul></li><li><p><strong>自动装箱的缓存问题？</strong></p><ul><li>解释：当“整数型”的数据取值范围在[-128, 127]之间的时候，如果触发了自动装箱机制，则就会从“缓存池”中取出一个包装类对象并返回，也就是不会创建新的包装类对象并返回。</li><li>当“整数型”的数据取值范围在[-128, 127]之外的时候，如果触发了自动装箱机制，则就会直接创建一个新的包装类对象并返回，也就是不会从缓存池中取出包装类对象来返回。</li></ul></li><li><p><strong>自动拆箱的空指针问题？</strong></p><ul><li><p>解释：<strong>当触发自动拆箱机制的时候，则默认就会调用包装类的xxxValue()成员方法，如果该包装对象为null，那么触发自动拆箱机制就会抛出空指针异常。</strong></p><p>–&gt; <strong>例如：Integer integer &#x3D; null; int num &#x3D; integer; &#x2F;&#x2F; 等效于： int num &#x3D; integer.intValue();</strong></p></li></ul></li></ol><h4 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h4><ol><li><p><strong>字符串转化为基本数据类型（重要）</strong></p><ul><li><p>明确：<strong>使用包装类提供的parseXxx(String str)的静态方法来实现。</strong></p><pre class="line-numbers language-java"><code class="language-java">Byte    <span class="token keyword">static</span> <span class="token keyword">byte</span> <span class="token function">parseByte</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//将字符串参数解析为带符号的十进制byte 。</span>Short    <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">parseShort</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//将字符串参数解析为带符号的十进制short 。</span>Integer<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//将字符串参数解析为带符号的十进制int。</span>Long    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">parseLong</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//将字符串参数解析为带符号的十进制long。</span>Float    <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回一个新 float值，该值被初始化为用指定字符串表示的值。</span>Double    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">parseDouble</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//返回一个新 double值，该值被初始化为用指定字符串表示的值。</span>Boolean<span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">parseBoolean</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将字符串参数解析为boolean值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项：</p><ul><li>1.<strong>不能把字符串转化为char类型，因为Character包装类中没有提供parseChar(String value)方法。</strong></li><li>2.针对Boolean类型，只有字符串为“true”的时候（不区分大小写），转化为基本类型的值才为true，否则都为false。</li><li>3.<strong>整数型包装类，字符串中的内容必须是十进制整数；浮点型包装类中，字符串中的内容必须为十进制整数或浮点数，否则抛出NumberFormatException异常。</strong></li></ul></li></ul></li><li><p>基本数据类型转化为字符串（了解）</p><ul><li><p>明确：<strong>把基本数据类型转换为字符串，我们可以使用“+”连接符来实现，也可以使用包装类提供的方法来实现。</strong></p><pre class="line-numbers language-java"><code class="language-java">所有包装类String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                返回对象的字符串表示形式。Byte    <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">)</span>    把<span class="token keyword">byte</span>类型转化为字符串返回。Short    <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">short</span> s<span class="token punctuation">)</span>    把<span class="token keyword">short</span>类型转化为字符串返回。Integer<span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    把<span class="token keyword">int</span>类型转化为字符串返回。Long    <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">)</span>    把<span class="token keyword">long</span>类型转化为字符串返回。Float    <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span>    把<span class="token keyword">float</span>类型转化为字符串返回。Double    <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span>把<span class="token keyword">double</span>类型转化为字符串返回。Boolean<span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span>把<span class="token keyword">boolean</span>类型转化为字符串返回。Character<span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span>    把<span class="token keyword">char</span>类型转化为字符串返回。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="String类讲解"><a href="#String类讲解" class="headerlink" title="String类讲解"></a>String类讲解</h2><h4 id="字符串常量池的概述"><a href="#字符串常量池的概述" class="headerlink" title="字符串常量池的概述"></a>字符串常量池的概述</h4><ul><li><strong>加载类的时候</strong>，如果该类中有双引号创建的字符串，则就<strong>把该字符串在常量池中开辟存储空间并存储，并且常量池中存储的字符串都是唯一的。</strong></li><li><strong>执行程序的时候</strong>，如果遇到了双引号创建的字符串，则<strong>直接去常量池中取出该字符串并使用即可，也就是不会再次去创建一个新的字符串。</strong></li></ul><h4 id="String类的概述"><a href="#String类的概述" class="headerlink" title="String类的概述"></a>String类的概述</h4><ul><li>在字符串中，存储的是任意多个字符，这些字符以char类型的数组来存储的。<strong>在String类中，char类型的数组默认采用了final来修饰</strong>，也就意味着<strong>char类型的数组不能扩容</strong>，也就是<strong>字符串中存储的字符内容不可改变，因此我们称String为“不可变的Unicode编码序列”，简称“不可变字符串”。</strong>并且，<strong>String类还采用了final修饰，则意味着String类不能被继承。</strong></li></ul><h4 id="String类的部分常用方法"><a href="#String类的部分常用方法" class="headerlink" title="String类的部分常用方法"></a>String类的部分常用方法</h4><ul><li><p>length()方法</p><pre class="line-numbers language-Java"><code class="language-Java"> public int length() { ... }//作用：获得字符串的长度，也就是获得底层char类型数组的空间长度。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>charAt()方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：根据索引获得字符串中的字符。</span><span class="token comment" spellcheck="true">//注意：index取值范围在[0, 字符串长度-1]之间，超出范围则就会抛出StringIndexOutOfBoundsException异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>indexOf()方法</p><ul><li>明确：“从前往后”查找某个“字符”或“子串”在“主串”中的索引位置，如果查找的“字符”或“字串”不存在，则返回-1</li></ul><pre class="line-numbers language-Java"><code class="language-Java">int indexOf(int ch)                //返回指定字符第一次出现在字符串内的索引。int indexOf(int ch, int fromIndex)    //返回指定字符第一次出现在字符串内的索引，以指定的索引开始搜索。int indexOf(String str)            //返回指定子字符串第一次出现在字符串内的索引。int indexOf(String str, int fromIndex)//返回指定子串的第一次出现在字符串中的索引，从指定的索引开始搜索。//注意：此处indexOf()方法的底层使用“字符串匹配算法”来实现，常见的字符串匹配算法有：BF算法和KMP算法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>lastIndexOf()方法</p><ul><li>明确：“从后往前”查找某个“字符”或“子串”在“主串”中的索引位置，如果查找的“字符”或“字串”不存在，则返回-1</li></ul><pre class="line-numbers language-Java"><code class="language-Java">int lastIndexOf(int ch)                //返回指定字符最后一次出现在字符串内的索引。int lastIndexOf(int ch, int fromIndex)    //返回指定字符最后一次出现在字符串内的索引，以指定的索引开始搜索。int lastIndexOf(String str)            //返回指定子字符串最后一次出现在字符串内的索引。int lastIndexOf(String str, int fromIndex)//返回指定子串的最后一次出现在字符串中的索引，从指定的索引开始搜索。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>startsWith()方法</p><pre class="line-numbers language-Java"><code class="language-Java">public boolean startsWith(String prefix) { ... }// 作用：判断某个字符串是否以prefix开头。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>endsWith()方法</p><pre class="line-numbers language-Java"><code class="language-Java">public boolean endsWith(String suffix) { ... }//作用：判断某个字符串是否以suffix结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>contains()方法</p><pre class="line-numbers language-Java"><code class="language-Java">public boolean contains(CharSequence s) { ... }//作用：判断字符串中是否包含某个子串（开头、中间和结尾）//注意：此处CharSequence是一个接口，该接口的实现类有String、StringBuffer和StringBuilder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>字符串大小写转换</p><ul><li>明确：字符串大小写转换，针对“英文字母”有效，针对“中文汉字”无效。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">String toUpperCase()//返回一个新的字符串，该字符串中所有英文字符转换为大写字母。String toLowerCase()//返回一个新的字符串，该字符串中所有英文字符转换为小写字母。//注意：执行注册或登录操作的时候，就需要使用字符型大小写转换来校对验证码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>忽略字符串前后空格</p><pre class="line-numbers language-Java"><code class="language-Java">public String trim()  //忽略字符串前后端的空格，中间的空格不用忽略<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符串的截取操作</p><pre class="line-numbers language-Java"><code class="language-Java">String substring(int beginIndex)            //从beginIndex开始截取字符串，到字符串末尾结束。// 注意：此处beginIndex的取值范围在[0, 字符串长度-1]之间。    String substring(int beginIndex, int endIndex)//从beginIndex开始截取字符串，到字符索引endIndex-1结束。    //注意：beginIndex的取值范围在[0, 字符串长度-1]之间，endIndex的取值范围在[0, 字符串长度]之间，并且endIndex必须大于beginIndex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串的替换操作</p><pre class="line-numbers language-Java"><code class="language-Java">// 通过用newChar字符替换字符串中出现的所有oldChar字符，并返回替换后的新字符串。String replace(char oldChar, char newChar)    //将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列。String replace(CharSequence target, CharSequence replacement)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串拼接的操作</p><ul><li>明确：我们可以使用“+”连接符来实现字符串的评价操作，也可以使用String类提供的“String concat(String str)”方法来实现。</li></ul><pre class="line-numbers language-Java"><code class="language-Java">public class Test02 {    public static void main(String[] args) {        // 需求：完成字符串的拼接操作        String str1 = "hello" + "world";        System.out.println(str1); // 输出：helloworld        String str2 = "hello".concat("world");        System.out.println(str2); // 输出：helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>isEmpty方法</p><pre class="line-numbers language-Java"><code class="language-Java">//作用：判断字符串是否为空，也就是判断底层的char类型数组空间长度是否为0 public boolean isEmpty() { ... }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>equals方法</p><pre class="line-numbers language-Java"><code class="language-Java">boolean equals(Object anObject)    //判断字符串内容是否相同，区分字母大小写。boolean equalsIgnoreCase(String str)//判断字符串内容是否相同，忽略字母大小写。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>valueOf方法</p><pre class="line-numbers language-Java"><code class="language-Java">String类提供了valueOf(xxx x)    //这个静态方法，该方法用于将其他的数据类型转化为字符串。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="StringBuffer类的概述"><a href="#StringBuffer类的概述" class="headerlink" title="StringBuffer类的概述"></a>StringBuffer类的概述</h4><ul><li>StringBuffer类继承于AbstractStringBuilder抽象类，StringBuffer类底层维护者一个char类型的数组，并且该char类型的数组没有使用final修饰，也就意味着该char类型的数组可以自动扩容，也就是该char类型数组存储的元素可以改变，因此我们就称StringBuffer类为“可变的Unicode编码序列”，简称“可变字符串”。并且，StringBuffer类采用了final修饰，也就意味着StringBuffer不能被继承。</li></ul><h4 id="String类和StringBuffer类特点"><a href="#String类和StringBuffer类特点" class="headerlink" title="String类和StringBuffer类特点"></a>String类和StringBuffer类特点</h4><ol><li><p>相同点：</p><ul><li>a)底层都维护者一个char类型的数组，也就是存储的都是字符，因此都属于“字符串”。</li><li>b)这个两个类都采用了final修饰，也就意味着String和StringBuffer都不能被继承。</li></ul></li><li><p>不同点：</p><ul><li><p>String类底层的char类型数组使用了final修饰，因此String类存储的字符内容不可改变，我们就称之为“不可变字符串”。</p><p>–&gt; 通过String类提供的方法来操作字符串中的内容时，都不是直接基于char类型数组做的操作，那么都会返回一个新的字符串。</p></li><li><p>StringBuffer类底层的char类型数组没有使用final修饰，因此StringBuffer类存储的字符内容可以改变，我们就称之为“可变字符串”。</p><p>–&gt; 通过StringBuffer类提供方法来操作字符串中的内容，都是直接基于char类型数组做的操作，因此就可以无需返回新的字符串。</p></li></ul></li></ol><h4 id="StringBuffer类的构造方法"><a href="#StringBuffer类的构造方法" class="headerlink" title="StringBuffer类的构造方法"></a>StringBuffer类的构造方法</h4><pre class="line-numbers language-Java"><code class="language-Java">StringBuffer()                //构造一个没有字符的字符串缓冲区，初始容量为16个字符（有用）。StringBuffer(CharSequence seq)//构造一个包含与指定的相同字符的字符串缓冲区CharSequence 。StringBuffer(int capacity)    //构造一个没有字符的字符串缓冲区和指定的初始容量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="StringBuffer类的方法"><a href="#StringBuffer类的方法" class="headerlink" title="StringBuffer类的方法"></a>StringBuffer类的方法</h4><ul><li><p>明确：如果StringBuffer类提供方法的返回值类型为StringBuffer或AbstractStringBuilder，则该返回值就是“当前方法的调用者对象”。</p><ol><li><p>添加方法</p><pre class="line-numbers language-Java"><code class="language-Java">//作用：在可变字符串末尾添加内容。public AbstractStringBuilder append(Type type) { ... }// 作用：在可变字符串索引为offset位置插入字符串内容。 public AbstractStringBuilder insert(int offset, Type type) { ... }  //注意：此处offset的取值范围在[0, 可变字符串长度]之间，超出范围则就会抛出“字符串索引越界异常”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>替换的方法</p><pre class="line-numbers language-Java"><code class="language-Java">//作用：把可变字符串索引为index的字符替换为ch即可。 public synchronized void setCharAt(int index, char ch) { ... } //  注意：此处index的取值范围在[0, 可变字符串长度 - 1]之间，超出范围则就会抛出“字符串索引越界异常”。 //作用：把可变字符串索引为[start, end)之间的元素替换为str即可。 public synchronized StringBuffer replace(int start, int end, String str) { ... } //注意：此处start的取值范围[0, 可变字符串长度 - 1]之间，end的取值范围在[0, 可变字符串长度]之间，并且end必须大于start。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除的方法</p><pre class="line-numbers language-Java"><code class="language-Java">//作用：删除可变字符串中索引为index的字符。public synchronized StringBuffer deleteCharAt(int index) { ... }// 注意：此处index的取值范围在[0, 可变字符串长度 - 1]之间，超出范围则就会抛出“字符串索引越界异常”。//作用：删除索引为[start, end)范围之间的元素。 public synchronized StringBuffer delete(int start, int end) {  ... } //注意：此处start的取值范围[0, 可变字符串长度 - 1]之间，end的取值范围在[0, 可变字符串长度]之间，并且end必须大于start。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找的方法</p><pre class="line-numbers language-Java"><code class="language-Java">charAt(int index)                    //返回 char在指定索引在这个序列值。indexOf(String str)                //返回指定子字符串第一次出现的字符串内的索引。indexOf(String str, int fromIndex)    //返回指定子串的第一次出现的字符串中的索引，从指定的索引开始。lastIndexOf(String str)            //返回指定子字符串最右边出现的字符串内的索引。lastIndexOf(String str, int fromIndex)//返回指定子字符串最后一次出现的字符串中的索引，从指定的索引开始。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反转的方法</p><pre class="line-numbers language-Java"><code class="language-Java">public synchronized StringBuffer reverse() 把可变字符串中的内容进行反转操作<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>操作字符串长度的方法</p><pre class="line-numbers language-Java"><code class="language-Java">// 作用：获得可变字符串的长度 public synchronized int length() { ... }// 作用：修改可变字符串的长度。public synchronized void setLength(int newLength) { ... }//注意：如果“设置的长度”大于“可变字符串的长度”，则默认做“扩容操作”。//如果“设置的长度”小于“可变字符串的长度”，则默认做“剪切操作”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串截取的方法</p><pre class="line-numbers language-Java"><code class="language-Java">substring(int start)        //返回一个新的 String ，其中包含此字符序列中当前包含的字符的子序列。substring(int start, int end)//返回一个新的 String ，其中包含此序列中当前包含的字符的子序列。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>转化为String类的方法</p><pre class="line-numbers language-Java"><code class="language-Java">// 作用：把StringBuffer对象转化为String类型。public synchronized String toString() { ... }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ul><h4 id="StringBuilder类的概述"><a href="#StringBuilder类的概述" class="headerlink" title="StringBuilder类的概述"></a>StringBuilder类的概述</h4><ul><li>StringBuilder类继承于AbstractStringBuilder抽象类，StringBuilder类底层维护者一个char类型的数组，并且该char类型的数组没有使用final修饰，也就意味着该char类型的数组可以自动扩容，也就是StringBuilder类存储的字符内容可以改变，因此我们就称呼StringBuilder类为“可变的Unicode编码序列”，简称“可变字符串”。并且，StringBuilder类采用final修饰，也就意味着StringBuilder不能被继承。</li></ul><h4 id="StringBuffer类和StringBuilder类的特点"><a href="#StringBuffer类和StringBuilder类的特点" class="headerlink" title="StringBuffer类和StringBuilder类的特点"></a>StringBuffer类和StringBuilder类的特点</h4><ol><li>相同点<ul><li>a)底层都包含char类型的数组，并且该char类型的数组都没使用final修饰，因此都称之为“可变字符串”。</li><li>b)这两个类都采用了final关键字来修饰，也就意味着StringBuffer类和StringBuilder类都不能被继承。</li><li>c)都继承于AbstractStringBuilder抽象类，并且这两个类拥有的方法都相同，因此使用方法属于类似的。</li></ul></li><li>不同点<ul><li>StringBuffer：线程安全的，会做线程同步检查，因此效率较低（不常用）。</li><li>StringBuilder：线程不安全的，不会做线程同步检查，因此效率较高（常用）。</li></ul></li></ol><h4 id="使用“-”连接符完成字符串拼接操作的底层分析（重点）"><a href="#使用“-”连接符完成字符串拼接操作的底层分析（重点）" class="headerlink" title="使用“+”连接符完成字符串拼接操作的底层分析（重点）"></a>使用“+”连接符完成字符串拼接操作的底层分析（重点）</h4><ol><li>情况一：两个字符串都是常量时，使用“+”来完成拼接操作<ul><li>底层：因为常量保存的内容不可改变，也就是编译时期就能确定常量的值，因此为了提高字符串的拼接效率，所以就在编译时期就完成了拼接操作。</li></ul></li><li>情况二：其中一个为字符串变量时，使用“+”来完成拼接操作<ul><li>底层：因为编译时期无法确定变量的值，因此其中一个为字符串变量的拼接操作，那么肯定不是在编译时期完成，而是在运行时期来完成的，并且实现步骤如下。</li></ul></li></ol><h4 id="三种字符串的拼接效率（重点）"><a href="#三种字符串的拼接效率（重点）" class="headerlink" title="三种字符串的拼接效率（重点）"></a>三种字符串的拼接效率（重点）</h4><ol><li><p>System.currentTimeMillis()方法的概述？</p><ul><li>作用：获得“当前时间”距离1970年1月1日凌晨的毫秒数。</li><li>–&gt; 公式：1秒 &#x3D; 1000毫秒</li><li>使用：计算完成某个功能所需要的耗时，则就可以使用该方法来实现。</li><li>–&gt; 耗时：结束时间 - 开始时间</li></ul></li><li><p>三种字符串的拼接效率？</p><ul><li><p><strong>StringBuilder的拼接效率最高，StringBuffer的拼接效率次之，String的拼接效率最低。</strong></p></li><li><p>注意：<strong>如果需要大量执行字符串的拼接操作，则建议使用StringBuilder类来完成拼接操作。</strong></p></li></ul></li></ol><h4 id="链式调用语法（了解）"><a href="#链式调用语法（了解）" class="headerlink" title="链式调用语法（了解）"></a>链式调用语法（了解）</h4><p>理解：每个成员方法体中都返回this，也就是每个成员方法体中都返回该方法的调用者对象。</p><ol><li>问题：在目前已经学习的类中，哪些类支持链式调用语法呢？？？<ul><li>答案：StringBuilder和StringBuffer</li></ul></li></ol><hr><h2 id="properties类"><a href="#properties类" class="headerlink" title="properties类"></a>properties类</h2><h4 id="properties的概述"><a href="#properties的概述" class="headerlink" title="properties的概述"></a>properties的概述</h4><ul><li>Properties类是属于集合，叫做属性集</li><li>Properties类是Hashtable的子类，所以存储的数据也是kv格式</li><li>Properties类中的key和value只能是String类型</li><li>Properties 类是一个持久的属性集，Properties可保存在流中或从流中加载。</li></ul><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><ol><li><p>操作属性：</p><pre class="line-numbers language-Java"><code class="language-Java">String getProperty(String key)      用指定的键在此属性列表中搜索属性。 String getProperty(String key, String defaultValue)      用指定的键在属性列表中搜索属性。 Object setProperty(String key, String value)      调用 Hashtable 的方法 put。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>持久化方法，将数据保存到文件中</p><pre class="line-numbers language-Java"><code class="language-Java">void store(OutputStream out, String comments)      以适合使用 load(InputStream) 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流。 void store(Writer writer, String comments)      以适合使用 load(Reader) 方法的格式，将此 Properties 表中的属性列表（键和元素对）写入输出字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>读取持久化的数据</p><pre class="line-numbers language-Java"><code class="language-Java">void load(InputStream inStream)    从输入流中读取属性列表（键和元素对）。  void load(Reader reader)    按简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>练习</p><pre class="line-numbers language-Java"><code class="language-Java">public class Demo01 {    public static void main(String[] args) throws IOException {        // 创建属性集对象        Properties prop = new Properties();        // 设置属性        prop.setProperty("name","张三");        prop.setProperty("age","20");        prop.setProperty("sex","男");        /*        * 将属性集持久化:(Writer writer, String comments)        *  第二个参数是 文件的注释信息        *  properties文件的注释格式是：  # 注释文字        *        *  属性集有字节的文件格式，扩展名是 .properties        * 数据格式是  key=value        *        */        prop.store(new FileWriter("day23/user.properties"),"用户的信息");        // 读取properties文件的数据        Properties prop01 = new Properties();        // 将文件数据加到到Properties属性集中        prop01.load(new FileReader("day23/user.properties"));        // 获取属性,如果属性不存在就返回null//        String name = prop01.getProperty("name");        /*        * getProperty(String key, String defaultValue)        *  如果属性存在就返回对应的值；如果属性不存在就返回默认值defaultValue        */        String name = prop01.getProperty("name1","不存在");        System.out.println(name);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h2 id="日期时间类"><a href="#日期时间类" class="headerlink" title="日期时间类"></a>日期时间类</h2><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li><p>java.util.Date() 我们称为时间类，程序中我们通过new对象保存时间（单位为毫秒）</p><ul><li><p>Date()类的构造方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：获得保存“当前时间”的Date对象。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>…<span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：获得保存“指定时间”的Date 对象（表示的就是“指定时间”距离1970年1月1日凌晨的毫秒数）</li></ul></li></ul></li><li><p>Date()类的成员方法：</p><ul><li>Long getTime();返回当前时间距离1970年1月1日凌晨的毫秒数。（获得时间）</li><li>void setTime(long time);使用给指定的毫秒时间值设置现有的Date对象。（修改时间）</li></ul></li><li><p>SimpleDateFormat 类的引入</p><ul><li>Java.text.SimpleDateFormat类属于DateFormat抽象类的实现类，开发中用来实现“Date对象”保存时间和“字符串”保存时间之间的相互转换。</li></ul></li><li><p>测试代码</p></li></ul><pre class="line-numbers language-Java"><code class="language-Java">public class Test01 {    public static void main(String[] args) throws IOException {        //获取当前时间        Date date = new Date();        System.out.println(date);        SimpleDateFormat sf = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒");        System.out.println(sf.format(date));        //将date对象保存的时间转换为calendar对象保存的时间        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        System.out.println(calendar);        //将calendar对象保存的时间转换为date对象保存的时间        Date date1 = calendar.getTime();        String s = sf.format(date1);        System.out.println(s);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间日期转换格式"><a href="#时间日期转换格式" class="headerlink" title="时间日期转换格式"></a>时间日期转换格式</h4><ul><li><p>当出现y时，会将y替换成年。</p></li><li><p>当出现M时，会将M替换成月。</p></li><li><p>当出现d 时，会将d替换成日。</p></li><li><p>当出现h时，会将h替换成时(12小时制)。</p></li><li><p>当出现H时，会将H替换成时(24小时制)。</p></li><li><p>当出现m时，会将m替换成分。</p></li><li><p>当出现s 时，会将s替换成秒。</p></li><li><p>当出现s 时，会将s替换成毫秒。</p></li><li><p>当出现D时，获得当前时间是今年的第几天。</p></li><li><p>当出现w时，获得当前时间是今年的第几周。</p></li><li><p>当出现w时，获得当前时间是本月的第几周。</p></li></ul><h4 id="时间类的构造方法"><a href="#时间类的构造方法" class="headerlink" title="时间类的构造方法"></a>时间类的构造方法</h4><ul><li><p>SimpleDateFormat类的构造方法：</p><pre class="line-numbers language-Java"><code class="language-Java">public SimpleDateFormat（String pattern）{…}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：实例化SimpleDateFormat对象，并且还能设置指定的格式规则</li></ul></li><li><p>Public SimpleDateFormat类的成员方法：（重点方法）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">format</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：把Date对象保存的时间转换为字符串保存时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException<span class="token punctuation">{</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：把字符串保存的时间转换为Date对象保存的时间</li></ul></li></ul><h4 id="时间日期的其他常用类"><a href="#时间日期的其他常用类" class="headerlink" title="时间日期的其他常用类"></a>时间日期的其他常用类</h4><ul><li><p>Calendar类（日历类）</p><ul><li>Java,util.Calendar类，通过Calendar可以表示年、月、日、是、分、秒的一个具体时间，而且还提供了日期相关的计算功能。</li></ul></li><li><p>Calendar类的实例化？？？</p><ul><li>Calendar类是一个抽象类，无法实例化，而是调用Calendar类的“Calendar getInstance()”静态方法来获得一个保存“当前时间”的</li></ul></li><li><p>Calendar对象。</p><ul><li>Calendaer 类中提供的字段，默认全部是int类型的“全局静态常量”。</li><li>calendar. YEAR获取年份</li><li>calendar . MONTH获取月份，o表示1月，1表示2月，…，11表示12月</li><li>calendar . DAY_OF_MONTH获取本月的第几天</li><li>calendar . DAY_OF_YEAR获取本年的第几天</li><li>calendar . HOUR_OF_DAY 小时，24小时制calendar. HOUR小时，12小时制</li><li>calendar.MINUTE 获取分钟</li><li>calendar.sECOND获取秒</li><li>calendar.MILLISECOND获取毫秒</li><li>calendar .DAY_OF_WEEK 获取星期几，1表示星期日，2表示星期一，…，7表示星期六</li></ul></li></ul><h4 id="时间日期的计算及转换"><a href="#时间日期的计算及转换" class="headerlink" title="时间日期的计算及转换"></a>时间日期的计算及转换</h4><ul><li><p>计算的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据字段来“增加”或“减少”数据（在“年或月..”增加或者减少多少）。</span>Public <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>转换方法：</p></li><li><p>明确：开放中，经常设计到Date对象保存时间和Calendar对象保存时间之间的相互转换。</p><pre class="line-numbers language-java"><code class="language-java">Public <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：把Date对象保存时间转换为calendar对象保存的时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><hr><h2 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h2><ul><li><p>枚举语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">enum</span> 枚举名｛          枚举值<span class="token number">1</span>，枚举值<span class="token number">2</span>，枚举值<span class="token number">3</span>，…<span class="token punctuation">.</span><span class="token punctuation">.</span>      ｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>使用语法：枚举名.枚举值</p></li><li><p>注意：在switch选择结构中，我们使用“枚举值”的时候必须省略“枚举名”。</p></li></ul></li><li><p>枚举的底层？<br>在Java中枚举本质上就是一个被final修饰的类，并且继承了Java.long.Enum抽象类<br>类型的枚举中的所有枚举值，默认都是类型的全局静态常量。</p></li><li><p>对枚举进行反编译，发现枚举中还提供了values（）的全局静态方法，调用该方法就能返回枚举中的所有枚举值（用数组来存储）。</p></li></ul><hr><h2 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h2><h4 id="System的常用方法"><a href="#System的常用方法" class="headerlink" title="System的常用方法"></a>System的常用方法</h4><pre class="line-numbers language-java"><code class="language-java">    数组拷贝：<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>object src<span class="token punctuation">,</span><span class="token keyword">int</span> srcPos<span class="token punctuation">,</span>object dest<span class="token punctuation">,</span><span class="token keyword">int</span> destPos<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span>        输出当前时间的毫秒数：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        终止当前程序，退出Java虚拟机：<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>当s等于<span class="token number">0</span>时退出<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>         返回指定索引处的 <span class="token keyword">char</span> 值    <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>        将指定字符串连接到此字符串的结尾    <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span>        判断是否包含次字符串：    <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>        返回数组中表示次字符的字符串    <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>        返回数组中指定下标的字符串    <span class="token function">endsWith</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span>        判断字符串是否以 指定字符串结尾    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Math类的常用方法"><a href="#Math类的常用方法" class="headerlink" title="Math类的常用方法"></a>Math类的常用方法</h4><pre class="line-numbers language-Java"><code class="language-Java">    Math.PI;        取圆周率：    Math.abs(基本数据类型 a);        取绝对值：    Math.cbrt(double a);        立方根：    Math.ceil(double a);        向上取整：    Math.floor(double a);        向下取整：     Math.max(int a,int b);        取两个数中的最大值：    Math.min(int a,int b);        取两个数中的最小值    Math.random();        [0，1)之间的随机数    Math.round(double a);        四舍五入：    Math.round(float a);        四舍五入：    （long）Math.fioor(数值+0.5)        注意：四舍五入的计算规则：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UUID类"><a href="#UUID类" class="headerlink" title="UUID类"></a>UUID类</h4><ul><li>表示通用的唯一标识符（UUID）类。表示一个128位的值</li></ul><hr><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>就是方法体中直接或间接的调用方法自身</li><li>使用递归：<br>1.必须创建方法。<br>2.必须有结束条件，（不然就会形成死递归，导致栈溢出）。<br>3.构造函数不能使用递归。</li><li>递归的思想：<br>将一个大的问题拆分成几个小问题，所有小问题解决了，大问题就解决了。</li><li>注意：循环能够解决的问题递归一定能够解决，反之则不一定。<br>如果循环嵌套层次过多，则可以使用递归，但是递归效率比循环效率更低。</li></ul><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h4 id="集合Collection接口的继承结构图"><a href="#集合Collection接口的继承结构图" class="headerlink" title="集合Collection接口的继承结构图"></a>集合Collection接口的继承结构图</h4><p><img src="/images/Javase/list.png" alt="list.png"></p><h4 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h4><ul><li><p>实现的接口：</p><ul><li>collection接口，List接口，Deque接口（双端队列）</li></ul></li><li><p>链表之单向链表</p><ul><li><p>一个节点由数据位和地址位组成，数据位就是存储元素，地址位就是下一个节点的地址。</p><p><img src="/images/Javase/linkde1.png" alt="linked1"></p></li></ul></li><li><p>链表之双向链表</p><ul><li><p>一个节点由两个地址位和一个数据位，数据位存储元素，地址位一个地址位指向前一个节点的地址，一个指向下一个节点的地址。</p><p><img src="/images/Javase/linkde2.png" alt="linkde2"></p></li></ul></li><li><p>链表的特点：</p><ul><li>链表是由节点链接而成的</li><li>链表在内存中不是一段连续的内存空间，添加一个节点就在内存中新开一个空间存储节点</li><li>链表的增删效率高，查改的效率低。</li><li>非线程安全，安全性低，效率高。</li></ul></li></ul><h4 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h4><ul><li>向量类<br> 1. List的实现类<br> 2. 底层数据结构：动态数组<br> 3. 增删效率低，查改效率高<br> 4. 线程安全的，安全性高，效率低（几乎不用）</li></ul><h4 id="泛型（genericity）"><a href="#泛型（genericity）" class="headerlink" title="泛型（genericity）"></a>泛型（genericity）</h4><ul><li><p>泛型：又叫参数化类型，就是应用数据类型作为参数了。（泛型也有形参和实参）</p><ul><li>泛型的形参：仅仅表示这是一个泛型，没有具体的数据类型。（可以用 E T…）</li><li>泛型的实参：在创建对象时定义实参，约束集合的数据类型。</li></ul></li><li><p>注意：只有引用数据类型才能作为泛型。</p></li><li><p>泛型的作用：约束集合中的元素的数据类型，将元素类型的检测从运行时提升到编译时。</p></li><li><p>泛型的方法：（该方法没什么实际运用，了解语法即可）</p><ul><li>泛型方法的定义上一定有&lt;泛型的形参&gt;的方法才是泛型方法</li></ul></li><li><p>泛型方法的语法格式：</p><pre class="line-numbers language-Java"><code class="language-Java">修饰符 <泛型> 返回值类型  方法名（参数列表）｛｝<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p></li><li><p>泛型通配符：？（没什么鸟用，了解即可）</p><ul><li><?>这里的？就是泛型通配符。</li><li>泛型通配符？：表示所有泛型实参，就是可以表示泛型所有的具体类型</li><li><E>：这里的E表示的是泛型所有的形参。</li></ul></li><li><p>泛型通配符主要配合泛型的限定来使用</p></li><li><p>泛型的限定：</p><ul><li>上限：&lt;? extends T&gt; 表示？只能是T类及其子类</li><li>下限：&lt;? super T&gt;表示？只能是T类及其父类</li><li>注意：T 表示一个类（自定义类也行）</li></ul></li><li><p>泛型擦除：</p><ul><li>源代码中使用的泛型，在经过编译后，代码中就看不大泛型，就是泛型擦除。</li><li>（泛型擦除不是泛型丢失了，而是在编译后的字节码文件中使用单独的标识来存储泛型了）</li></ul></li></ul><h4 id="set接口"><a href="#set接口" class="headerlink" title="set接口"></a>set接口</h4><ul><li>是collection接口的子接口。</li><li>特点：元素不能重复，元素重复是否有序和实现类有关。</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HsahSet是set接口的实现类。<ol><li>元素不能重复</li><li>元素无序，特别是它不保证该顺序恒久不变。</li><li>底层的数据结构是HashMap&lt;k,v&gt;,HashMap的底层结构是哈希表</li></ol></li><li>哈希表：也叫散列表，是根据关键码值（key）而直接进行访问的数据结构</li><li>哈希表是一个数组。</li><li>哈希表中的数据会产生哈希冲突（碰撞）<ul><li>哈希冲突：不同的key，hashCode值一样，哈希表中的索引就一样，这就是哈西冲突。</li></ul></li></ul><h4 id="LinedHashSet类"><a href="#LinedHashSet类" class="headerlink" title="LinedHashSet类"></a>LinedHashSet类</h4><ul><li>是HashSet的子类<ul><li>底层为 链表+哈希表</li></ul></li><li>特点：元素唯一且有序。</li></ul><h4 id="TreeSet类"><a href="#TreeSet类" class="headerlink" title="TreeSet类"></a>TreeSet类</h4><ul><li><p>TreeSet类是set接口的实现类</p></li><li><p>treeSet元素不重复</p></li><li><p>底层结构是TreeSetMap，treeMap的底层是红黑树</p></li><li><p>treeSet是根据元素进行排序</p></li><li><p>排序方法：</p><ol><li><p>使用自然排序接口（Comparable）实现排序：</p><ul><li><p>需要元素类实现该接口并且（添加泛型），才能实现排序功能</p></li><li><p>（设置排序规则：返回值&lt; 0 倒序，返回值 &#x3D; 0 元素相同，返回值 &gt; 0 正序）</p></li><li><p>缺点：扩展性差，不易修改</p></li></ul></li><li><p>使用比较器排序接口（Comparator）实现排序：</p><ul><li><p>不需要元素类实现该接口，需要构造一个类实现该接口，在构造的类中写入比较条件。</p></li><li><p>优点：和比较的类解耦合，满足ocp原则，可以做多种排序要求。</p></li></ul></li><li><p>注意：当利用无参构造创建对象时，调用的是自然排序。用有参构造new了一个比较器时，调用比较器排序。</p></li></ol></li></ul><h4 id="Map-lt-K-V-gt-接口"><a href="#Map-lt-K-V-gt-接口" class="headerlink" title="Map&lt;K,V&gt;接口"></a>Map&lt;K,V&gt;接口</h4><ul><li><p>HashMap实现类 , Hashtable实现类 , TreeMap实现类</p></li><li><p>map的结构继承图：</p></li></ul><p><img src="/images/Javase/map.png" alt="map"></p><ul><li><p>注意:根据以上的继承关系我们知道Map接口和Collection接口是没有关系的。</p><ul><li><p>但是在开发中我们还是把Map叫做Map集合;因为Map接口也是java集合框架的成员。</p></li><li><p>此接口是Java Collections Framework的成员。</p></li></ul></li></ul><h4 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h4><ul><li><p>是Map 接口的实现类</p></li><li><p>底层是哈希表</p></li><li><p>线程不安全的，安全性低，效率高</p></li><li><p>允许使用null键，null值。</p></li><li><p>哈希表中的数组初始容量是16，当Map中的元素达到容量的0.75倍就会扩容。0.75是map的负载因子。这个数在时间和空间上都是相对最合适的</p></li><li><p>扩容：新容量&#x3D;旧容量的2倍。</p></li><li><p>容量必须满足：&lt;&#x3D; 2的30次方。</p></li></ul><h4 id="LinkdHashMap类"><a href="#LinkdHashMap类" class="headerlink" title="LinkdHashMap类"></a>LinkdHashMap类</h4><ul><li>保证了存储元素时的有序性。</li></ul><h4 id="TreeMap类"><a href="#TreeMap类" class="headerlink" title="TreeMap类"></a>TreeMap类</h4><ol><li>是Map接口的实现类</li><li>底层是红黑树。</li><li>红黑树的数据结构是约束key的</li><li>可以对Map中的key排序</li><li>也有“自然排序”和“比较器排序”两种。</li></ol><h4 id="集合的部分方法扩展"><a href="#集合的部分方法扩展" class="headerlink" title="集合的部分方法扩展"></a>集合的部分方法扩展</h4><ul><li><p>集合的添加元素</p><ul><li><p>Collections中的静态方法addAll方法可以将指定的多个元素全部加到集合中</p><pre class="line-numbers language-Java"><code class="language-Java">Collections.addAll("集合名",添加的元素,添加的元素,.......);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>集合的forEach遍历方法</p><ul><li><p>在forEach中new一个Consumer接口，consumer接口也是函数表达式，里面的抽象方法是没有返回值，有一个参数。</p></li><li><p>这是lambda表达式：（lambda内容见下）</p><pre class="line-numbers language-java"><code class="language-java">集合名<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>简写方法</p><pre class="line-numbers language-java"><code class="language-java">集合名<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>集合的排序</p><ul><li><p>使用list.sort()方法中，传入Comparator接口类型的参数， Comparator接口是函数表达式，里面的抽象方法：返回值是int类型，有两个参数。</p><pre class="line-numbers language-Java"><code class="language-Java">list.sort((x,y) -> x-y);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>lambda表达式：Comparator.comparing（元素对象：：元素属性）（根据属性升序）（根据存储的元素，是基本数据类型，还是存储的对象，来确定是否调用方法的）</p><pre class="line-numbers language-Java"><code class="language-Java">list.sort(Comparator.comparing(a -> a.方法));list.sort(Comparator.comparing(对象::方法));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h4 id="IO流的思维导图"><a href="#IO流的思维导图" class="headerlink" title="IO流的思维导图"></a>IO流的思维导图</h4><p><img src="/images/Javase/io.png" alt="io"></p><h4 id="io流的引入"><a href="#io流的引入" class="headerlink" title="io流的引入"></a>io流的引入</h4><ul><li>我们要将数据以文件的形式永久的保存到硬盘上，而要将数据写入文件中；或者从文件中读取数据，就需要使用io流<ul><li>IO流：<ul><li>io：输入输出</li><li>流：数据流，连续不断的数据</li></ul></li></ul></li></ul><h4 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h4><ul><li><p>根据流向的不同分为：</p><ul><li><p>输入流：读数据，将数据读取到程序中</p></li><li><p>输出流：写数据，将程序中的数据写到文件中</p></li></ul></li><li><p>根据操作数据的不同分为：</p><ul><li>字节流：按照字节为单位写数据</li><li>字符流：按照字符为单位写数据</li></ul></li><li><p>流根据不同功能分为：</p><ul><li>节点流（普通流）：真正读写数据的流。真正干活的。</li><li>处理流（包装流）：是对节点流的封装，也就是在节点流的基础上增加心得功能。但是读写数据还是使用节点流</li></ul></li><li><p>注意：</p><ul><li><p>字节流是万能流，什么文件都可以操作，</p></li><li><p>字符流不是万能的，只有记事本打开不会乱码的文件，才可以用字符流操作。</p></li></ul></li></ul><h4 id="四大基本抽象流"><a href="#四大基本抽象流" class="headerlink" title="四大基本抽象流"></a>四大基本抽象流</h4><ul><li><p>字节输入流(InputStream)：按照字节为单位读数据</p><ul><li>表示所有输出字节流的超类</li></ul></li><li><p>字节输出流(outputstream) :按照字节为单位写数据</p><ul><li>表示所有输入字节流的超类</li></ul></li><li><p>字符输入流(Reader):按照字符为单位读数据</p></li><li><p>字符输出流(writer):按照字符为单位写数据</p></li></ul><h4 id="文件输入输出流"><a href="#文件输入输出流" class="headerlink" title="文件输入输出流"></a>文件输入输出流</h4><ul><li><p>文件输入输出流是一种普通流，真正干活的。</p></li><li><p>文件输入流(FileInputStream)</p><ul><li><p>用于读取硬盘中文件的数据。（以字节为单位读取）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"users.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//存入数组中</span>                fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>文件便捷输入流(FileReader)</p><ul><li><p>用于读取硬盘中文件的数据。（以字符为单位读取）</p><p>​</p></li></ul></li><li><p>文件输出流(FileOutputStream)</p><ul><li>用于向硬盘中的文件写入数据。（以字节为单位写入）</li></ul></li><li><p>文件便捷输出流(FileWriter)</p><ul><li><p>用于向硬盘中的文件写入数据。（以字符为单位写入）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>        FileWriter fw <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//输出流，写入数据</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"users.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><ul><li><p>缓冲流是一种处理流，在节点流的基础上增加了缓冲区。</p></li><li><p>字节缓冲输入流()BufferedInputStream)</p><ul><li>BufferedInputStream为另一个输入流添加一些功能，即华冲输入以及支持mark和reset方法的能力</li></ul></li><li><p>字节缓冲输出流(BufferedOutputStream)</p><ul><li>该类实现缓冲的输出流，通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。</li></ul></li></ul><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><ul><li><p>计算机中的标准输入设备：键盘</p></li><li><p>标准输出设备：显示器</p></li><li><p>system类中的静态方法：</p><ul><li><p>标准错误输出流(static Printstream err)</p></li><li><p>标准输入流(static Inputstream in)</p><ul><li>作用于键盘</li></ul></li></ul><ul><li>标准输出流(static Printstream out)<ul><li>作用于显示器</li></ul></li></ul></li></ul><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><ul><li>打印流(PrintStream)<br>打印流是一种处理流，为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</li></ul><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><ul><li><p>数据流只有字节流，没有字符流</p></li><li><p>序列化(DataOutputStream)</p><ul><li><p>将数据以乱码的方式写入，读需要使用反序列化(DataInputStream)来读取数据</p><pre class="line-numbers language-Java"><code class="language-Java">public class Test03 {    public static void main(String[] args) {        DataOutputStream dos = null;        try {            dos = new DataOutputStream(new FileOutputStream("E:\\a.txt"));            dos.writeInt(1);            dos.writeInt(2);            dos.writeChar('a');            dos.writeChar('b');            dos.flush();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }finally {            if (dos != null) {                try {                    dos.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>反序列化(DataInputStream)</p><ul><li><p>读取序列化后的数据，读取时需要与写入时的数据类型顺序对应，否则会报错</p><pre class="line-numbers language-Java"><code class="language-Java">public class Test04 {    public static void main(String[] args) {        DataInputStream dis = null;        try {            dis = new DataInputStream(new FileInputStream("E:\\a.txt"));            System.out.println(dis.readInt());            System.out.println(dis.readInt());            System.out.println(dis.readChar());            System.out.println(dis.readChar());            System.out.println(dis.readByte());        } catch (Exception e) {            e.printStackTrace();        } finally {            if (dis != null) {                try {                    dis.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h4 id="线程（Thread）"><a href="#线程（Thread）" class="headerlink" title="线程（Thread）"></a>线程（Thread）</h4><ul><li><p>Java中使用Thread类表示线程。</p></li><li><p>注意：只有Thread类及其子类才能叫做线程</p></li><li><p>线程就是进程的执行路径。作用就是将程序指令交个CPU执行。一个进程至少需要一个线程。线程将指令交给CPU执行，是需要抢占CPU的时间片才能执行。CPU的一个核心执行一个线程。</p></li><li><p>多线程</p><ul><li>一个程序有多个执行路径，那么这个程序就是多线程的程序。</li></ul></li><li><p>创建线程</p><ul><li>方法一：<ol><li>创建Thread类的子类</li><li>子类重写run()方法</li><li>创建子类对象并成功</li></ol></li><li>方法二：<ol><li>创建Runnable接口的实现类</li><li>实现类重写run()方法</li><li>创建Thread时将实现类对象作为参数传递，启动Thread</li></ol></li></ul></li><li><p>守护线程</p><pre class="line-numbers language-Java"><code class="language-Java">void setDaemon(boolean on) ,当为true时用户线程变为守护线程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>礼让线程</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  （没什么用）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h4><ul><li>进程是运行中的程序，是计算机中分配资源的最小单位。</li><li>线程是程序的执行路径，线程是在进程中的。线程是程序执行的最小单位。</li></ul><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><ul><li><p>线程的状态：新建，就绪，运行，阻塞，死亡</p><p><img src="/images/Javase/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE.png" alt="线程生命周期"></p></li></ul><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><ul><li>返回线程优先级：int getPriority();</li><li>设置线程优先级：void setPriority(int a)<ul><li>(最小优先级&#x3D;1 &lt;&#x3D; a &lt;&#x3D; 最大优先级&#x3D;10 ，默认优先级&#x3D;5)</li></ul></li><li>在cpu资源充足的情况下，设置优先级没有效果;在资源不足的情况下，优先级高的线程获取到资源的几率大一点。</li></ul><h4 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h4><ul><li><p>中断标记</p><pre class="line-numbers language-Java"><code class="language-Java">Void interrupt()    //给线程设置一个中断标记，不会中断线程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取中断标记</p><pre class="line-numbers language-java"><code class="language-java">Static <span class="token keyword">boolean</span>  <span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//(获取后会清除标记)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h4><ul><li><p>同步代码块</p><pre class="line-numbers language-Java"><code class="language-Java">synchronized（对象锁）｛    //操作共享数据的代码｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>被synchronized修饰的代码具备有原子性。（要么不执行，要么执行结束）</p></li><li><p>对象锁：所有的多个线程是同一个锁。</p></li></ul></li><li><p>同步方法</p><pre class="line-numbers language-Java"><code class="language-Java">修饰符 synchronized 返回值 方法名（实参列表）｛        //共享修改的数据｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方法结束释放锁</li><li>建议方法中的代码全是共享的的数据</li><li>方法中的对象锁是：this</li><li>注意：静态的同步方法的对象锁是：字节码对象 (类名.class)</li></ul></li><li><p>同步：（效率低）</p><ul><li>多个线程执行时，线程是阻塞的，需要得到前一个线程的结果，另一个线程才能执行</li></ul></li><li><p>异步：（效率高）</p><ul><li>多个线程执行时，非阻塞的，线程之间是并发执行，不需要等待前面的结果。</li></ul></li><li><p>Synchronized的可重入性：</p><ol><li>synchronized是一个不公平锁<ul><li>公平锁：按照进入阻塞队列的顺序获取锁。</li><li>不公平锁：不管先后顺序，谁抢到就是谁的。</li></ul></li><li>synchronized是一个可重入锁<ul><li>使用synchronized时，当一个线程得到一个&#x3D;对象锁后，只要该线程还没有释放这个对象锁，再次请求此对象锁时可以再次获得该对象的锁。</li><li>可重入锁也支持在父子类继承的环境中，当存在父子类继承关系时，子类是完全可以通过“可重入锁”调用父类的同步方法。</li></ul></li></ol></li></ul><h4 id="线程之间通信机制"><a href="#线程之间通信机制" class="headerlink" title="线程之间通信机制"></a>线程之间通信机制</h4><ul><li><p>线程通信使用的是 “等待唤醒” 机制</p><ul><li><p>等待：wait();(会自动释放锁)</p></li><li><p>唤醒：notify();或者notifyAll();（不会释放锁）</p></li></ul></li><li><p>wait();notify();或者notifyAll();这几个方法必须出现在同步代码块中或者在同步方法中（用对象锁来调用）</p></li><li><p>notify();随机唤醒一个线程，notifyAll();将所有等待线程全部唤醒</p></li><li><p>Lock锁</p><pre class="line-numbers language-Java"><code class="language-Java">    public interface Lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Lock、实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的Condition对象。<ol><li>synchronized是关键字，我们不能修改。</li><li>Lock的接口，接口中就是方法，接口的方法可以重写，还可以接收参数，所以比 synchronized更加灵活。</li></ol></li></ul></li><li><p>condition接口</p><ul><li>Condition将object监视器方法(wait、notify和 notifyAll)分解成截然不同的对象，以便通过将这些对象与任意Lock 实现组合使用，为每个对象提供多个等待 set (wait-set)。其中,Lock 替代了synchronized方法和语句的使用，condition替代了object监视器方法的使用。</li></ul><ol><li>notify()&#x2F;notifyAll()只能在配合synchronized使用</li><li>condition接口的等待唤醒只能配合Lock使用</li><li>condition接口的await&#x2F;signal方法也必须编写在lock()和unlock()之间</li></ol></li></ul><h4 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h4><ul><li><p>饿汉式</p></li><li><p>在类中就直接new对象</p><ol><li>私有化构造方法</li><li>定义一个本类类型的静态变量，并私有化。</li><li>封装 一个get方法</li></ol><pre class="line-numbers language-Java"><code class="language-Java">public class DanLie01 {    //不管是否调用，直接先new出对象    private static DanLie01 danLie01 = new DanLie01();    private DanLie01() {    }    public static DanLie01 getDanLie01() {        return danLie01;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>懒汉式</p></li><li><p>用的时候才创建对象。</p><ol><li>私有化构造方法</li><li>定义一个本类类型的静态变量，并私有化。（添加volatile关键字，解决指令重排)</li><li>封装一个静态方法（在方法中new对象）</li><li>添加同步代码块使线程安全</li></ol><pre class="line-numbers language-Java"><code class="language-Java">public class DanLie02 {    //添加关键字volatile 解决指令重排问题    private volatile static DanLie02 danLie02;    private DanLie02() {    }    public static DanLie02 setDanLie02(){        //这个if判断是为了减少同步代码块的调用，增加效率        if (danLie02 == null){            //使用同步代码块，防止多线程安全问题            synchronized (DanLie02.class) {                //如果danLie02为空，表示还没有创建对象，所以就创建对象                //如果不为空，表示对象已创建，静态变量不能二次赋值，所以直接返回，                // 保证对象的单列。                if (danLie02 == null) {                    danLie02 = new DanLie02();                }            }        }        return danLie02;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="定时器（Timer）"><a href="#定时器（Timer）" class="headerlink" title="定时器（Timer）"></a>定时器（Timer）</h4><ol><li><p>创建定时器类对象</p></li><li><p>自定义一个任务子类继承TimerTask</p></li><li><p>在任务类中写任务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDeTimer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建定时器对象</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建定时器子类对象</span>        MyTimer myTimer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让myTimer类在两秒后执行。</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>myTimer<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让myTimer类在一秒后开始执行，每间隔两秒执行一次。</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>myTimer<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 自定义定时器子类 */</span><span class="token keyword">class</span> <span class="token class-name">MyTimer</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="线程池（Exector）"><a href="#线程池（Exector）" class="headerlink" title="线程池（Exector）"></a>线程池（Exector）</h4><ul><li><p>线程池的工具类（Executors）</p></li><li><p>使用线程池创建单一线程：Executors . [**newSingleThreadExecutor**](mk:@MSITStore:C:\Users\ASUS\Desktop\JDK 1.6 API.chm::&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;Executors.html#newSingleThreadExecutor())()</p></li><li><p>使用线程池创建多个固定可重复的线程：Executors . [**newFixedThreadPool**](mk:@MSITStore:C:\Users\ASUS\Desktop\JDK 1.6 API.chm::&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;Executors.html#newFixedThreadPool(int))(int nThreads) </p></li><li><p>缓冲线程池：[**newCachedThreadPool**](mk:@MSITStore:C:\Users\ASUS\Desktop\JDK 1.6 API.chm::&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;Executors.html#newCachedThreadPool())() </p></li><li><p>时间调度线程池：newS……</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExecutor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建多个固定可重复的线程</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建单一线程</span>        ExecutorService service1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service1<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"单一线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建缓冲线程</span>        ExecutorService service2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service2<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缓冲线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h4><ul><li><p>该类提供了线程局部变量</p></li><li><p>每个线程都有自己的局部变量</p></li><li><p>ThreadLocal本身不存储数据，真正存储数据的是线程内部的ThreadLocalMap,ThreadLocal是Map的key值</p></li><li><p>执行过程图</p><p><img src="/images/Javase/ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.png" alt="提供局部变量执行图"></p></li><li><p>使用匿名内部类时</p><pre class="line-numbers language-Java"><code class="language-Java">//自定义一个dog类class Dog{}/** * ThreadLocal类 */public class MyThreadLocal01 {    /**     * 创建时使用匿名内部类，重写initialValue方法，直接返回自定义类对象     * 这样输出方法中就可不用在new对象，     */    private static ThreadLocal<Dog> local = new ThreadLocal<Dog>(){        @Override        protected Dog initialValue() {            return new Dog();        }    };    public static void main(String[] args) {        //创建三个线程        for (int i = 0; i < 3; i++) {            Thread thread = new Thread(new Runnable() {                @Override                public void run() {                    m1();                    try {                        Thread.sleep(500);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    m2();                }            });            thread.start();        }    }    //定义两个方法    public static void m1(){        System.out.println(Thread.currentThread().getName() + "-->" + local.get() );    }    public static void m2(){        System.out.println(Thread.currentThread().getName() + "-->" + local.get() );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建对象用set方法改变变量为局部变量</p><pre class="line-numbers language-Java"><code class="language-Java">//自定义一个类class Cat{}/** * ThreadLocal类 */public class MyThreadLocal02 {    //这个对象多线程无法起作用    //private static Cat cat = new Cat();    //创建一个ThreadLocal对象(泛型为cat)设置为静态，私有化    private static ThreadLocal<Cat> local = new ThreadLocal();    public static void main(String[] args) {        //创建三个线程        for (int i = 0; i < 3; i++) {            Thread t1 = new Thread(new Runnable() {                @Override                public void run() {                    //调用方法一                    m1();                    try {                        Thread.sleep(200);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    m2();                }            });            t1.start();        }    }    /**     * 如果要保证两个方法输出的cat值是同一个，则不能new两个cat对象     * 如果值new一个静态的cat的对象，那么多线程输出就会被最后执行的一个线程覆盖，不能起作用     * 所以只能将cat对象用（ThreadLocal类）绑定cat对象将其设置成局部对象     */    //定义两个静态输出Cat的方法    public static void m1(){        //创建cat对象        Cat cat = new Cat();        //使用ThreadLocal的set方法绑定Cat对象        local.set(cat);        //输出Cat        System.out.println(Thread.currentThread().getName() + "->" + local.get());    }    public static void m2(){        //输出Cat        System.out.println(Thread.currentThread().getName() + "====>" + local.get());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="CountDownLatch倒计时锁"><a href="#CountDownLatch倒计时锁" class="headerlink" title="CountDownLatch倒计时锁"></a>CountDownLatch倒计时锁</h4><ul><li><p>new一个对象出来，设置倒计时时长</p></li><li><p>调用conutDown方法一次可以减一。</p><pre class="line-numbers language-Java"><code class="language-Java">public class MyCountDownLatch {    public static void main(String[] args) {        //创建一个倒计时锁对象        CountDownLatch latch = new CountDownLatch(1);        //创建五个线程        for (int i = 0; i < 5; i++) {            Thread t1 = new Thread(new Runnable() {                @Override                public void run() {                    //倒计时数字减一                    //latch.countDown();                    try {                        latch.await();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + "已到位====");                }            });            //启动线程            t1.start();        }        System.out.println("主程序启动");        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        latch.countDown();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="CyclicBarrier-循环栅栏"><a href="#CyclicBarrier-循环栅栏" class="headerlink" title="CyclicBarrier 循环栅栏"></a>CyclicBarrier 循环栅栏</h4><ul><li><p>创建时设置线程数量</p><pre class="line-numbers language-Java"><code class="language-Java">public class MyCyclicBarrier {    public static void main(String[] args) {        /**         * 创建循环栅栏对象(设置线程个数)         * 这个线程数量必须小于等于创建的线程数量，否则程序将陷入死等待         */        CyclicBarrier barrier = new CyclicBarrier(5);        //使用线程池创建五个线程        ExecutorService service = Executors.newFixedThreadPool(5);        for (int i = 0; i < 5; i++) {            service.submit(new Runnable() {                @Override                public void run() {                    try {                        System.out.println(Thread.currentThread().getName() + "准备就绪");                        Thread.sleep(1000);                        //当循环栅栏中的线程全部到达时，才会唤醒等待状态                        barrier.await();                    } catch (InterruptedException e) {                        e.printStackTrace();                    } catch (BrokenBarrierException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + "开始执行。。。");                }            });        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore:信号量"></a>Semaphore:信号量</h4><ul><li><p>用来限制同时访问资源的线程数量</p><pre class="line-numbers language-Java"><code class="language-Java">public class MySemaphore {    public static void main(String[] args) {        //创建信号量对象，设置同时访问的数量为4        Semaphore semaphore = new Semaphore(4);        //创建是个线程，这里采用线程池的方式        ExecutorService service = Executors.newFixedThreadPool(10);        for (int i = 0; i < 10; i++) {            service.submit(new Runnable() {                @Override                public void run() {                    //使用信号量限定一次最多的执行次数                    try {                        semaphore.acquire();                        System.out.println(Thread.currentThread().getName() + "开始执行。。。");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }finally {                        //执行结束后，让出信号位置                        semaphore.release();                    }                    System.out.println(Thread.currentThread().getName() + "停止执行！！");                }            });        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="反射机制与注解"><a href="#反射机制与注解" class="headerlink" title="反射机制与注解"></a>反射机制与注解</h2><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ul><li><p>根据字节码文件动态获取类信息</p></li><li><p>反射机制就是将类的各个组成部分（属性，方法 ，构造器 ）封装为其他对象。</p><p>获取类信息</p></li></ul><h4 id="获取class对象的四种方法"><a href="#获取class对象的四种方法" class="headerlink" title="获取class对象的四种方法"></a>获取class对象的四种方法</h4><ol><li>Calss.forName</li><li>类名.class (主要用于传参)</li><li>对象.getClass</li><li>包装类.TYPE</li></ol><h4 id="获取成员变量的字节码对象"><a href="#获取成员变量的字节码对象" class="headerlink" title="获取成员变量的字节码对象"></a>获取成员变量的字节码对象</h4><ul><li><p>类的指定公开成员变量 —-getField ()  加一个 s 表示获取所有的</p></li><li><p>获取成员变量的变量名—-getName()</p></li><li><p>获取成员变量的返回值—–getTypt()</p></li><li><p>获取成员变量的修饰符—–getModifiers()</p><pre class="line-numbers language-Java"><code class="language-Java"> Field nameField = aClass.getField("name"); System.out.println(nameField); System.out.println(nameField.getName());//获取字段名 System.out.println(nameField.getType());//获取字段返回值 System.out.println(nameField.getModifiers());//获取字段的修饰符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用构造方法创建对象"><a href="#使用构造方法创建对象" class="headerlink" title="使用构造方法创建对象"></a>使用构造方法创建对象</h4><ul><li><p>类的字节码文件对象.newInstance()</p><pre class="line-numbers language-Java"><code class="language-Java">//直接用字节码对象创建对象（默认调用无参构造方法）Object obj = aClass.newInstance();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>构造方法对象.newInstance()</p><pre class="line-numbers language-Java"><code class="language-Java">//通过无参构造对像创建对象Object obj = constructor.newInstance();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="获取构造方法的字节码对象"><a href="#获取构造方法的字节码对象" class="headerlink" title="获取构造方法的字节码对象"></a>获取构造方法的字节码对象</h4><ul><li><p>公开的构造方法：getConstructor()</p></li><li><p>非公开的构造方法：getDeclaredConstructor()</p><pre class="line-numbers language-Java"><code class="language-Java">//获取无参构造对象Constructor<?> constructor = aClass.getConstructor();//获取有参构造Constructor<?> constructor1 = aClass.getConstructor();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意：使用所有非公开的对象时，需要提前</p></li><li><p>使用：setAccessible(true)方法，来暴力避开 非公开的修饰符</p></li></ul><h4 id="获取方法的字节码对象"><a href="#获取方法的字节码对象" class="headerlink" title="获取方法的字节码对象"></a>获取方法的字节码对象</h4><ul><li><p>获取公开的方法：getmethod()</p><pre class="line-numbers language-Java"><code class="language-Java">Method method = aClass1.getMethod("方法名");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取非公开的方法：getDeclaredMethod()</p></li></ul><h4 id="获取内部类的字节码对象"><a href="#获取内部类的字节码对象" class="headerlink" title="获取内部类的字节码对象"></a>获取内部类的字节码对象</h4><ul><li><p>获取所有的内部类：getClasses</p><pre class="line-numbers language-Java"><code class="language-Java">//通过外部类获取非静态内部类Class<?>[] classes = aClass.getClasses();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断是否是静态内部类</p><pre class="line-numbers language-Java"><code class="language-Java">Modifier.isStatic(modifiers);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意：获取所有的内部类后，如果要判断是否是静态内部类 则</p></li><li><p>需要先获取修饰符对象，然后使用 ：Modifier.isStatic静态方法判断</p></li></ul><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ul><li><p>扩展类加载器</p></li><li><p>启动类加载器</p></li><li><p>应用类加载器</p></li><li><p>Classpath:类路径，就是字节码文件所在的路径</p><ul><li>（src下面就是第一级包）第一级包就是类路径的开始。</li></ul></li><li><p>那些内容可以加载进类路径：</p><ol><li>sre中的资源</li><li>被标记成resources root目录下的资源</li><li>第三方jar包</li></ol></li><li><p>打包jar包的方法</p><ol><li>选择左上角File –&gt; Project Student…（资源包）</li><li>选择 Artifacts(构建) –&gt;点击+号 —&gt;点击JAR –&gt;Form modules……</li><li>第一行选择你要打包的模块名 —&gt;第二行 选择你模块中要运行的主类名。</li><li>第一个选项是将其抽取为一个目标的jar，</li><li>再下面是默认的文件保存位置</li><li>弹出提示框，可以修改文件的输出目录。</li><li>选择上方的Build,选择Build Artifacts，选择模块名，选择Build.</li><li>程序中的配置文件要放到resources 目录（resources自己创建的文件夹，注意要修改类型）</li></ol></li></ul><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul><li><p>注释：解释说明代码的—-程序员看的</p></li><li><p>注解：解释说明代码的——程序看的</p></li><li><p>注解语法格式：</p><pre class="line-numbers language-Java"><code class="language-Java">元注解Pbulic @interface 注解名｛        属性；｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注解的属性</p><ul><li>注解的本质是接口，注解是jdk1.5出现的，所以注解使用的是1.5时候的接口，1.5的接口只有常量值和抽象方法。也就是注解中的属性要么是常量值；要么是抽象方法来表示</li><li>结论：注解中的属性是抽象方法</li><li>方法名就是属性名</li><li>方法的返回值类型就是属性的数据类型。</li></ul></li><li><p>注解中的属性的数据类型只能是：</p><ol><li>.基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>Class</li><li>以上数据类型的数组</li></ol></li><li><p>属性的使用细节：</p><ol><li>属性可以有默认值；如果属性有默认值，那么使用注解的时候，该属性可以不用显示赋值</li><li>如果属性的名称叫做value，那么使用注解的时候，只单独使用value属性时，属性名可以省略不写，但是如果使用多个属性的时候value不能省略</li><li>注解中数组使用｛｝表示；使用注解的时候，如果｛｝中只有一个值时，｛｝可以省略不写</li><li>多个属性之间使用逗号分隔。</li></ol></li><li><p>内置的元注解：</p><ol><li>@target : 标记定义的注解可以贴在那些地方</li><li>@Retention : 表示注解可以保留到什么阶段。</li></ol></li><li><p>注解有三个功能：</p><ol><li>我们只能用一个就是用来“简化代码”。</li></ol></li></ul><h2 id="lambda表达式和Stream流"><a href="#lambda表达式和Stream流" class="headerlink" title="lambda表达式和Stream流"></a>lambda表达式和Stream流</h2><h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><ul><li><p>是用来简化函数式接口的匿名内部类代码的。</p></li><li><p>函数式接口：只有一个抽象方法的接口，使用@FunctionalInterface进行注解</p></li><li><p>语法：</p><pre class="line-numbers language-Java"><code class="language-Java">（参数列表）-> {        函数体；        [return  [返回值];]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法引用</p><ul><li>当lambda表达式的函数体中只有一条语句且这条语句是调用其他方法完成功能，那么此时就可以使用方法引用简化lambda表达式</li><li>注意：函数体中的方法需要使用到参数列表中的参数</li></ul></li><li><p>简化语法：</p><ol><li>对象：：实例方法</li><li>类名：：静态方法</li><li>类名：：实例方法</li></ol><ul><li>注意：当lambda表达式的函数体中只有一条语句且这条语句是调用其他方法完成功能，同时参数列表的第一个参数作为方法的调用者，其余参数作为方法的参数传递，此时可以使用 第三种方法 3.类名：：实例方法</li></ul></li><li><p>构造方法引用</p><ul><li>当lambda表达式的函数体中只有一条语句，返回值为需要创建的对象类型，没有参数为无参构造，有参数为有参构造。</li></ul></li><li><p>简化语法</p><ol><li>类名：：new</li></ol></li></ul><h4 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h4><ul><li><p>Stream中的方法分为中间操作和终端操作</p><ul><li><p>中间操作：方法的返回值是Stream，该方法就是中间操作</p></li><li><p>终端操作：方法的返回值不是stream，该方法就是终端操作</p></li></ul></li><li><p>注意：终端操作不能写多个，想写多个只能重写多个流</p></li><li><p>顺序流：Stream（单线程的流）</p></li><li><p>并行流：parallelStream（多线程的流）</p></li><li><p>创建流的方法：</p><pre class="line-numbers language-Java"><code class="language-Java">集合名.stream()//创建单线程流集合名.parallelStream()//创建多线程流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Stream的静态方法：of()   iterate()    generate()</p><ul><li><p>of():直接添加元素在流中，返回一个流</p></li><li><p>iterate():无限迭代数据（limit可以设置迭代个数）（skip设置跳过几个数据）</p></li><li><p>generate()：无限的生成数据。</p></li></ul></li><li><p>stream流的常用方法：</p><ul><li><p>遍历：forEach ： 遍历流中的元素</p></li><li><p>过滤：filter：根据条件筛选出想要的元素</p></li><li><p>查找：</p><ol><li><p>findFirst()：找出集合中的第一个元素</p></li><li><p>findAny()：配合并行流使用，找出任意一个线程的头元素。</p></li></ol></li><li><p>匹配：</p><ol><li>anyMatch():只要有任意一个元素匹配条件则返回true</li><li>allMatch():需要所有元素匹配条件则返回true</li></ol></li></ul></li><li><p>收集元素：collect()</p></li><li><p>收集器工具类：Collectors()</p></li><li><p>聚合：（max&#x2F;min&#x2F;count）</p><ul><li>Max:默认获取字符最长的元素</li><li>Min:默认获取字符最短的的元素</li><li>注意：如果需要获取字节的长度，需要使用getBytes()方法转换</li><li>Count:获取元素的个数</li></ul></li><li><p>映射：（map&#x2F;flatMap）</p><ul><li>map的特点：流进一个，流出一个（一对一的关系）</li><li>flatMap的特点：进去一个，可以出来多个 （一对多的关系）</li></ul></li><li><p>归约：（reduce）</p><ul><li><p>归约：也称 缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p></li><li><p>归约中有三个重载方法（下列例子中演示的为集合中元素求和）</p><ol><li><p>只有一个参数的</p><pre class="line-numbers language-Java"><code class="language-Java">/*Optional<Integer> reduce1 = stream.reduce((a, b) -> {    System.out.println("a=" + a + " ,b=" + b);    //流中执行的规则      a=2 ,b=4      a=6 ,b=6      a=12 ,b=7      a=19 ,b=8      a=27 ,b=9      36    return a + b;});*/Optional<Integer> reduce = stream.reduce((a, b) -> a + b);Optional<Integer> reduce = stream.reduce((a, b) -> Integer.sum(a,b));Optional<Integer> reduce = stream.reduce(Integer::sum);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有两个参数的</p><pre class="line-numbers language-Java"><code class="language-Java">//identity参数：恒等的，在流中给第一个变量赋上一个初始值Integer reduce = stream.reduce(0, (a, b) -> a + b);Integer reduce = stream.reduce(10, (a, b) -> a + b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>有三个参数的</p><ul><li>注意：第三个参数，只有在并行流中才能执行，在顺序流中不会执行</li></ul><pre class="line-numbers language-Java"><code class="language-Java">//  第一个参数表示赋一个初始值//  第二个参数accumulator表示 线程内部累加//  第三个参数combiner表示 线程之间累加//  线程每次都会获取identity进行操作Stream<Integer> stream = list.parallelStream();Integer reduce = stream.reduce(10, (a, b) -> a + b, (x, y) -> x + y);Integer reduce = stream.reduce(10, Integer::sum, (x, y) -> x + y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li><p>归集：（toList&#x2F;toSet&#x2F;toMap）</p><ul><li>toList：将收集器收集到的元素打包成List集合返回</li><li>toSet：将收集器收集到的元素打包成 set集合返回</li><li>toMap：将收集器收集到的元素打包成map集合返回</li></ul></li><li><p>统计：(count&#x2F;averaging)</p><ul><li><p>注：以下全是收集器工具类中的方法</p></li><li><p>计数：counting()</p></li><li><p>平均值：averagingInt、averagingLong、averagingDouble</p></li><li><p>最值：maxBy、minBy</p></li><li><p>求和：summingInt、summingLong、summingDouble</p></li><li><p>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</p></li></ul></li><li><p>分组：（partitioningBy&#x2F;groupungBy）</p><ul><li><p>partitioningBy: 将元素通过某个条件分割为两个区</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据工资将元素分为是否高于7000的两个区</span>Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getWages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>groupungBy： 根据条件将元素分割为多个区，可使用多个条件分割多次</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据所在地将元素分隔成多个区</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>拼接：joining：收集器里面的方法，元素拼接在一起</p><pre class="line-numbers language-java"><code class="language-java">将所有的元素的名字拼接起来String collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自然排序：(sorted()) </p><ul><li><p>元素类需要实现comparable接口，重写方法</p></li><li><p>注意：实现接口时需要使用泛型。</p><pre class="line-numbers language-Java"><code class="language-Java">Stream<Student> sorted = stream.sorted();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>比较器排序：comparator</p><ul><li><p>排序规则反转方法：reversed()</p></li><li><p>二次排序方法：thenComparing（）</p></li><li><p>注意：使用二次排序前 必须使前一个条件使用lambda方式书写成：对象：：方法</p><pre class="line-numbers language-Java"><code class="language-Java">//自定义排序规则Stream<Student> sorted1 = stream.sorted((a,b) -> b.getId() - a.getId());Stream<Student> sorted1 = stream.sorted(Comparator.comparingInt(s -> s.getId()));Stream<Student> sorted1 = stream.sorted(Comparator.comparingInt(Student::getId).reversed());//二次排序的方法Stream<Student> sorted = stream.sorted(Comparator.comparingDouble(Student::getWages).reversed().thenComparingInt(Student::getId));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Stream流的静态方法：</p><ul><li><p>提取：Stream.iterate() ：定义初始值，取出什么值 </p><ul><li><p>提取多少个limit（）</p></li><li><p>是否需要跳过多少个  skip() </p><pre class="line-numbers language-Java"><code class="language-Java">//提取出3,4,5,6,7System.out.println(Stream.iterate(1, a -> a + 1).skip(2).limit(5).collect(Collectors.toList()));//提取出3,4,5System.out.println(Stream.iterate(1, a -> a + 1).limit(5).skip(2).collect(Collectors.toList()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>组合：Stream.concat() : 将两个流组合成一个流。</p><ul><li><p>去除重复值：distinct()</p><pre class="line-numbers language-Java"><code class="language-Java">//创建两个流Stream<String> stream = list.stream();Stream<String> stream1 = list1.stream();//合并两个流,然后去除重复值，在返回成一个数组List<String> collect = Stream.concat(stream,stream1).distinct().collect(Collectors.toList());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaSE学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyMarkdown</title>
      <link href="/2020/07/16/Markdown/"/>
      <url>/2020/07/16/Markdown/</url>
      
        <content type="html"><![CDATA[<ol><li><p>字体加粗：** 文本 **，不要加空格，下同。</p></li><li><p>斜体：* 文本 * </p></li><li><p>斜体加粗： ** * 文本 * **</p></li><li><p>删除线： ~~ 文本 ~~</p></li><li><p>引用 ： &gt; + 空格</p></li><li><p>分割线：— + 换行符  或者 *** + 换行符</p></li><li><p>添加图片：<img src="D:/course11/note/图片路径" alt="图片名"></p></li><li><p>添加超链接： [文本] (网址)</p></li><li><p>有序列表：1. + 空格</p></li><li><p>无序列表：- + 空格</p></li><li><p>博客令牌密码：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</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
