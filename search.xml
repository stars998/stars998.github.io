<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2022/08/18/MySQL/"/>
      <url>/2022/08/18/MySQL/</url>
      
        <content type="html"><![CDATA[<h1><center> MySQL</center><hr><h2 id="数据库的相关概念"><a href="#数据库的相关概念" class="headerlink" title="数据库的相关概念"></a>数据库的相关概念</h2><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ul><li>表达形式：多种表现形式：文本，图形，音频，视频。</li></ul><h4 id="数据库（Database，DB）"><a href="#数据库（Database，DB）" class="headerlink" title="数据库（Database，DB）"></a>数据库（Database，DB）</h4><ul><li>存放数据的仓库，存放在计算机中，按照一定的格式存放，可为用户共享</li></ul><h4 id="数据库管理系统（Database-Management-System-DBMS）"><a href="#数据库管理系统（Database-Management-System-DBMS）" class="headerlink" title="数据库管理系统（Database Management System, DBMS）"></a>数据库管理系统（Database Management System, DBMS）</h4><ul><li>数据库管理系统就是科学的组织和存储数据，高效的获取和维护数据，</li><li>市面上常用的：Oracle MySQL SQL Server  DB2</li></ul><h4 id="数据库应用程序（DBAS）"><a href="#数据库应用程序（DBAS）" class="headerlink" title="数据库应用程序（DBAS）"></a>数据库应用程序（DBAS）</h4><ul><li>在数据库系统基础上，使用数据库管理系统的语法，开发的直接面对最终用户的应用程序</li><li>例如：学生管理系统、人事管理系统、图书管理系统</li></ul><h4 id="数据库管理员（Database-Administrator-DBA）"><a href="#数据库管理员（Database-Administrator-DBA）" class="headerlink" title="数据库管理员（Database Administrator, DBA）"></a>数据库管理员（Database Administrator, DBA）</h4><ul><li>数据库管理系统的操作者</li></ul><h4 id="最终用户"><a href="#最终用户" class="headerlink" title="最终用户"></a>最终用户</h4><ul><li>数据库应用程序的使用者</li></ul><h4 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h4><ul><li><p>数据库 + 数据库管理系统 + 数据库应用程序 + 最终用户</p><p><img src="/images/MySQL/DB.jpg" alt="DB"></p></li></ul><h4 id="数据库的发展阶段"><a href="#数据库的发展阶段" class="headerlink" title="数据库的发展阶段"></a>数据库的发展阶段</h4><ol><li><p>网状数据库</p></li><li><p>层次数据库</p></li><li><p>关系数据库</p><ul><li><p>采用关系[二维表]存储与管理数据</p></li><li><p>采用结构化查询结构（sql）作为客户端数据库服务器之间沟通的桥梁</p></li></ul></li></ol><h4 id="NOSQL数据库"><a href="#NOSQL数据库" class="headerlink" title="NOSQL数据库"></a>NOSQL数据库</h4><ul><li>Not only sql数据库 泛指非关系数据库。</li><li>关系数据库在超大规模和高并发的web2.0纯属动态网站已经显示力不从心，暴露了很多难以克服的问题。Nosql数据库的产生就是为了解决大无框数据集合多重数据种类带来的挑战，尤其是大数据应用难题</li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/15/hello-world/"/>
      <url>/2022/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 世界 ！你好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaSE学习笔记</title>
      <link href="/2022/08/14/javase/"/>
      <url>/2022/08/14/javase/</url>
      
        <content type="html"><![CDATA[<h1><center>javase</center></h1><hr><h2 id="日期时间类"><a href="#日期时间类" class="headerlink" title="日期时间类"></a>日期时间类</h2><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li><p>java.util.Date() 我们称为时间类，程序中我们通过new对象保存时间（单位为毫秒）</p><ul><li><p>Date()类的构造方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：获得保存“当前时间”的Date对象。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>…<span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：获得保存“指定时间”的Date 对象（表示的就是“指定时间”距离1970年1月1日凌晨的毫秒数）</li></ul></li></ul></li><li><p>Date()类的成员方法：</p><ul><li>Long getTime();返回当前时间距离1970年1月1日凌晨的毫秒数。（获得时间）</li><li>void setTime(long time);使用给指定的毫秒时间值设置现有的Date对象。（修改时间）</li></ul></li><li><p>SimpleDateFormat 类的引入</p><ul><li>Java.text.SimpleDateFormat类属于DateFormat抽象类的实现类，开发中用来实现“Date对象”保存时间和“字符串”保存时间之间的相互转换。</li></ul></li><li><p>测试代码</p></li></ul><pre class="line-numbers language-Java"><code class="language-Java">public class Test01 {    public static void main(String[] args) throws IOException {        //获取当前时间        Date date = new Date();        System.out.println(date);        SimpleDateFormat sf = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒");        System.out.println(sf.format(date));        //将date对象保存的时间转换为calendar对象保存的时间        Calendar calendar = Calendar.getInstance();        calendar.setTime(date);        System.out.println(calendar);        //将calendar对象保存的时间转换为date对象保存的时间        Date date1 = calendar.getTime();        String s = sf.format(date1);        System.out.println(s);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="时间日期转换格式"><a href="#时间日期转换格式" class="headerlink" title="时间日期转换格式"></a>时间日期转换格式</h4><ul><li><p>当出现y时，会将y替换成年。</p></li><li><p>当出现M时，会将M替换成月。</p></li><li><p>当出现d 时，会将d替换成日。</p></li><li><p>当出现h时，会将h替换成时(12小时制)。</p></li><li><p>当出现H时，会将H替换成时(24小时制)。</p></li><li><p>当出现m时，会将m替换成分。</p></li><li><p>当出现s 时，会将s替换成秒。</p></li><li><p>当出现s 时，会将s替换成毫秒。</p></li><li><p>当出现D时，获得当前时间是今年的第几天。</p></li><li><p>当出现w时，获得当前时间是今年的第几周。</p></li><li><p>当出现w时，获得当前时间是本月的第几周。</p></li></ul><h4 id="时间类的构造方法"><a href="#时间类的构造方法" class="headerlink" title="时间类的构造方法"></a>时间类的构造方法</h4><ul><li><p>SimpleDateFormat类的构造方法：</p><pre class="line-numbers language-Java"><code class="language-Java">public SimpleDateFormat（String pattern）{…}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：实例化SimpleDateFormat对象，并且还能设置指定的格式规则</li></ul></li><li><p>Public SimpleDateFormat类的成员方法：（重点方法）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">format</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：把Date对象保存的时间转换为字符串保存时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Date <span class="token function">parse</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException<span class="token punctuation">{</span>…<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>作用：把字符串保存的时间转换为Date对象保存的时间</li></ul></li></ul><h4 id="时间日期的其他常用类"><a href="#时间日期的其他常用类" class="headerlink" title="时间日期的其他常用类"></a>时间日期的其他常用类</h4><ul><li><p>Calendar类（日历类）</p><ul><li>Java,util.Calendar类，通过Calendar可以表示年、月、日、是、分、秒的一个具体时间，而且还提供了日期相关的计算功能。</li></ul></li><li><p>Calendar类的实例化？？？</p><ul><li>Calendar类是一个抽象类，无法实例化，而是调用Calendar类的“Calendar getInstance()”静态方法来获得一个保存“当前时间”的</li></ul></li><li><p>Calendar对象。</p><ul><li>Calendaer 类中提供的字段，默认全部是int类型的“全局静态常量”。</li><li>calendar. YEAR获取年份</li><li>calendar . MONTH获取月份，o表示1月，1表示2月，…，11表示12月</li><li>calendar . DAY_OF_MONTH获取本月的第几天</li><li>calendar . DAY_OF_YEAR获取本年的第几天</li><li>calendar . HOUR_OF_DAY 小时，24小时制calendar. HOUR小时，12小时制</li><li>calendar.MINUTE 获取分钟</li><li>calendar.sECOND获取秒</li><li>calendar.MILLISECOND获取毫秒</li><li>calendar .DAY_OF_WEEK 获取星期几，1表示星期日，2表示星期一，…，7表示星期六</li></ul></li></ul><h4 id="时间日期的计算及转换"><a href="#时间日期的计算及转换" class="headerlink" title="时间日期的计算及转换"></a>时间日期的计算及转换</h4><ul><li><p>计算的方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据字段来“增加”或“减少”数据（在“年或月..”增加或者减少多少）。</span>Public <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>转换方法：</p></li><li><p>明确：开放中，经常设计到Date对象保存时间和Calendar对象保存时间之间的相互转换。</p><pre class="line-numbers language-java"><code class="language-java">Public <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作用：把Date对象保存时间转换为calendar对象保存的时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><hr><h2 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h2><ul><li><p>枚举语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">enum</span> 枚举名｛          枚举值<span class="token number">1</span>，枚举值<span class="token number">2</span>，枚举值<span class="token number">3</span>，…<span class="token punctuation">.</span><span class="token punctuation">.</span>      ｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>使用语法：枚举名.枚举值</p></li><li><p>注意：在switch选择结构中，我们使用“枚举值”的时候必须省略“枚举名”。</p></li></ul></li><li><p>枚举的底层？<br>在Java中枚举本质上就是一个被final修饰的类，并且继承了Java.long.Enum抽象类<br>类型的枚举中的所有枚举值，默认都是类型的全局静态常量。</p></li><li><p>对枚举进行反编译，发现枚举中还提供了values（）的全局静态方法，调用该方法就能返回枚举中的所有枚举值（用数组来存储）。</p></li></ul><hr><h2 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h2><h4 id="System的常用方法"><a href="#System的常用方法" class="headerlink" title="System的常用方法"></a>System的常用方法</h4><pre class="line-numbers language-java"><code class="language-java">    数组拷贝：<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>object src<span class="token punctuation">,</span><span class="token keyword">int</span> srcPos<span class="token punctuation">,</span>object dest<span class="token punctuation">,</span><span class="token keyword">int</span> destPos<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span>        输出当前时间的毫秒数：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        终止当前程序，退出Java虚拟机：<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>当s等于<span class="token number">0</span>时退出<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>         返回指定索引处的 <span class="token keyword">char</span> 值    <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>        将指定字符串连接到此字符串的结尾    <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span>        判断是否包含次字符串：    <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>        返回数组中表示次字符的字符串    <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>        返回数组中指定下标的字符串    <span class="token function">endsWith</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span>        判断字符串是否以 指定字符串结尾    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Math类的常用方法"><a href="#Math类的常用方法" class="headerlink" title="Math类的常用方法"></a>Math类的常用方法</h4><pre class="line-numbers language-Java"><code class="language-Java">    Math.PI;        取圆周率：    Math.abs(基本数据类型 a);        取绝对值：    Math.cbrt(double a);        立方根：    Math.ceil(double a);        向上取整：    Math.floor(double a);        向下取整：     Math.max(int a,int b);        取两个数中的最大值：    Math.min(int a,int b);        取两个数中的最小值    Math.random();        [0，1)之间的随机数    Math.round(double a);        四舍五入：    Math.round(float a);        四舍五入：    （long）Math.fioor(数值+0.5)        注意：四舍五入的计算规则：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UUID类"><a href="#UUID类" class="headerlink" title="UUID类"></a>UUID类</h4><ul><li>表示通用的唯一标识符（UUID）类。表示一个128位的值</li></ul><hr><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>就是方法体中直接或间接的调用方法自身</li><li>使用递归：<br>1.必须创建方法。<br>2.必须有结束条件，（不然就会形成死递归，导致栈溢出）。<br>3.构造函数不能使用递归。</li><li>递归的思想：<br>将一个大的问题拆分成几个小问题，所有小问题解决了，大问题就解决了。</li><li>注意：循环能够解决的问题递归一定能够解决，反之则不一定。<br>如果循环嵌套层次过多，则可以使用递归，但是递归效率比循环效率更低。</li></ul><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h4 id="集合Collection接口的继承结构图"><a href="#集合Collection接口的继承结构图" class="headerlink" title="集合Collection接口的继承结构图"></a>集合Collection接口的继承结构图</h4><p><img src="/images/Javase/list.png" alt="list.png"></p><h4 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h4><ul><li><p>实现的接口：</p><ul><li>collection接口，List接口，Deque接口（双端队列）</li></ul></li><li><p>链表之单向链表</p><ul><li><p>一个节点由数据位和地址位组成，数据位就是存储元素，地址位就是下一个节点的地址。</p><p><img src="/images/Javase/linkde1.png" alt="linked1"></p></li></ul></li><li><p>链表之双向链表</p><ul><li><p>一个节点由两个地址位和一个数据位，数据位存储元素，地址位一个地址位指向前一个节点的地址，一个指向下一个节点的地址。</p><p><img src="/images/Javase/linkde2.png" alt="linkde2"></p></li></ul></li><li><p>链表的特点：</p><ul><li>链表是由节点链接而成的</li><li>链表在内存中不是一段连续的内存空间，添加一个节点就在内存中新开一个空间存储节点</li><li>链表的增删效率高，查改的效率低。</li><li>非线程安全，安全性低，效率高。</li></ul></li></ul><h4 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h4><ul><li>向量类<br> 1. List的实现类<br> 2. 底层数据结构：动态数组<br> 3. 增删效率低，查改效率高<br> 4. 线程安全的，安全性高，效率低（几乎不用）</li></ul><h4 id="泛型（genericity）"><a href="#泛型（genericity）" class="headerlink" title="泛型（genericity）"></a>泛型（genericity）</h4><ul><li><p>泛型：又叫参数化类型，就是应用数据类型作为参数了。（泛型也有形参和实参）</p><ul><li>泛型的形参：仅仅表示这是一个泛型，没有具体的数据类型。（可以用 E T…）</li><li>泛型的实参：在创建对象时定义实参，约束集合的数据类型。</li></ul></li><li><p>注意：只有引用数据类型才能作为泛型。</p></li><li><p>泛型的作用：约束集合中的元素的数据类型，将元素类型的检测从运行时提升到编译时。</p></li><li><p>泛型的方法：（该方法没什么实际运用，了解语法即可）</p><ul><li>泛型方法的定义上一定有&lt;泛型的形参&gt;的方法才是泛型方法</li></ul></li><li><p>泛型方法的语法格式：</p><pre class="line-numbers language-Java"><code class="language-Java">修饰符 <泛型> 返回值类型  方法名（参数列表）｛｝<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p></li><li><p>泛型通配符：？（没什么鸟用，了解即可）</p><ul><li><?>这里的？就是泛型通配符。</li><li>泛型通配符？：表示所有泛型实参，就是可以表示泛型所有的具体类型</li><li><E>：这里的E表示的是泛型所有的形参。</li></ul></li><li><p>泛型通配符主要配合泛型的限定来使用</p></li><li><p>泛型的限定：</p><ul><li>上限：&lt;? extends T&gt; 表示？只能是T类及其子类</li><li>下限：&lt;? super T&gt;表示？只能是T类及其父类</li><li>注意：T 表示一个类（自定义类也行）</li></ul></li><li><p>泛型擦除：</p><ul><li>源代码中使用的泛型，在经过编译后，代码中就看不大泛型，就是泛型擦除。</li><li>（泛型擦除不是泛型丢失了，而是在编译后的字节码文件中使用单独的标识来存储泛型了）</li></ul></li></ul><h4 id="set接口"><a href="#set接口" class="headerlink" title="set接口"></a>set接口</h4><ul><li>是collection接口的子接口。</li><li>特点：元素不能重复，元素重复是否有序和实现类有关。</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HsahSet是set接口的实现类。<ol><li>元素不能重复</li><li>元素无序，特别是它不保证该顺序恒久不变。</li><li>底层的数据结构是HashMap&lt;k,v&gt;,HashMap的底层结构是哈希表</li></ol></li><li>哈希表：也叫散列表，是根据关键码值（key）而直接进行访问的数据结构</li><li>哈希表是一个数组。</li><li>哈希表中的数据会产生哈希冲突（碰撞）<ul><li>哈希冲突：不同的key，hashCode值一样，哈希表中的索引就一样，这就是哈西冲突。</li></ul></li></ul><h4 id="LinedHashSet类"><a href="#LinedHashSet类" class="headerlink" title="LinedHashSet类"></a>LinedHashSet类</h4><ul><li>是HashSet的子类<ul><li>底层为 链表+哈希表</li></ul></li><li>特点：元素唯一且有序。</li></ul><h4 id="TreeSet类"><a href="#TreeSet类" class="headerlink" title="TreeSet类"></a>TreeSet类</h4><ul><li><p>TreeSet类是set接口的实现类</p></li><li><p>treeSet元素不重复</p></li><li><p>底层结构是TreeSetMap，treeMap的底层是红黑树</p></li><li><p>treeSet是根据元素进行排序</p></li><li><p>排序方法：</p><ol><li><p>使用自然排序接口（Comparable）实现排序：</p><ul><li><p>需要元素类实现该接口并且（添加泛型），才能实现排序功能</p></li><li><p>（设置排序规则：返回值&lt; 0 倒序，返回值 &#x3D; 0 元素相同，返回值 &gt; 0 正序）</p></li><li><p>缺点：扩展性差，不易修改</p></li></ul></li><li><p>使用比较器排序接口（Comparator）实现排序：</p><ul><li><p>不需要元素类实现该接口，需要构造一个类实现该接口，在构造的类中写入比较条件。</p></li><li><p>优点：和比较的类解耦合，满足ocp原则，可以做多种排序要求。</p></li></ul></li><li><p>注意：当利用无参构造创建对象时，调用的是自然排序。用有参构造new了一个比较器时，调用比较器排序。</p></li></ol></li></ul><h4 id="Map-lt-K-V-gt-接口"><a href="#Map-lt-K-V-gt-接口" class="headerlink" title="Map&lt;K,V&gt;接口"></a>Map&lt;K,V&gt;接口</h4><ul><li><p>HashMap实现类 , Hashtable实现类 , TreeMap实现类</p></li><li><p>map的结构继承图：</p></li></ul><p><img src="/images/Javase/map.png" alt="map"></p><ul><li><p>注意:根据以上的继承关系我们知道Map接口和Collection接口是没有关系的。</p><ul><li><p>但是在开发中我们还是把Map叫做Map集合;因为Map接口也是java集合框架的成员。</p></li><li><p>此接口是Java Collections Framework的成员。</p></li></ul></li></ul><h4 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h4><ul><li><p>是Map 接口的实现类</p></li><li><p>底层是哈希表</p></li><li><p>线程不安全的，安全性低，效率高</p></li><li><p>允许使用null键，null值。</p></li><li><p>哈希表中的数组初始容量是16，当Map中的元素达到容量的0.75倍就会扩容。0.75是map的负载因子。这个数在时间和空间上都是相对最合适的</p></li><li><p>扩容：新容量&#x3D;旧容量的2倍。</p></li><li><p>容量必须满足：&lt;&#x3D; 2的30次方。</p></li></ul><h4 id="LinkdHashMap类"><a href="#LinkdHashMap类" class="headerlink" title="LinkdHashMap类"></a>LinkdHashMap类</h4><ul><li>保证了存储元素时的有序性。</li></ul><h4 id="TreeMap类"><a href="#TreeMap类" class="headerlink" title="TreeMap类"></a>TreeMap类</h4><ol><li>是Map接口的实现类</li><li>底层是红黑树。</li><li>红黑树的数据结构是约束key的</li><li>可以对Map中的key排序</li><li>也有“自然排序”和“比较器排序”两种。</li></ol><h4 id="集合的部分方法扩展"><a href="#集合的部分方法扩展" class="headerlink" title="集合的部分方法扩展"></a>集合的部分方法扩展</h4><ul><li><p>集合的添加元素</p><ul><li><p>Collections中的静态方法addAll方法可以将指定的多个元素全部加到集合中</p><pre class="line-numbers language-Java"><code class="language-Java">Collections.addAll("集合名",添加的元素,添加的元素,.......);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>集合的forEach遍历方法</p><ul><li><p>在forEach中new一个Consumer接口，consumer接口也是函数表达式，里面的抽象方法是没有返回值，有一个参数。</p></li><li><p>这是lambda表达式：（lambda内容见下）</p><pre class="line-numbers language-java"><code class="language-java">集合名<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>简写方法</p><pre class="line-numbers language-java"><code class="language-java">集合名<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>集合的排序</p><ul><li><p>使用list.sort()方法中，传入Comparator接口类型的参数， Comparator接口是函数表达式，里面的抽象方法：返回值是int类型，有两个参数。</p><pre class="line-numbers language-Java"><code class="language-Java">list.sort((x,y) -> x-y);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>lambda表达式：Comparator.comparing（元素对象：：元素属性）（根据属性升序）（根据存储的元素，是基本数据类型，还是存储的对象，来确定是否调用方法的）</p><pre class="line-numbers language-Java"><code class="language-Java">list.sort(Comparator.comparing(a -> a.方法));list.sort(Comparator.comparing(对象::方法));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h4 id="IO流的思维导图"><a href="#IO流的思维导图" class="headerlink" title="IO流的思维导图"></a>IO流的思维导图</h4><p><img src="/images/Javase/io.png" alt="io"></p><h4 id="io流的引入"><a href="#io流的引入" class="headerlink" title="io流的引入"></a>io流的引入</h4><ul><li>我们要将数据以文件的形式永久的保存到硬盘上，而要将数据写入文件中；或者从文件中读取数据，就需要使用io流<ul><li>IO流：<ul><li>io：输入输出</li><li>流：数据流，连续不断的数据</li></ul></li></ul></li></ul><h4 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h4><ul><li><p>根据流向的不同分为：</p><ul><li><p>输入流：读数据，将数据读取到程序中</p></li><li><p>输出流：写数据，将程序中的数据写到文件中</p></li></ul></li><li><p>根据操作数据的不同分为：</p><ul><li>字节流：按照字节为单位写数据</li><li>字符流：按照字符为单位写数据</li></ul></li><li><p>流根据不同功能分为：</p><ul><li>节点流（普通流）：真正读写数据的流。真正干活的。</li><li>处理流（包装流）：是对节点流的封装，也就是在节点流的基础上增加心得功能。但是读写数据还是使用节点流</li></ul></li><li><p>注意：</p><ul><li><p>字节流是万能流，什么文件都可以操作，</p></li><li><p>字符流不是万能的，只有记事本打开不会乱码的文件，才可以用字符流操作。</p></li></ul></li></ul><h4 id="四大基本抽象流"><a href="#四大基本抽象流" class="headerlink" title="四大基本抽象流"></a>四大基本抽象流</h4><ul><li><p>字节输入流(InputStream)：按照字节为单位读数据</p><ul><li>表示所有输出字节流的超类</li></ul></li><li><p>字节输出流(outputstream) :按照字节为单位写数据</p><ul><li>表示所有输入字节流的超类</li></ul></li><li><p>字符输入流(Reader):按照字符为单位读数据</p></li><li><p>字符输出流(writer):按照字符为单位写数据</p></li></ul><h4 id="文件输入输出流"><a href="#文件输入输出流" class="headerlink" title="文件输入输出流"></a>文件输入输出流</h4><ul><li><p>文件输入输出流是一种普通流，真正干活的。</p></li><li><p>文件输入流(FileInputStream)</p><ul><li>用于读取硬盘中文件的数据。（以字节为单位读取）</li></ul></li><li><p>文件便捷输入流(FileReader)</p><ul><li>用于读取硬盘中文件的数据。（以字符为单位读取）</li></ul></li><li><p>文件输出流(FileOutputStream)</p><ul><li>用于向硬盘中的文件写入数据。（以字节为单位写入）</li></ul></li><li><p>文件便捷输出流(FileWriter)</p><ul><li>用于向硬盘中的文件写入数据。（以字符为单位写入）</li></ul></li></ul><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><ul><li><p>缓冲流是一种处理流，在节点流的基础上增加了缓冲区。</p></li><li><p>字节缓冲输入流()BufferedInputStream)</p><ul><li>BufferedInputStream为另一个输入流添加一些功能，即华冲输入以及支持mark和reset方法的能力</li></ul></li><li><p>字节缓冲输出流(BufferedOutputStream)</p><ul><li>该类实现缓冲的输出流，通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。</li></ul></li></ul><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><ul><li><p>计算机中的标准输入设备：键盘</p></li><li><p>标准输出设备：显示器</p></li><li><p>system类中的静态方法：</p><ul><li><p>标准错误输出流(static Printstream err)</p></li><li><p>标准输入流(static Inputstream in)</p><ul><li>作用于键盘</li></ul></li></ul><ul><li>标准输出流(static Printstream out)<ul><li>作用于显示器</li></ul></li></ul></li></ul><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><ul><li>打印流(PrintStream)<br>打印流是一种处理流，为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</li></ul><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><ul><li><p>数据流只有字节流，没有字符流</p></li><li><p>序列化(DataOutputStream)</p><ul><li><p>将数据以乱码的方式写入，读需要使用反序列化(DataInputStream)来读取数据</p><pre class="line-numbers language-Java"><code class="language-Java">public class Test03 {    public static void main(String[] args) {        DataOutputStream dos = null;        try {            dos = new DataOutputStream(new FileOutputStream("E:\\a.txt"));            dos.writeInt(1);            dos.writeInt(2);            dos.writeChar('a');            dos.writeChar('b');            dos.flush();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }finally {            if (dos != null) {                try {                    dos.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>反序列化(DataInputStream)</p><ul><li><p>读取序列化后的数据，读取时需要与写入时的数据类型顺序对应，否则会报错</p><pre class="line-numbers language-Java"><code class="language-Java">public class Test04 {    public static void main(String[] args) {        DataInputStream dis = null;        try {            dis = new DataInputStream(new FileInputStream("E:\\a.txt"));            System.out.println(dis.readInt());            System.out.println(dis.readInt());            System.out.println(dis.readChar());            System.out.println(dis.readChar());            System.out.println(dis.readByte());        } catch (Exception e) {            e.printStackTrace();        } finally {            if (dis != null) {                try {                    dis.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h4 id="线程（Thread）"><a href="#线程（Thread）" class="headerlink" title="线程（Thread）"></a>线程（Thread）</h4><ul><li><p>Java中使用Thread类表示线程。</p></li><li><p>注意：只有Thread类及其子类才能叫做线程</p></li><li><p>线程就是进程的执行路径。作用就是将程序指令交个CPU执行。一个进程至少需要一个线程。线程将指令交给CPU执行，是需要抢占CPU的时间片才能执行。CPU的一个核心执行一个线程。</p></li><li><p>多线程</p><ul><li>一个程序有多个执行路径，那么这个程序就是多线程的程序。</li></ul></li><li><p>创建线程</p><ul><li>方法一：<ol><li>创建Thread类的子类</li><li>子类重写run()方法</li><li>创建子类对象并成功</li></ol></li><li>方法二：<ol><li>创建Runnable接口的实现类</li><li>实现类重写run()方法</li><li>创建Thread时将实现类对象作为参数传递，启动Thread</li></ol></li></ul></li><li><p>守护线程</p><pre class="line-numbers language-Java"><code class="language-Java">void setDaemon(boolean on) ,当为true时用户线程变为守护线程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>礼让线程</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  （没什么用）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h4><ul><li>进程是运行中的程序，是计算机中分配资源的最小单位。</li><li>线程是程序的执行路径，线程是在进程中的。线程是程序执行的最小单位。</li></ul><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><ul><li><p>线程的状态：新建，就绪，运行，阻塞，死亡</p><p><img src="/images/Javase/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE.png" alt="线程生命周期"></p></li></ul><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><ul><li>返回线程优先级：int getPriority();</li><li>设置线程优先级：void setPriority(int a)<ul><li>(最小优先级&#x3D;1 &lt;&#x3D; a &lt;&#x3D; 最大优先级&#x3D;10 ，默认优先级&#x3D;5)</li></ul></li><li>在cpu资源充足的情况下，设置优先级没有效果;在资源不足的情况下，优先级高的线程获取到资源的几率大一点。</li></ul><h4 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h4><ul><li><p>中断标记</p><pre class="line-numbers language-Java"><code class="language-Java">Void interrupt()    //给线程设置一个中断标记，不会中断线程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取中断标记</p><pre class="line-numbers language-java"><code class="language-java">Static <span class="token keyword">boolean</span>  <span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//(获取后会清除标记)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h4><ul><li><p>同步代码块</p><pre class="line-numbers language-Java"><code class="language-Java">synchronized（对象锁）｛    //操作共享数据的代码｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>被synchronized修饰的代码具备有原子性。（要么不执行，要么执行结束）</p></li><li><p>对象锁：所有的多个线程是同一个锁。</p></li></ul></li><li><p>同步方法</p><pre class="line-numbers language-Java"><code class="language-Java">修饰符 synchronized 返回值 方法名（实参列表）｛        //共享修改的数据｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>方法结束释放锁</li><li>建议方法中的代码全是共享的的数据</li><li>方法中的对象锁是：this</li><li>注意：静态的同步方法的对象锁是：字节码对象 (类名.class)</li></ul></li><li><p>同步：（效率低）</p><ul><li>多个线程执行时，线程是阻塞的，需要得到前一个线程的结果，另一个线程才能执行</li></ul></li><li><p>异步：（效率高）</p><ul><li>多个线程执行时，非阻塞的，线程之间是并发执行，不需要等待前面的结果。</li></ul></li><li><p>Synchronized的可重入性：</p><ol><li>synchronized是一个不公平锁<ul><li>公平锁：按照进入阻塞队列的顺序获取锁。</li><li>不公平锁：不管先后顺序，谁抢到就是谁的。</li></ul></li><li>synchronized是一个可重入锁<ul><li>使用synchronized时，当一个线程得到一个&#x3D;对象锁后，只要该线程还没有释放这个对象锁，再次请求此对象锁时可以再次获得该对象的锁。</li><li>可重入锁也支持在父子类继承的环境中，当存在父子类继承关系时，子类是完全可以通过“可重入锁”调用父类的同步方法。</li></ul></li></ol></li></ul><h4 id="线程之间通信机制"><a href="#线程之间通信机制" class="headerlink" title="线程之间通信机制"></a>线程之间通信机制</h4><ul><li><p>线程通信使用的是 “等待唤醒” 机制</p><ul><li><p>等待：wait();(会自动释放锁)</p></li><li><p>唤醒：notify();或者notifyAll();（不会释放锁）</p></li></ul></li><li><p>wait();notify();或者notifyAll();这几个方法必须出现在同步代码块中或者在同步方法中（用对象锁来调用）</p></li><li><p>notify();随机唤醒一个线程，notifyAll();将所有等待线程全部唤醒</p></li><li><p>Lock锁</p><pre class="line-numbers language-Java"><code class="language-Java">    public interface Lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Lock、实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的Condition对象。<ol><li>synchronized是关键字，我们不能修改。</li><li>Lock的接口，接口中就是方法，接口的方法可以重写，还可以接收参数，所以比 synchronized更加灵活。</li></ol></li></ul></li><li><p>condition接口</p><ul><li>Condition将object监视器方法(wait、notify和 notifyAll)分解成截然不同的对象，以便通过将这些对象与任意Lock 实现组合使用，为每个对象提供多个等待 set (wait-set)。其中,Lock 替代了synchronized方法和语句的使用，condition替代了object监视器方法的使用。</li></ul><ol><li>notify()&#x2F;notifyAll()只能在配合synchronized使用</li><li>condition接口的等待唤醒只能配合Lock使用</li><li>condition接口的await&#x2F;signal方法也必须编写在lock()和unlock()之间</li></ol></li></ul><h4 id="单列模式"><a href="#单列模式" class="headerlink" title="单列模式"></a>单列模式</h4><ul><li><p>饿汉式</p></li><li><p>在类中就直接new对象</p><ol><li>私有化构造方法</li><li>定义一个本类类型的静态变量，并私有化。</li><li>封装 一个get方法</li></ol><pre class="line-numbers language-Java"><code class="language-Java">public class DanLie01 {    //不管是否调用，直接先new出对象    private static DanLie01 danLie01 = new DanLie01();    private DanLie01() {    }    public static DanLie01 getDanLie01() {        return danLie01;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>懒汉式</p></li><li><p>用的时候才创建对象。</p><ol><li>私有化构造方法</li><li>定义一个本类类型的静态变量，并私有化。（添加volatile关键字，解决指令重排)</li><li>封装一个静态方法（在方法中new对象）</li><li>添加同步代码块使线程安全</li></ol><pre class="line-numbers language-Java"><code class="language-Java">public class DanLie02 {    //添加关键字volatile 解决指令重排问题    private volatile static DanLie02 danLie02;    private DanLie02() {    }    public static DanLie02 setDanLie02(){        //这个if判断是为了减少同步代码块的调用，增加效率        if (danLie02 == null){            //使用同步代码块，防止多线程安全问题            synchronized (DanLie02.class) {                //如果danLie02为空，表示还没有创建对象，所以就创建对象                //如果不为空，表示对象已创建，静态变量不能二次赋值，所以直接返回，                // 保证对象的单列。                if (danLie02 == null) {                    danLie02 = new DanLie02();                }            }        }        return danLie02;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="定时器（Timer）"><a href="#定时器（Timer）" class="headerlink" title="定时器（Timer）"></a>定时器（Timer）</h4><ol><li><p>创建定时器类对象</p></li><li><p>自定义一个任务子类继承TimerTask</p></li><li><p>在任务类中写任务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDeTimer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建定时器对象</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建定时器子类对象</span>        MyTimer myTimer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让myTimer类在两秒后执行。</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>myTimer<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让myTimer类在一秒后开始执行，每间隔两秒执行一次。</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>myTimer<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 自定义定时器子类 */</span><span class="token keyword">class</span> <span class="token class-name">MyTimer</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="线程池（Exector）"><a href="#线程池（Exector）" class="headerlink" title="线程池（Exector）"></a>线程池（Exector）</h4><ul><li><p>线程池的工具类（Executors）</p></li><li><p>使用线程池创建单一线程：Executors . [**newSingleThreadExecutor**](mk:@MSITStore:C:\Users\ASUS\Desktop\JDK 1.6 API.chm::&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;Executors.html#newSingleThreadExecutor())()</p></li><li><p>使用线程池创建多个固定可重复的线程：Executors . [**newFixedThreadPool**](mk:@MSITStore:C:\Users\ASUS\Desktop\JDK 1.6 API.chm::&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;Executors.html#newFixedThreadPool(int))(int nThreads) </p></li><li><p>缓冲线程池：[**newCachedThreadPool**](mk:@MSITStore:C:\Users\ASUS\Desktop\JDK 1.6 API.chm::&#x2F;java&#x2F;util&#x2F;concurrent&#x2F;Executors.html#newCachedThreadPool())() </p></li><li><p>时间调度线程池：newS……</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExecutor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建多个固定可重复的线程</span>        ExecutorService service <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建单一线程</span>        ExecutorService service1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service1<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"单一线程执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建缓冲线程</span>        ExecutorService service2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service2<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缓冲线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h4><ul><li><p>该类提供了线程局部变量</p></li><li><p>每个线程都有自己的局部变量</p></li><li><p>ThreadLocal本身不存储数据，真正存储数据的是线程内部的ThreadLocalMap,ThreadLocal是Map的key值</p></li><li><p>执行过程图</p><p><img src="/images/Javase/ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.png" alt="提供局部变量执行图"></p></li><li><p>使用匿名内部类时</p><pre class="line-numbers language-Java"><code class="language-Java">//自定义一个dog类class Dog{}/** * ThreadLocal类 */public class MyThreadLocal01 {    /**     * 创建时使用匿名内部类，重写initialValue方法，直接返回自定义类对象     * 这样输出方法中就可不用在new对象，     */    private static ThreadLocal<Dog> local = new ThreadLocal<Dog>(){        @Override        protected Dog initialValue() {            return new Dog();        }    };    public static void main(String[] args) {        //创建三个线程        for (int i = 0; i < 3; i++) {            Thread thread = new Thread(new Runnable() {                @Override                public void run() {                    m1();                    try {                        Thread.sleep(500);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    m2();                }            });            thread.start();        }    }    //定义两个方法    public static void m1(){        System.out.println(Thread.currentThread().getName() + "-->" + local.get() );    }    public static void m2(){        System.out.println(Thread.currentThread().getName() + "-->" + local.get() );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建对象用set方法改变变量为局部变量</p><pre class="line-numbers language-Java"><code class="language-Java">//自定义一个类class Cat{}/** * ThreadLocal类 */public class MyThreadLocal02 {    //这个对象多线程无法起作用    //private static Cat cat = new Cat();    //创建一个ThreadLocal对象(泛型为cat)设置为静态，私有化    private static ThreadLocal<Cat> local = new ThreadLocal();    public static void main(String[] args) {        //创建三个线程        for (int i = 0; i < 3; i++) {            Thread t1 = new Thread(new Runnable() {                @Override                public void run() {                    //调用方法一                    m1();                    try {                        Thread.sleep(200);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    m2();                }            });            t1.start();        }    }    /**     * 如果要保证两个方法输出的cat值是同一个，则不能new两个cat对象     * 如果值new一个静态的cat的对象，那么多线程输出就会被最后执行的一个线程覆盖，不能起作用     * 所以只能将cat对象用（ThreadLocal类）绑定cat对象将其设置成局部对象     */    //定义两个静态输出Cat的方法    public static void m1(){        //创建cat对象        Cat cat = new Cat();        //使用ThreadLocal的set方法绑定Cat对象        local.set(cat);        //输出Cat        System.out.println(Thread.currentThread().getName() + "->" + local.get());    }    public static void m2(){        //输出Cat        System.out.println(Thread.currentThread().getName() + "====>" + local.get());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="CountDownLatch倒计时锁"><a href="#CountDownLatch倒计时锁" class="headerlink" title="CountDownLatch倒计时锁"></a>CountDownLatch倒计时锁</h4><ul><li><p>new一个对象出来，设置倒计时时长</p></li><li><p>调用conutDown方法一次可以减一。</p><pre class="line-numbers language-Java"><code class="language-Java">public class MyCountDownLatch {    public static void main(String[] args) {        //创建一个倒计时锁对象        CountDownLatch latch = new CountDownLatch(1);        //创建五个线程        for (int i = 0; i < 5; i++) {            Thread t1 = new Thread(new Runnable() {                @Override                public void run() {                    //倒计时数字减一                    //latch.countDown();                    try {                        latch.await();                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + "已到位====");                }            });            //启动线程            t1.start();        }        System.out.println("主程序启动");        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        latch.countDown();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="CyclicBarrier-循环栅栏"><a href="#CyclicBarrier-循环栅栏" class="headerlink" title="CyclicBarrier 循环栅栏"></a>CyclicBarrier 循环栅栏</h4><ul><li><p>创建时设置线程数量</p><pre class="line-numbers language-Java"><code class="language-Java">public class MyCyclicBarrier {    public static void main(String[] args) {        /**         * 创建循环栅栏对象(设置线程个数)         * 这个线程数量必须小于等于创建的线程数量，否则程序将陷入死等待         */        CyclicBarrier barrier = new CyclicBarrier(5);        //使用线程池创建五个线程        ExecutorService service = Executors.newFixedThreadPool(5);        for (int i = 0; i < 5; i++) {            service.submit(new Runnable() {                @Override                public void run() {                    try {                        System.out.println(Thread.currentThread().getName() + "准备就绪");                        Thread.sleep(1000);                        //当循环栅栏中的线程全部到达时，才会唤醒等待状态                        barrier.await();                    } catch (InterruptedException e) {                        e.printStackTrace();                    } catch (BrokenBarrierException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + "开始执行。。。");                }            });        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore:信号量"></a>Semaphore:信号量</h4><ul><li><p>用来限制同时访问资源的线程数量</p><pre class="line-numbers language-Java"><code class="language-Java">public class MySemaphore {    public static void main(String[] args) {        //创建信号量对象，设置同时访问的数量为4        Semaphore semaphore = new Semaphore(4);        //创建是个线程，这里采用线程池的方式        ExecutorService service = Executors.newFixedThreadPool(10);        for (int i = 0; i < 10; i++) {            service.submit(new Runnable() {                @Override                public void run() {                    //使用信号量限定一次最多的执行次数                    try {                        semaphore.acquire();                        System.out.println(Thread.currentThread().getName() + "开始执行。。。");                    } catch (InterruptedException e) {                        e.printStackTrace();                    }finally {                        //执行结束后，让出信号位置                        semaphore.release();                    }                    System.out.println(Thread.currentThread().getName() + "停止执行！！");                }            });        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="反射机制与注解"><a href="#反射机制与注解" class="headerlink" title="反射机制与注解"></a>反射机制与注解</h2><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><ul><li><p>根据字节码文件动态获取类信息</p></li><li><p>反射机制就是将类的各个组成部分（属性，方法 ，构造器 ）封装为其他对象。</p><p>获取类信息</p></li></ul><h4 id="获取class对象的四种方法"><a href="#获取class对象的四种方法" class="headerlink" title="获取class对象的四种方法"></a>获取class对象的四种方法</h4><ol><li>Calss.forName</li><li>类名.class (主要用于传参)</li><li>对象.getClass</li><li>包装类.TYPE</li></ol><h4 id="获取成员变量的字节码对象"><a href="#获取成员变量的字节码对象" class="headerlink" title="获取成员变量的字节码对象"></a>获取成员变量的字节码对象</h4><ul><li><p>类的指定公开成员变量 —-getField ()  加一个 s 表示获取所有的</p></li><li><p>获取成员变量的变量名—-getName()</p></li><li><p>获取成员变量的返回值—–getTypt()</p></li><li><p>获取成员变量的修饰符—–getModifiers()</p><pre class="line-numbers language-Java"><code class="language-Java"> Field nameField = aClass.getField("name"); System.out.println(nameField); System.out.println(nameField.getName());//获取字段名 System.out.println(nameField.getType());//获取字段返回值 System.out.println(nameField.getModifiers());//获取字段的修饰符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="使用构造方法创建对象"><a href="#使用构造方法创建对象" class="headerlink" title="使用构造方法创建对象"></a>使用构造方法创建对象</h4><ul><li><p>类的字节码文件对象.newInstance()</p><pre class="line-numbers language-Java"><code class="language-Java">//直接用字节码对象创建对象（默认调用无参构造方法）Object obj = aClass.newInstance();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>构造方法对象.newInstance()</p><pre class="line-numbers language-Java"><code class="language-Java">//通过无参构造对像创建对象Object obj = constructor.newInstance();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="获取构造方法的字节码对象"><a href="#获取构造方法的字节码对象" class="headerlink" title="获取构造方法的字节码对象"></a>获取构造方法的字节码对象</h4><ul><li><p>公开的构造方法：getConstructor()</p></li><li><p>非公开的构造方法：getDeclaredConstructor()</p><pre class="line-numbers language-Java"><code class="language-Java">//获取无参构造对象Constructor<?> constructor = aClass.getConstructor();//获取有参构造Constructor<?> constructor1 = aClass.getConstructor();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意：使用所有非公开的对象时，需要提前</p></li><li><p>使用：setAccessible(true)方法，来暴力避开 非公开的修饰符</p></li></ul><h4 id="获取方法的字节码对象"><a href="#获取方法的字节码对象" class="headerlink" title="获取方法的字节码对象"></a>获取方法的字节码对象</h4><ul><li><p>获取公开的方法：getmethod()</p><pre class="line-numbers language-Java"><code class="language-Java">Method method = aClass1.getMethod("方法名");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取非公开的方法：getDeclaredMethod()</p></li></ul><h4 id="获取内部类的字节码对象"><a href="#获取内部类的字节码对象" class="headerlink" title="获取内部类的字节码对象"></a>获取内部类的字节码对象</h4><ul><li><p>获取所有的内部类：getClasses</p><pre class="line-numbers language-Java"><code class="language-Java">//通过外部类获取非静态内部类Class<?>[] classes = aClass.getClasses();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断是否是静态内部类</p><pre class="line-numbers language-Java"><code class="language-Java">Modifier.isStatic(modifiers);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意：获取所有的内部类后，如果要判断是否是静态内部类 则</p></li><li><p>需要先获取修饰符对象，然后使用 ：Modifier.isStatic静态方法判断</p></li></ul><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ul><li><p>扩展类加载器</p></li><li><p>启动类加载器</p></li><li><p>应用类加载器</p></li><li><p>Classpath:类路径，就是字节码文件所在的路径</p><ul><li>（src下面就是第一级包）第一级包就是类路径的开始。</li></ul></li><li><p>那些内容可以加载进类路径：</p><ol><li>sre中的资源</li><li>被标记成resources root目录下的资源</li><li>第三方jar包</li></ol></li><li><p>打包jar包的方法</p><ol><li>选择左上角File –&gt; Project Student…（资源包）</li><li>选择 Artifacts(构建) –&gt;点击+号 —&gt;点击JAR –&gt;Form modules……</li><li>第一行选择你要打包的模块名 —&gt;第二行 选择你模块中要运行的主类名。</li><li>第一个选项是将其抽取为一个目标的jar，</li><li>再下面是默认的文件保存位置</li><li>弹出提示框，可以修改文件的输出目录。</li><li>选择上方的Build,选择Build Artifacts，选择模块名，选择Build.</li><li>程序中的配置文件要放到resources 目录（resources自己创建的文件夹，注意要修改类型）</li></ol></li></ul><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><ul><li><p>注释：解释说明代码的—-程序员看的</p></li><li><p>注解：解释说明代码的——程序看的</p></li><li><p>注解语法格式：</p><pre class="line-numbers language-Java"><code class="language-Java">元注解Pbulic @interface 注解名｛        属性；｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注解的属性</p><ul><li>注解的本质是接口，注解是jdk1.5出现的，所以注解使用的是1.5时候的接口，1.5的接口只有常量值和抽象方法。也就是注解中的属性要么是常量值；要么是抽象方法来表示</li><li>结论：注解中的属性是抽象方法</li><li>方法名就是属性名</li><li>方法的返回值类型就是属性的数据类型。</li></ul></li><li><p>注解中的属性的数据类型只能是：</p><ol><li>.基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>Class</li><li>以上数据类型的数组</li></ol></li><li><p>属性的使用细节：</p><ol><li>属性可以有默认值；如果属性有默认值，那么使用注解的时候，该属性可以不用显示赋值</li><li>如果属性的名称叫做value，那么使用注解的时候，只单独使用value属性时，属性名可以省略不写，但是如果使用多个属性的时候value不能省略</li><li>注解中数组使用｛｝表示；使用注解的时候，如果｛｝中只有一个值时，｛｝可以省略不写</li><li>多个属性之间使用逗号分隔。</li></ol></li><li><p>内置的元注解：</p><ol><li>@target : 标记定义的注解可以贴在那些地方</li><li>@Retention : 表示注解可以保留到什么阶段。</li></ol></li><li><p>注解有三个功能：</p><ol><li>我们只能用一个就是用来“简化代码”。</li></ol></li></ul><h2 id="lambda表达式和Stream流"><a href="#lambda表达式和Stream流" class="headerlink" title="lambda表达式和Stream流"></a>lambda表达式和Stream流</h2><h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><ul><li><p>是用来简化函数式接口的匿名内部类代码的。</p></li><li><p>函数式接口：只有一个抽象方法的接口，使用@FunctionalInterface进行注解</p></li><li><p>语法：</p><pre class="line-numbers language-Java"><code class="language-Java">（参数列表）-> {        函数体；        [return  [返回值];]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法引用</p><ul><li>当lambda表达式的函数体中只有一条语句且这条语句是调用其他方法完成功能，那么此时就可以使用方法引用简化lambda表达式</li><li>注意：函数体中的方法需要使用到参数列表中的参数</li></ul></li><li><p>简化语法：</p><ol><li>对象：：实例方法</li><li>类名：：静态方法</li><li>类名：：实例方法</li></ol><ul><li>注意：当lambda表达式的函数体中只有一条语句且这条语句是调用其他方法完成功能，同时参数列表的第一个参数作为方法的调用者，其余参数作为方法的参数传递，此时可以使用 第三种方法 3.类名：：实例方法</li></ul></li><li><p>构造方法引用</p><ul><li>当lambda表达式的函数体中只有一条语句，返回值为需要创建的对象类型，没有参数为无参构造，有参数为有参构造。</li></ul></li><li><p>简化语法</p><ol><li>类名：：new</li></ol></li></ul><h4 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h4><ul><li><p>Stream中的方法分为中间操作和终端操作</p><ul><li><p>中间操作：方法的返回值是Stream，该方法就是中间操作</p></li><li><p>终端操作：方法的返回值不是stream，该方法就是终端操作</p></li></ul></li><li><p>注意：终端操作不能写多个，想写多个只能重写多个流</p></li><li><p>顺序流：Stream（单线程的流）</p></li><li><p>并行流：parallelStream（多线程的流）</p></li><li><p>创建流的方法：</p><pre class="line-numbers language-Java"><code class="language-Java">集合名.stream()//创建单线程流集合名.parallelStream()//创建多线程流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Stream的静态方法：of()   iterate()    generate()</p><ul><li><p>of():直接添加元素在流中，返回一个流</p></li><li><p>iterate():无限迭代数据（limit可以设置迭代个数）（skip设置跳过几个数据）</p></li><li><p>generate()：无限的生成数据。</p></li></ul></li><li><p>stream流的常用方法：</p><ul><li><p>遍历：forEach ： 遍历流中的元素</p></li><li><p>过滤：filter：根据条件筛选出想要的元素</p></li><li><p>查找：</p><ol><li><p>findFirst()：找出集合中的第一个元素</p></li><li><p>findAny()：配合并行流使用，找出任意一个线程的头元素。</p></li></ol></li><li><p>匹配：</p><ol><li>anyMatch():只要有任意一个元素匹配条件则返回true</li><li>allMatch():需要所有元素匹配条件则返回true</li></ol></li></ul></li><li><p>收集元素：collect()</p></li><li><p>收集器工具类：Collectors()</p></li><li><p>聚合：（max&#x2F;min&#x2F;count）</p><ul><li>Max:默认获取字符最长的元素</li><li>Min:默认获取字符最短的的元素</li><li>注意：如果需要获取字节的长度，需要使用getBytes()方法转换</li><li>Count:获取元素的个数</li></ul></li><li><p>映射：（map&#x2F;flatMap）</p><ul><li>map的特点：流进一个，流出一个（一对一的关系）</li><li>flatMap的特点：进去一个，可以出来多个 （一对多的关系）</li></ul></li><li><p>归约：（reduce）</p><ul><li><p>归约：也称 缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p></li><li><p>归约中有三个重载方法（下列例子中演示的为集合中元素求和）</p><ol><li><p>只有一个参数的</p><pre class="line-numbers language-Java"><code class="language-Java">/*Optional<Integer> reduce1 = stream.reduce((a, b) -> {    System.out.println("a=" + a + " ,b=" + b);    //流中执行的规则      a=2 ,b=4      a=6 ,b=6      a=12 ,b=7      a=19 ,b=8      a=27 ,b=9      36    return a + b;});*/Optional<Integer> reduce = stream.reduce((a, b) -> a + b);Optional<Integer> reduce = stream.reduce((a, b) -> Integer.sum(a,b));Optional<Integer> reduce = stream.reduce(Integer::sum);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有两个参数的</p><pre class="line-numbers language-Java"><code class="language-Java">//identity参数：恒等的，在流中给第一个变量赋上一个初始值Integer reduce = stream.reduce(0, (a, b) -> a + b);Integer reduce = stream.reduce(10, (a, b) -> a + b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>有三个参数的</p><ul><li>注意：第三个参数，只有在并行流中才能执行，在顺序流中不会执行</li></ul><pre class="line-numbers language-Java"><code class="language-Java">//  第一个参数表示赋一个初始值//  第二个参数accumulator表示 线程内部累加//  第三个参数combiner表示 线程之间累加//  线程每次都会获取identity进行操作Stream<Integer> stream = list.parallelStream();Integer reduce = stream.reduce(10, (a, b) -> a + b, (x, y) -> x + y);Integer reduce = stream.reduce(10, Integer::sum, (x, y) -> x + y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul></li><li><p>归集：（toList&#x2F;toSet&#x2F;toMap）</p><ul><li>toList：将收集器收集到的元素打包成List集合返回</li><li>toSet：将收集器收集到的元素打包成 set集合返回</li><li>toMap：将收集器收集到的元素打包成map集合返回</li></ul></li><li><p>统计：(count&#x2F;averaging)</p><ul><li><p>注：以下全是收集器工具类中的方法</p></li><li><p>计数：counting()</p></li><li><p>平均值：averagingInt、averagingLong、averagingDouble</p></li><li><p>最值：maxBy、minBy</p></li><li><p>求和：summingInt、summingLong、summingDouble</p></li><li><p>统计以上所有：summarizingInt、summarizingLong、summarizingDouble</p></li></ul></li><li><p>分组：（partitioningBy&#x2F;groupungBy）</p><ul><li><p>partitioningBy: 将元素通过某个条件分割为两个区</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据工资将元素分为是否高于7000的两个区</span>Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getWages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>groupungBy： 根据条件将元素分割为多个区，可使用多个条件分割多次</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//根据所在地将元素分隔成多个区</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>拼接：joining：收集器里面的方法，元素拼接在一起</p><pre class="line-numbers language-java"><code class="language-java">将所有的元素的名字拼接起来String collect <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自然排序：(sorted()) </p><ul><li><p>元素类需要实现comparable接口，重写方法</p></li><li><p>注意：实现接口时需要使用泛型。</p><pre class="line-numbers language-Java"><code class="language-Java">Stream<Student> sorted = stream.sorted();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>比较器排序：comparator</p><ul><li><p>排序规则反转方法：reversed()</p></li><li><p>二次排序方法：thenComparing（）</p></li><li><p>注意：使用二次排序前 必须使前一个条件使用lambda方式书写成：对象：：方法</p><pre class="line-numbers language-Java"><code class="language-Java">//自定义排序规则Stream<Student> sorted1 = stream.sorted((a,b) -> b.getId() - a.getId());Stream<Student> sorted1 = stream.sorted(Comparator.comparingInt(s -> s.getId()));Stream<Student> sorted1 = stream.sorted(Comparator.comparingInt(Student::getId).reversed());//二次排序的方法Stream<Student> sorted = stream.sorted(Comparator.comparingDouble(Student::getWages).reversed().thenComparingInt(Student::getId));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Stream流的静态方法：</p><ul><li><p>提取：Stream.iterate() ：定义初始值，取出什么值 </p><ul><li><p>提取多少个limit（）</p></li><li><p>是否需要跳过多少个  skip() </p><pre class="line-numbers language-Java"><code class="language-Java">//提取出3,4,5,6,7System.out.println(Stream.iterate(1, a -> a + 1).skip(2).limit(5).collect(Collectors.toList()));//提取出3,4,5System.out.println(Stream.iterate(1, a -> a + 1).limit(5).skip(2).collect(Collectors.toList()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>组合：Stream.concat() : 将两个流组合成一个流。</p><ul><li><p>去除重复值：distinct()</p><pre class="line-numbers language-Java"><code class="language-Java">//创建两个流Stream<String> stream = list.stream();Stream<String> stream1 = list1.stream();//合并两个流,然后去除重复值，在返回成一个数组List<String> collect = Stream.concat(stream,stream1).distinct().collect(Collectors.toList());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javaSE学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyMarkdown</title>
      <link href="/2020/02/16/Markdown/"/>
      <url>/2020/02/16/Markdown/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Markdown编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
