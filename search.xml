<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/08/17/Untitled/"/>
      <url>/2022/08/17/Untitled/</url>
      
        <content type="html"><![CDATA[<h1 id="abc"><a href="#abc" class="headerlink" title="abc"></a>abc</h1><ol><li>djaiojgaoidnfoadfncnsndvnvndnoian</li><li>dkasdnvanoisdnviaosdvoiv</li><li>sdmvaimvmamodvpav</li></ol><hr><h1 id="def"><a href="#def" class="headerlink" title="def"></a>def</h1><ul><li>sdjgjamdoimamcmd</li><li>sdignasidfonaod</li><li>asdgiandiv</li></ul><h2 id="gkd"><a href="#gkd" class="headerlink" title="gkd"></a>gkd</h2><p>1. </p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*注释信息。。。。。。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase笔记</title>
      <link href="/2022/08/16/javase/"/>
      <url>/2022/08/16/javase/</url>
      
        <content type="html"><![CDATA[<h1><center>javase<center><hr><h4 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h4><ol><li></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*java.util.Date() 我们称为时间类，程序中我们通过new对象保存时间（单位为毫秒）*Date()类的构造方法：*Public Date()&amp;#123;…&amp;#125;*作用：获得保存“当前时间”的Date对象。*Public Date(long date) &amp;#123;….&amp;#125;*作用：获得保存“指定时间”的Date 对象（表示的就是“指定时间”距离1970年1月1日凌晨的毫秒数）*    *Date()类的成员方法：*Long getTime();返回当前时间距离1970年1月1日凌晨的毫秒数。（获得时间）*void setTime(long time);使用给指定的毫秒时间值设置现有的Date对象。（修改时间）*    *SimpleDateFormat 类的引入*Java.text.SimpleDateFormat类属于DateFormat抽象类的实现类，开发中用来实现“Date对象”保存时间和“字符串”保存时间之间的相互转换。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前时间</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将date对象保存的时间转换为calendar对象保存的时间</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将calendar对象保存的时间转换为date对象保存的时间</span>        Date date1 <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>时间转换格式</p><ul><li>当出现y时，会将y替换成年。</li><li>当出现M时，会将M替换成月。</li><li>当出现d 时，会将d替换成日。</li><li>当出现h时，会将h替换成时(12小时制)。</li><li>当出现H时，会将H替换成时(24小时制)。</li><li>当出现m时，会将m替换成分。</li><li>当出现s 时，会将s替换成秒。</li><li>当出现s 时，会将s替换成毫秒。</li><li>当出现D时，获得当前时间是今年的第几天。</li><li>当出现w时，获得当前时间是今年的第几周。</li><li>当出现w时，获得当前时间是本月的第几周。</li></ul></li><li><p>时间类的构造方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*SimpleDateFormat类的构造方法：    Public SimpleDateFormat（String pattern）&amp;#123;…&amp;#125;    作用：实例化SimpleDateFormat对象，并且还能设置指定的格式规则    Public SimpleDateFormat类的成员方法：（重点方法）    Public final String format(Date date)&amp;#123;…&amp;#125;    作用：把Date对象保存的时间转换为字符串保存时间。    Public Date parse(String source) throws ParseException&amp;#123;…&amp;#125;    作用：把字符串保存的时间转换为Date对象保存的时间*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>时间日期的其他常用类</p><pre class="line-numbers language-java"><code class="language-java">Calendar类（日历类）    Java<span class="token punctuation">,</span>util<span class="token punctuation">.</span>Calendar类，通过Calendar可以表示年、月、日、是、分、秒的一个具体时间，而且还提供了日期相关的计算功能。Calendar类的实例化？？？    Calendar类是一个抽象类，无法实例化，而是调用Calendar类的“Calendar <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>”静态方法来获得一个保存“当前时间”的Calendar对象。Calendaer 类提供的字段？？    Calendaer 类中提供的字段，默认全部是<span class="token keyword">int</span>类型的“全局静态常量”。    calendar<span class="token punctuation">.</span> YEAR获取年份    calendar <span class="token punctuation">.</span> MONTH获取月份，o表示<span class="token number">1</span>月，<span class="token number">1</span>表示<span class="token number">2</span>月，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，<span class="token number">11</span>表示<span class="token number">12</span>月    calendar <span class="token punctuation">.</span> DAY_OF_MONTH获取本月的第几天    calendar <span class="token punctuation">.</span> DAY_OF_YEAR获取本年的第几天    calendar <span class="token punctuation">.</span> HOUR_OF_DAY 小时，<span class="token number">24</span>小时制calendar<span class="token punctuation">.</span> HOUR小时，<span class="token number">12</span>小时制    calendar<span class="token punctuation">.</span>MINUTE 获取分钟    calendar<span class="token punctuation">.</span>sECOND获取秒    calendar<span class="token punctuation">.</span>MILLISECOND获取毫秒    calendar <span class="token punctuation">.</span>DAY_OF_WEEK 获取星期几，<span class="token number">1</span>表示星期日，<span class="token number">2</span>表示星期一，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，<span class="token number">7</span>表示星期    六<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>时间日期的计算及转换</p><pre class="line-numbers language-java"><code class="language-java">计算的方法：    Public <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>…<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>根据字段来“增加”或“减少”数据（在“年或月<span class="token punctuation">.</span><span class="token punctuation">.</span>”增加或者减少多少）。转换方法：    明确：开放中，经常设计到Date对象保存时间和Calendar对象保存时间之间的相互转换。    Public <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>…<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    作用：把Date对象保存时间转换为calendar对象保存的时间        Public <span class="token keyword">final</span> Date <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>…<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    作用：把calendar对象保存的时间转换成date对象保存的时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h2><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>枚举语法：    <span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">enum</span> 枚举名｛        枚举值<span class="token number">1</span>，枚举值<span class="token number">2</span>，枚举值<span class="token number">3</span>，…<span class="token punctuation">.</span><span class="token punctuation">.</span>    ｝使用语法：枚举名<span class="token punctuation">.</span>枚举值    注意：在<span class="token keyword">switch</span>选择结构中，我们使用“枚举值”的时候必须省略“枚举名”。<span class="token number">1</span><span class="token punctuation">.</span>枚举的底层？    在Java中枚举本质上就是一个被<span class="token keyword">final</span>修饰的类，并且继承了Java<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">.</span>Enum抽象类    <span class="token operator">*</span><span class="token operator">*</span>类型的枚举中的所有枚举值，默认都是<span class="token operator">*</span><span class="token operator">*</span>类型的全局静态常量。        对枚举进行反编译，发现枚举中还提供了values（）的全局静态方法，调用该方法就能返回枚举中的所有枚举值（用数组来存储）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h2><ul><li><p>System的常用方法：</p><pre class="line-numbers language-java"><code class="language-java">    数组拷贝：<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>object src，<span class="token keyword">int</span> srcPos，object dest，       <span class="token keyword">int</span> destPos，<span class="token keyword">int</span> length<span class="token punctuation">)</span>        输出当前时间的毫秒数：<span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        终止当前程序，退出Java虚拟机：<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>当s等于<span class="token number">0</span>时退出<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>String类的常用方法：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>         返回指定索引处的 <span class="token keyword">char</span> 值    <span class="token function">concat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span>        将指定字符串连接到此字符串的结尾    <span class="token function">contains</span><span class="token punctuation">(</span>CharSequence s<span class="token punctuation">)</span>        判断是否包含次字符串：    <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>        返回数组中表示次字符的字符串    <span class="token function">copyValueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span>        返回数组中指定下标的字符串    <span class="token function">endsWith</span><span class="token punctuation">(</span>String suffix<span class="token punctuation">)</span>        判断字符串是否以 指定字符串结尾    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Math类的常用方法：</p><pre class="line-numbers language-Java"><code class="language-Java">    Math.PI;        取圆周率：    Math.abs(基本数据类型 a);        取绝对值：    Math.cbrt(double a);        立方根：    Math.ceil(double a);        向上取整：    Math.floor(double a);        向下取整：     Math.max(int a,int b);        取两个数中的最大值：    Math.min(int a,int b);        取两个数中的最小值    Math.random();        [0，1)之间的随机数    Math.round(double a);        四舍五入：    Math.round(float a);        四舍五入：    （long）Math.fioor(数值+0.5)        注意：四舍五入的计算规则：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>UUID类</p><pre class="line-numbers language-Java"><code class="language-Java">表示通用的唯一标识符（UUID）类。表示一个128位的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li><pre class="line-numbers language-Java"><code class="language-Java">就是方法体中直接或间接的调用方法自身使用递归：    1.必须创建方法。    2.必须有结束条件，（不然就会形成死递归，导致栈溢出）。    3.构造函数不能使用递归。    递归的思想：    将一个大的问题拆分成几个小问题，所有小问题解决了，大问题就解决了。注意：循环能够解决的问题递归一定能够解决，反之则不一定。如果循环嵌套层次过多，则可以使用递归，但是递归效率比循环效率更低。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li><p>集合Collection接口的继承结构图：</p><p><img src="D:\course11\note\jpg\list.png" alt="list.png"></p></li><li><p>LinkedList类</p><ul><li>实现的接口：<ul><li>collection接口，List接口，Deque接口（双端队列）</li></ul></li></ul></li><li><p>链表之单向链表</p><ul><li><p>一个节点由数据位和地址位组成，数据位就是存储元素，地址位就是下一个节点的地址。</p><p><img src="D:\course11\note\jpg\linkde1.png" alt="linked1"></p></li></ul></li><li><p>链表之双向链表</p><ul><li><p>一个节点由两个地址位和一个数据位，数据位存储元素，地址位一个地址位指向前一个节点的地址，一个指向下一个节点的地址。</p><p><img src="D:\course11\note\jpg\linkde2.png" alt="linkde2"></p></li></ul></li><li><p>链表的特点：</p><pre><code>    1.链表是由节点链接而成的    2.链表在内存中不是一段连续的内存空间，添加一个节点就在内存中新开一个空间存储节点    3.链表的增删效率高，查改的效率低。    4.非线程安全，安全性低，效率高。</code></pre></li><li><p>Vector类：</p><pre><code>    向量类    1.List的实现类    2.底层数据结构：动态数组    3.增删效率低，查改效率高    4.线程安全的，安全性高，效率低（几乎不用）</code></pre></li><li><p>泛型（genericity）</p><pre><code>泛型：又叫参数化类型，就是应用数据类型作为参数了。（泛型也有形参和实参）    泛型的形参：仅仅表示这是一个泛型，没有具体的数据类型。（可以用 E T…）    泛型的实参：在创建对象时定义实参，约束集合的数据类型。注意：只有引用数据类型才能作为泛型。    泛型的作用：约束集合中的元素的数据类型，将元素类型的检测从运行时提升到编译时。泛型的方法：（该方法没什么实际运用，了解语法即可）    泛型方法的定义上一定有&lt;泛型的形参&gt;的方法才是泛型方法    泛型方法的语法格式：    修饰符 &lt;泛型&gt; 返回值类型  方法名（参数列表）｛｝    泛型通配符：？（没什么鸟用，了解即可）    &lt;?&gt;这里的？就是泛型通配符。    泛型通配符？：表示所有泛型实参，就是可以表示泛型所有的具体类型    &lt;E&gt;：这里的E表示的是泛型所有的形参。    泛型通配符主要配合泛型的限定来使用泛型的限定：    上限：&lt;? extends T&gt; 表示？只能是T类及其子类    下限：&lt;? super T&gt;表示？只能是T类及其父类    注意：T 表示一个类（自定义类也行）    泛型擦除：    源代码中使用的泛型，在经过编译后，代码中就看不大泛型，就是泛型擦除。（泛型擦除不是泛型丢失了，而是在编译后的字节码文件中使用单独的标识来存储泛型了）</code></pre></li><li><p>set接口</p><pre><code>是collection接口的子接口。特点：元素不能重复，元素重复是否有序和实现类有关。</code></pre></li><li><p>HashSet</p><pre><code>HsahSet是set接口的实现类。1.元素不能重复2.元素无序，特别是它不保证该顺序恒久不变。3.底层的数据结构是HashMap&lt;k,v&gt;,HashMap的底层结构是哈希表哈希表：也叫散列表，是根据关键码值（key）而直接进行访问的数据结构哈希表是一个数组。哈希表中的数据会产生哈希冲突（碰撞）哈希冲突：不同的key，hashCode值一样，哈希表中的索引就一样，这就是哈西冲突。</code></pre></li><li><p>LinedHashSet类</p><pre><code>是HashSet的子类    底层为 链表+哈希表特点：元素唯一且有序。</code></pre></li><li><p>TreeSet类</p><pre class="line-numbers language-Java"><code class="language-Java">1.TreeSet类是set接口的实现类2.treeSet元素不重复3.底层结构是TreeSetMap，treeMap的底层是红黑树4.treeSet是根据元素进行排序    排序方法：     1.使用自然排序接口（Comparable）实现排序            需要元素类实现该接口并且（添加泛型），才能实现排序功能            （设置排序规则：返回值< 0 倒序，返回值 = 0 元素相同，返回值 > 0 正序）        缺点：扩展性差，不易修改            2.使用比较器排序接口（Comparator）实现排序：            不需要元素类实现该接口，需要构造一个类实现该接口，在构造的类中写入比较条件。        优点：和比较的类解耦合，满足ocp原则，可以做多种排序要求。            注意：当利用无参构造创建对象时，调用的是自然排序。用有参构造new了一个比较器时，调用比较器排序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Map&lt;K,V&gt;接口</p><p>​HashMap实现类 , Hashtable实现类 , TreeMap实现类</p><p>map的结构继承图：</p><p><img src="D:\course11\note\jpg\map.png" alt="map"></p><p>注意:根据以上的继承关系我们知道Map接口和Collection接口是没有关系的。</p><p>但是在开发中我们还是把Map叫做Map集合;因为Map接口也是java集合框架的成员。</p><p>此接口是Java Collections Framework的成员。</p></li><li><p>HashMap类</p><pre><code>1.是Map 接口的实现类2.底层是哈希表3.线程不安全的，安全性低，效率高4.允许使用null键，null值。    哈希表中的数组初始容量是16当Map中的元素达到容量的0.75倍就会扩容。0.75是map的负载因子。这个数在时间和空间上都是相对最合适的扩容：新容量=旧容量的2倍。容量必须满足：&lt;= 2的30次方。</code></pre></li><li><p>LinkdHashMap类</p><pre><code>保证了存储元素时的有序性。</code></pre></li><li><p>TreeMap类</p><pre><code>1.是Map接口的实现类2.底层是红黑树。3.红黑树的数据结构是约束key的4.可以对Map中的key排序也有“自然排序”和“比较器排序”两种。</code></pre></li></ul><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>​IO流的思维导图：</p><p><img src="D:\course11\note\jpg\io.png" alt="io"></p><p>io流的引入：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*我们要将数据以文件的形式永久的保存到硬盘上，而要将数据写入文件中；或者从文件中读取数据，就需要使用io流    IO流：    io：输入输出    流：数据流，连续不断的数据    IO流的分类：根据流向的不同分为：    输入流：读数据，将数据读取到程序中    输出流：写数据，将程序中的数据写到文件中根据操作数据的不同分为：    字节流：按照字节为单位写数据    字符流：按照字符为单位写数据    四大基本抽象流：    字节输入流(InputStream)：按照字节为单位读数据        表示所有输出字节流的超类    字节输出流(outputstream) :按照字节为单位写数据        表示所有输入字节流的超类    字符输入流(Reader):按照字符为单位读数据    字符输出流(writer):按照字符为单位写数据    流根据不同功能分为：    节点流（普通流）：真正读写数据的流。真正干活的。    处理流（包装流）：是对节点流的封装，也就是在节点流的基础上增加心得功能。但是读写数据还是使用节点流    注意：字节流是万能流，什么文件都可以操作，     字符流不是万能的，只有记事本打开不会乱码的文件，才可以用字符流操作。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件输入输出流</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*文件输入输出流是一种普通流，真正干活的。文件输入流(FileInputStream)    用于读取硬盘中文件的数据。（以字节为单位读取）文件便捷输入流(FileReader)    用于读取硬盘中文件的数据。（以字符为单位读取）    文件输出流(FileOutputStream)    用于向硬盘中的文件写入数据。（以字节为单位写入）文件便捷输出流(FileWriter)    用于向硬盘中的文件写入数据。（以字符为单位写入） */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓冲流</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*缓冲流是一种处理流，在节点流的基础上增加了缓冲区。字节缓冲输入流()BufferedInputStream)    BufferedInputStream为另一个输入流添加一些功能，即华冲输入以及支持mark和reset方法的能力    字节缓冲输出流(BufferedOutputStream)    该类实现缓冲的输出流，通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准输入输出流</p><ul><li><p>计算机中的标准输入设备：键盘</p></li><li><p>标准输出设备：显示器</p></li><li><p>system类中的静态方法：</p><ul><li><p>标准错误输出流(static Printstream err)</p></li><li><p>标准输入流(static Inputstream in)</p><ul><li>作用于键盘</li></ul></li></ul><ul><li>标准输出流(static Printstream out)<ul><li>作用于显示器</li></ul></li></ul></li></ul><p>打印流</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*打印流(PrintStream)打印流是一种处理流，为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数据流</p><ul><li>数据流只有字节流，没有字符流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***序列化(DataOutputStream)*将数据以乱码的方式写入，读需要使用反序列化(DataInputStream)来读取数据*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DataOutputStream dos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/***反序列化(DataInputStream)*读取序列化后的数据，读取时需要与写入时的数据类型顺序对应，否则会报错*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test04</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DataInputStream dis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/15/hello-world/"/>
      <url>/2022/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 世界 ！你好 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyMarkdown</title>
      <link href="/2020/02/16/index/"/>
      <url>/2020/02/16/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
